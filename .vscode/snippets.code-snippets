{
    "nuke.IrToken(...)": {
        "prefix": "nuke.IrToken(...)",
        "body": "nuke.IrToken(${1:...})",
        "description": "Nuke internal. Not for public use."
    },
    "nuke.activeViewer()": {
        "prefix": "nuke.activeViewer()",
        "body": "nuke.activeViewer()",
        "description": "Return an object representing the active Viewer panel. This is not the\n  same as the Viewer node, this is the viewer UI element.\n\nReturns: ViewerWindow\nObject representing the active ViewerWindow"
    },
    "nuke.addAfterBackgroundFrameRender(call, args=(), kwargs={})": {
        "prefix": "nuke.addAfterBackgroundFrameRender(call, args=(), kwargs={})",
        "body": "nuke.addAfterBackgroundFrameRender(${1:call}, args=${2:()}, kwargs=${3:{}})",
        "description": "Add code to execute after each frame of a background render.\nThe call must be in the form of:\ndef foo(context):\n  pass\n\nThe context object that will be passed in is a dictionary containing the following elements:\nid => The identifier for the task that's making progress\nframe => the current frame number being rendered\nnumFrames => the total number of frames that is being rendered\nframeProgress => the number of frames rendered so far.\n\nPlease be aware that the current Nuke context will not make sense in the callback (e.g. nuke.thisNode will return a random node)."
    },
    "nuke.addAfterBackgroundRender(call, args=(), kwargs={})": {
        "prefix": "nuke.addAfterBackgroundRender(call, args=(), kwargs={})",
        "body": "nuke.addAfterBackgroundRender(${1:call}, args=${2:()}, kwargs=${3:{}})",
        "description": "Add code to execute after any background renders.\nThe call must be in the form of:\ndef foo(context):\n  pass\n\nThe context object that will be passed in is a dictionary containing the following elements:\nid => The identifier for the task that's ended\n\nPlease be aware that the current Nuke context will not make sense in the callback (e.g. nuke.thisNode will return a random node)."
    },
    "nuke.addAfterFrameRender(call, args=(), kwargs={}, nodeClass='Write')": {
        "prefix": "nuke.addAfterFrameRender(call, args=(), kwargs={}, nodeClass='Write')",
        "body": "nuke.addAfterFrameRender(${1:call}, args=${2:()}, kwargs=${3:{}}, nodeClass=${4:'Write'})",
        "description": "Add code to execute after each frame of a render"
    },
    "nuke.addAfterRender(call, args=(), kwargs={}, nodeClass='Write')": {
        "prefix": "nuke.addAfterRender(call, args=(), kwargs={}, nodeClass='Write')",
        "body": "nuke.addAfterRender(${1:call}, args=${2:()}, kwargs=${3:{}}, nodeClass=${4:'Write'})",
        "description": "Add code to execute after any renders"
    },
    "nuke.addAutoSaveDeleteFilter(filter)": {
        "prefix": "nuke.addAutoSaveDeleteFilter(filter)",
        "body": "nuke.addAutoSaveDeleteFilter(${1:filter})",
        "description": "Add a function to modify the autosave filename before Nuke attempts \n  delete the autosave file.\nLook at rollingAutoSave.py in the nukescripts directory for an example\n  of using the auto save filters.\n\nParameters:\n\nfilter - A filter function.  The first argument to the filter is the \n          current autosave filename. This function should return the \n          filename to delete or return None if no file should be deleted.\n\nReturns: None"
    },
    "nuke.addAutoSaveFilter(filter)": {
        "prefix": "nuke.addAutoSaveFilter(filter)",
        "body": "nuke.addAutoSaveFilter(${1:filter})",
        "description": "Add a function to modify the autosave filename before Nuke saves the \n  current script on an autosave timeout.\nLook at rollingAutoSave.py in the nukescripts directory for an example\n  of using the auto save filters.\n\nParameters:\n\nfilter - A filter function.  The first argument to the filter is the \n          current autosave filename. The filter should return the filename \n          to save the autosave to.\n\nReturns: None"
    },
    "nuke.addAutoSaveRestoreFilter(filter)": {
        "prefix": "nuke.addAutoSaveRestoreFilter(filter)",
        "body": "nuke.addAutoSaveRestoreFilter(${1:filter})",
        "description": "Add a function to modify the autosave restore file before Nuke \n  attempts to restores the autosave file.\nLook at rollingAutoSave.py in the nukescripts directory for an example\n  of using the auto save filters.\n\nParameters:\n\nfilter - A filter function.  The first argument to the filter is the \n          current autosave filename. This function should return the \n          filename to load autosave from or it should return None if the \n          autosave file should be ignored.\n\nReturns: None"
    },
    "nuke.addAutolabel(call, args=(), kwargs={}, nodeClass='*')": {
        "prefix": "nuke.addAutolabel(call, args=(), kwargs={}, nodeClass='*')",
        "body": "nuke.addAutolabel(${1:call}, args=${2:()}, kwargs=${3:{}}, nodeClass=${4:'*'})",
        "description": "Add code to execute on every node to produce the text to draw on it in\n  the DAG. Any value other than None is converted to a string and used as \n  the text. None indicates that previously-added functions should be \n  tried"
    },
    "nuke.addBeforeBackgroundRender(call, args=(), kwargs={})": {
        "prefix": "nuke.addBeforeBackgroundRender(call, args=(), kwargs={})",
        "body": "nuke.addBeforeBackgroundRender(${1:call}, args=${2:()}, kwargs=${3:{}})",
        "description": "Add code to execute before starting any background renders. \nThe call must be in the form of:\ndef foo(context):\n  pass\n\nThe context object that will be passed in is a dictionary containing the following elements:\nid => The identifier for the task that's about to begin\n\nPlease be aware that the current Nuke context will not make sense in the callback (e.g. nuke.thisNode will return a random node)."
    },
    "nuke.addBeforeFrameRender(call, args=(), kwargs={}, nodeClass='Write')": {
        "prefix": "nuke.addBeforeFrameRender(call, args=(), kwargs={}, nodeClass='Write')",
        "body": "nuke.addBeforeFrameRender(${1:call}, args=${2:()}, kwargs=${3:{}}, nodeClass=${4:'Write'})",
        "description": "Add code to execute before each frame of a render"
    },
    "nuke.addBeforeRender(call, args=(), kwargs={}, nodeClass='Write')": {
        "prefix": "nuke.addBeforeRender(call, args=(), kwargs={}, nodeClass='Write')",
        "body": "nuke.addBeforeRender(${1:call}, args=${2:()}, kwargs=${3:{}}, nodeClass=${4:'Write'})",
        "description": "Add code to execute before starting any renders"
    },
    "nuke.addFavoriteDir(name, directory, type, icon, tooltip, key)": {
        "prefix": "nuke.addFavoriteDir(name, directory, type, icon, tooltip, key)",
        "body": "nuke.addFavoriteDir(${1:name}, ${2:directory}, ${3:type}, ${4:icon}, ${5:tooltip}, ${6:key})",
        "description": "Add a path to the file choosers favorite directory list. The path name\n  can contain environment variables which will be expanded when the user \n  clicks the favourites button\n\nParameters:\n\nname - Favourite path entry ('Home', 'Desktop', etc.).\ndirectory - FileChooser will change to this directory path.\ntype - Optional bitwise OR combination of nuke.IMAGE, nuke.SCRIPT, \n          nuke.FONT or nuke.GEO.\nicon - Optional filename of an image to use as an icon.\ntooltip - Optional short text to explain the path and the meaning of the \n          name.\nkey - Optional shortcut key.\n\nReturns: None\nNone."
    },
    "nuke.addFilenameFilter(call, args=(), kwargs={}, nodeClass='*')": {
        "prefix": "nuke.addFilenameFilter(call, args=(), kwargs={}, nodeClass='*')",
        "body": "nuke.addFilenameFilter(${1:call}, args=${2:()}, kwargs=${3:{}}, nodeClass=${4:'*'})",
        "description": "Add a function to modify filenames before Nuke passes them to the \n  operating system. The first argument to the function is the filename, and\n  it should return the new filename. None is the same as returning the \n  string unchanged. All added functions are called in backwards order."
    },
    "nuke.addFormat(s)": {
        "prefix": "nuke.addFormat(s)",
        "body": "nuke.addFormat(${1:s})",
        "description": "Create a new image format, which will show up on the pull-down menus \n  for image formats. You must give a width and height and name. The xyrt \n  rectangle describes the image area, if it is smaller than the width and \n  height (for Academy aperture, for example). The pixel aspect is the ratio\n  of the width of a pixel to the height.\n\nParameters:\n\ns - String in TCL format \"w h ?x y r t? ?pa? name\".\n\nReturns: Format or None\nFormat or None."
    },
    "nuke.addKnobChanged(call, args=(), kwargs={}, nodeClass='*', node=None)": {
        "prefix": "nuke.addKnobChanged(call, args=(), kwargs={}, nodeClass='*', node=None)",
        "body": "nuke.addKnobChanged(${1:call}, args=${2:()}, kwargs=${3:{}}, nodeClass=${4:'*'}, node=${5:None})",
        "description": "Add code to execute when the user changes a knob The knob is availble \n  in nuke.thisKnob() and the node in nuke.thisNode(). This is also called \n  with dummy knobs when the control panel is opened or when the inputs to \n  the node changes. The purpose is to update other knobs in the control \n  panel. Use addUpdateUI() for changes that should happen even when the \n  panel is closed."
    },
    "nuke.addNodePresetExcludePaths(paths)": {
        "prefix": "nuke.addNodePresetExcludePaths(paths)",
        "body": "nuke.addNodePresetExcludePaths(${1:paths})",
        "description": "@param paths Sequence of paths to exclude Adds a list of paths that \n  will be excluded from Node preset search paths.\n\nReturns: None\nNone."
    },
    "nuke.addOnCreate(call, args=(), kwargs={}, nodeClass='*')": {
        "prefix": "nuke.addOnCreate(call, args=(), kwargs={}, nodeClass='*')",
        "body": "nuke.addOnCreate(${1:call}, args=${2:()}, kwargs=${3:{}}, nodeClass=${4:'*'})",
        "description": "Add code to execute when a node is created or undeleted"
    },
    "nuke.addOnDestroy(call, args=(), kwargs={}, nodeClass='*')": {
        "prefix": "nuke.addOnDestroy(call, args=(), kwargs={}, nodeClass='*')",
        "body": "nuke.addOnDestroy(${1:call}, args=${2:()}, kwargs=${3:{}}, nodeClass=${4:'*'})",
        "description": "Add code to execute when a node is destroyed"
    },
    "nuke.addOnScriptClose(call, args=(), kwargs={}, nodeClass='Root')": {
        "prefix": "nuke.addOnScriptClose(call, args=(), kwargs={}, nodeClass='Root')",
        "body": "nuke.addOnScriptClose(${1:call}, args=${2:()}, kwargs=${3:{}}, nodeClass=${4:'Root'})",
        "description": "Add code to execute before a script is closed"
    },
    "nuke.addOnScriptLoad(call, args=(), kwargs={}, nodeClass='Root')": {
        "prefix": "nuke.addOnScriptLoad(call, args=(), kwargs={}, nodeClass='Root')",
        "body": "nuke.addOnScriptLoad(${1:call}, args=${2:()}, kwargs=${3:{}}, nodeClass=${4:'Root'})",
        "description": "Add code to execute when a script is loaded"
    },
    "nuke.addOnScriptSave(call, args=(), kwargs={}, nodeClass='Root')": {
        "prefix": "nuke.addOnScriptSave(call, args=(), kwargs={}, nodeClass='Root')",
        "body": "nuke.addOnScriptSave(${1:call}, args=${2:()}, kwargs=${3:{}}, nodeClass=${4:'Root'})",
        "description": "Add code to execute before a script is saved"
    },
    "nuke.addOnUserCreate(call, args=(), kwargs={}, nodeClass='*')": {
        "prefix": "nuke.addOnUserCreate(call, args=(), kwargs={}, nodeClass='*')",
        "body": "nuke.addOnUserCreate(${1:call}, args=${2:()}, kwargs=${3:{}}, nodeClass=${4:'*'})",
        "description": "Add code to execute when user creates a node"
    },
    "nuke.addSequenceFileExtension(fileExtension)": {
        "prefix": "nuke.addSequenceFileExtension(fileExtension)",
        "body": "nuke.addSequenceFileExtension(${1:fileExtension})",
        "description": "Adds the input file extension to the list of extensions that will get \n  displayed as sequences in the file browser.\n\nParameters:\n\nfileExtension, the, new, file, extension., Valid, examples, are - 'exr', '.jpg'; invalid examples are: 'somefile.ext'"
    },
    "nuke.addToolsetExcludePaths(paths)": {
        "prefix": "nuke.addToolsetExcludePaths(paths)",
        "body": "nuke.addToolsetExcludePaths(${1:paths})",
        "description": "@param paths Sequence of paths to exclude Adds a list of paths that \n  will be excluded from Toolset search paths.\n\nReturns: None\nNone."
    },
    "nuke.addUpdateUI(call, args=(), kwargs={}, nodeClass='*')": {
        "prefix": "nuke.addUpdateUI(call, args=(), kwargs={}, nodeClass='*')",
        "body": "nuke.addUpdateUI(${1:call}, args=${2:()}, kwargs=${3:{}}, nodeClass=${4:'*'})",
        "description": "Add code to execute on every node when things change. This is done \n  during idle, you cannot rely on it being done before it starts updating \n  the viewer"
    },
    "nuke.addValidateFilename(call, args=(), kwargs={}, nodeClass='Write')": {
        "prefix": "nuke.addValidateFilename(call, args=(), kwargs={}, nodeClass='Write')",
        "body": "nuke.addValidateFilename(${1:call}, args=${2:()}, kwargs=${3:{}}, nodeClass=${4:'Write'})",
        "description": "Add a function to validate a filename in Write nodes. The first \n  argument is the filename and it should return a Boolean as to whether the\n  filename is valid or not. If a callback is provided, it will control \n  whether the Render button of Write nodes and the Execute button of \n  WriteGeo nodes is enabled or not."
    },
    "nuke.addView(s)": {
        "prefix": "nuke.addView(s)",
        "body": "nuke.addView(${1:s})",
        "description": "Deprecated. Use the Root node.\nAdds a new view to the list of views.\n\nParameters:\n\ns - View name.\n\nReturns: None\nNone"
    },
    "nuke.afterBackgroundFrameRender(context)": {
        "prefix": "nuke.afterBackgroundFrameRender(context)",
        "body": "nuke.afterBackgroundFrameRender(${1:context})",
        "description": ""
    },
    "nuke.afterBackgroundRender(context)": {
        "prefix": "nuke.afterBackgroundRender(context)",
        "body": "nuke.afterBackgroundRender(${1:context})",
        "description": ""
    },
    "nuke.afterFrameRender()": {
        "prefix": "nuke.afterFrameRender()",
        "body": "nuke.afterFrameRender()",
        "description": ""
    },
    "nuke.afterRender()": {
        "prefix": "nuke.afterRender()",
        "body": "nuke.afterRender()",
        "description": ""
    },
    "nuke.allNodes(filter, group)": {
        "prefix": "nuke.allNodes(filter, group)",
        "body": "nuke.allNodes(${1:filter}, ${2:group})",
        "description": "List of all nodes in a group. If you need to get all the nodes in the \n  script from a context which has no child nodes, for instance a control \n  panel, use nuke.root().nodes().\n\nParameters:\n\nfilter - Optional. Only return nodes of the specified class.\ngroup - Optional. If the group is omitted the current group (ie the group\n          the user picked a menu item from the toolbar of) is used.\nrecurseGroups - Optional. If True, will also return all child nodes within any \n          group nodes. This is done recursively and defaults to False.\n\nReturns: List\nList"
    },
    "nuke.animation(object, *commands)": {
        "prefix": "nuke.animation(object, *commands)",
        "body": "nuke.animation(${1:object}, ${2:*commands})",
        "description": "Does operations on an animation curve.\nThe following commands are supported:\n\nclear deletes all the keys from the animation.\n    \n\nerase index last_index removes all \n      keyframes between index and last_index\n    \n\nexpression newvalue returns or sets the \n      expression for the animation. The default is 'curve' or 'y' which \n      returns the interpolation of the keys.\n    \n\ngenerate start end increment field expression field \n      expression ... generates an animation with start, end, and\n      increment. Multiple field/expression pairs generate a keyframe. \n      Possible field commands are:\n      \n\nx sets the frame number for the next keyframe\n        \n\ny sets the keyframe value\n        \n\ndy sets the left slope\n        \n\nldy sets left and right slope to the same value\n        \n\nla and ra are the length of the slope handle in x \n          direction. A value of 1 generates a handle that is one third of \n          the distance to the next keyframe.\n        \n\nindex x returns the index of the last key with x \n      <= t, return -1 for none.\n    \n\nis_key return non-zero if there is a key with x == t. The \n      actual return value is the index+1.\n    \n\nmove field expression field expression \n      replaces all selected keys in an animation with new ones as explained\n      above in generate\n\nname returns a user-friendly name for this animation. This \n      will eliminate any common prefix between this animation and all other\n      selected ones, and also replaces mangled names returned by animations\n      with nice ones.\n    \n\nsize returns the number of keys in the animation.\n    \n\ntest errors if no points in the animation are selected\n    \n\ny index newvalue gets or sets the value of\n      an animation.\n    \n\nx index newvalue gets or sets the \n      horizontal postion of a key. If the animation contains an expression \n      or keyframes, the new value will be overridden.\n    \n\nSee also: animations\n\nParameters:\n\nobject - The animation curve.\ncommands - a varargs-style list of commands, where each command is one of \n          those defined above.\n\nReturns: None\nNone"
    },
    "nuke.animationEnd()": {
        "prefix": "nuke.animationEnd()",
        "body": "nuke.animationEnd()",
        "description": "Returns the last frame (or x value) for the currently selected \n  animations.\n\nReturns: float\nThe end frame."
    },
    "nuke.animationIncrement()": {
        "prefix": "nuke.animationIncrement()",
        "body": "nuke.animationIncrement()",
        "description": "Returns a recommended interval between samples of the currently \n  selected animation.\n\nReturns: float\nThe recommended interval."
    },
    "nuke.animationStart()": {
        "prefix": "nuke.animationStart()",
        "body": "nuke.animationStart()",
        "description": "Returns the starting frame (or x value) for the currently selected \n  animations.\n\nReturns: float\nThe start frame."
    },
    "nuke.animations()": {
        "prefix": "nuke.animations()",
        "body": "nuke.animations()",
        "description": "Returns a list of animatable things the user wants to work on.\nIf this is a command being executed from a menu item in a curve \n  editor, a list of the names of all selected curves is returned. If this \n  list is empty a \"No curves selected\" error is produced.\nIf this is a command being executed from the pop-up list in a knob \n  then a list of all the fields in the knob is returned.\nIf this is a command being executed from the right-mouse-button pop-up\n  list in a field of a knob, the name of that field is returned.\nOtherwise this produces an error indicating that the command requries \n  a knob context. You can get such a context by doing \"in <knob>\n  {command}\"\nAlso see the 'selected' argument to the animation command.\nSee also: animation, animationStart, animationEnd, \n  animationIncrement\n\nReturns: tuple\nA tuple of animatable things."
    },
    "nuke.applyPreset(nodeName, presetName)": {
        "prefix": "nuke.applyPreset(nodeName, presetName)",
        "body": "nuke.applyPreset(${1:nodeName}, ${2:presetName})",
        "description": "Applies a given preset to the current node.\n\nParameters:\n\npresetName - Name of the preset to use.\n\nReturns: None\nbool."
    },
    "nuke.applyUserPreset(nodeName, presetName)": {
        "prefix": "nuke.applyUserPreset(nodeName, presetName)",
        "body": "nuke.applyUserPreset(${1:nodeName}, ${2:presetName})",
        "description": "Applies a given user preset to the current node.\n\nParameters:\n\npresetName - Name of the preset to use.\n\nReturns: None\nbool."
    },
    "nuke.ask(prompt)": {
        "prefix": "nuke.ask(prompt)",
        "body": "nuke.ask(${1:prompt})",
        "description": "Show a Yes/No dialog.\n\nParameters:\n\nprompt - Present the user with this message.\n\nReturns: bool\nTrue if Yes, False otherwise."
    },
    "nuke.autoSaveDeleteFilter(filename)": {
        "prefix": "nuke.autoSaveDeleteFilter(filename)",
        "body": "nuke.autoSaveDeleteFilter(${1:filename})",
        "description": "Internal function.  Use addAutoSaveDeleteFilter to add a callback"
    },
    "nuke.autoSaveFilter(filename)": {
        "prefix": "nuke.autoSaveFilter(filename)",
        "body": "nuke.autoSaveFilter(${1:filename})",
        "description": "Internal function.  Use addAutoSaveFilter to add a callback"
    },
    "nuke.autoSaveRestoreFilter(filename)": {
        "prefix": "nuke.autoSaveRestoreFilter(filename)",
        "body": "nuke.autoSaveRestoreFilter(${1:filename})",
        "description": "Internal function.  Use addAutoSaveRestoreFilter to add a callback"
    },
    "nuke.autolabel()": {
        "prefix": "nuke.autolabel()",
        "body": "nuke.autolabel()",
        "description": ""
    },
    "nuke.autoplace(n)": {
        "prefix": "nuke.autoplace(n)",
        "body": "nuke.autoplace(${1:n})",
        "description": "Deprecated. Use Node.autoplace.\nAutomatically place nodes, so they do not overlap.\n\nParameters:\n\nn - Node.\n\nReturns: None\nNone"
    },
    "nuke.autoplaceSnap(n)": {
        "prefix": "nuke.autoplaceSnap(n)",
        "body": "nuke.autoplaceSnap(${1:n})",
        "description": "Move node to the closest grid position.\n\nParameters:\n\nn - Node.\n\nReturns: None\nNone"
    },
    "nuke.beforeBackgroundRender(context)": {
        "prefix": "nuke.beforeBackgroundRender(context)",
        "body": "nuke.beforeBackgroundRender(${1:context})",
        "description": ""
    },
    "nuke.beforeFrameRender()": {
        "prefix": "nuke.beforeFrameRender()",
        "body": "nuke.beforeFrameRender()",
        "description": ""
    },
    "nuke.beforeRender()": {
        "prefix": "nuke.beforeRender()",
        "body": "nuke.beforeRender()",
        "description": ""
    },
    "nuke.cacheUsage()": {
        "prefix": "nuke.cacheUsage()",
        "body": "nuke.cacheUsage()",
        "description": "Get the total amount of memory currently used by the cache.\n\nReturns: int\nCurrent memory usage in bytes."
    },
    "nuke.cancel()": {
        "prefix": "nuke.cancel()",
        "body": "nuke.cancel()",
        "description": "Cancel an in-progress operation. This has the same effect as hitting \n  cancel on the progress panel.\n\nReturns: None\nNone"
    },
    "nuke.center()": {
        "prefix": "nuke.center()",
        "body": "nuke.center()",
        "description": "Return the center values of a group's display, these values are \n  suitable to be passed to nuke.zoom as the DAG center point.  Like so: \n  center = nuke.center() zoom = nuke.zoom() print center[0] print center[1]\n  ## move DAG back to center point without changing zoom. nuke.zoom( zoom, \n  center )\n\nReturns: array with x, then y\nArray of x, y."
    },
    "nuke.channels(n=None)": {
        "prefix": "nuke.channels(n=None)",
        "body": "nuke.channels(n=${1:None})",
        "description": "Deprecated. Use Node.channels.\nList channels. The n argument is a Nuke node and if given only the \n  channels output by this node are listed. If not given or None, all \n  channels known about are listed.\n\nParameters:\n\nn - Optional node parameter.\n\nReturns: (string)\nA list of channel names."
    },
    "nuke.choice(title, prompt, options, default= 0)": {
        "prefix": "nuke.choice(title, prompt, options, default= 0)",
        "body": "nuke.choice(${1:title}, ${2:prompt}, ${3:options}, default=${4: 0})",
        "description": "Shows a dialog box with the given title and prompt text, and a combo \n  box containing the given options.\n\nParameters:\n\ntitle - Text to put in the dialog's title bar.\nprompt - Text to display at the top of the dialog.\noptions - A list of strings for the user to choose from.\ndefault - The index (starting from zero) of the option to select first.\n\nReturns: index\nAn integer index (starting from zero) of the choice the user \n          selected, or None if the dialog was cancelled."
    },
    "nuke.clearDiskCache()": {
        "prefix": "nuke.clearDiskCache()",
        "body": "nuke.clearDiskCache()",
        "description": "Clear the disk cache of all files.\n\nReturns ->\b None"
    },
    "nuke.clearRAMCache()": {
        "prefix": "nuke.clearRAMCache()",
        "body": "nuke.clearRAMCache()",
        "description": "Clear the RAM cache of all files.\n\nReturns ->\b None"
    },
    "nuke.clone(n, args, inpanel)": {
        "prefix": "nuke.clone(n, args, inpanel)",
        "body": "nuke.clone(${1:n}, ${2:args}, ${3:inpanel})",
        "description": "Create a clone node that behaves identical to the original. The node \n  argument is the node to be cloned, args and inpanel are optional \n  arguments similar to createNode. A cloned node shares the exact same \n  properties with its original. Clones share the same set of knobs and the \n  same control panel. However they can have different positions and \n  connections in the render tree. Any clone, including the original, can be\n  deleted at any time without harming any of its clones.\n\nParameters:\n\nn - Node.\nargs - Optional number of inputs requested.\ninpanel - Optional boolean.\n\nReturns: Node\nNode"
    },
    "nuke.cloneSelected(action)": {
        "prefix": "nuke.cloneSelected(action)",
        "body": "nuke.cloneSelected(${1:action})",
        "description": "This makes a clone of all selected nodes, preserving connections \n  between them, and makes only the clones be selected.\n\nParameters:\n\naction - Optional and if 'copy' it cuts the resulting clones to the \n          clipboard.\n\nReturns: bool\nTrue if succeeded, False otherwise."
    },
    "nuke.collapseToGroup(show=True)": {
        "prefix": "nuke.collapseToGroup(show=True)",
        "body": "nuke.collapseToGroup(show=${1:True})",
        "description": "Moves the currently selected nodes to a new group, maintaining their \n  previous connections.\n\nParameters:\n\nshow - If show is True, the node graph for the new group is shown in the\n          background.\n\nReturns: Group\nThe new Group node."
    },
    "nuke.connectNodes()": {
        "prefix": "nuke.connectNodes()",
        "body": "nuke.connectNodes()",
        "description": "Deprecated. Use Group.connectSelectedNodes.\n\nReturns: None\nNone"
    },
    "nuke.connectViewer(inputNum, node)": {
        "prefix": "nuke.connectViewer(inputNum, node)",
        "body": "nuke.connectViewer(${1:inputNum}, ${2:node})",
        "description": "Connect a viewer input to a node. The argument i is the input number \n  and n is either a Nuke node or None. Some viewer in the current group is \n  found, if there are no viewers one is created. The viewer is then altered\n  to have at least n+1 inputs and then input n is connected to the given \n  node.This function is used by the numeric shortcuts in the DAG view \n  menu.\n\nParameters:\n\ninputNum - Input number.\nnode - The Node to connect to the input.\n\nReturns: None\nNone"
    },
    "nuke.createNode(node, args, inpanel)": {
        "prefix": "nuke.createNode(node, args, inpanel)",
        "body": "nuke.createNode(${1:node}, ${2:args}, ${3:inpanel})",
        "description": "Creates a node of the specified type and adds it to the DAG.\n\nParameters:\n\nnode - Node class (e.g. Blur).\nargs - Optional string containing a TCL list of name value pairs (like \n          \"size 50 quality 19\")\ninpanel - Optional boolean to open the control bin (default is True; only \n          applies when the GUI is running).\n\nReturns: Node\nNode."
    },
    "nuke.createScenefileBrowser(fileName, nodeName)": {
        "prefix": "nuke.createScenefileBrowser(fileName, nodeName)",
        "body": "nuke.createScenefileBrowser(${1:fileName}, ${2:nodeName})",
        "description": "Pops up a scene browser dialog box. Receives the path to an Alembic \n  (abc) file, and displays a hierarchical tree of the nodes within the \n  file. The user can select which nodes they are interseted in, and nodes \n  of the appropriate type will automatically. be created. If a valid scene \n  file nodeName is specified, this node will be populated with the selected\n  tree.\n\nParameters:\n\nfileName - Path and filename for an alembic file.\nnodeName - name of a valid scene file node to populate. If the node is \n          invalid, new nodes will be automatically created\n\nReturns: None"
    },
    "nuke.createToolset(filename=None, overwrite=-1, rootPath= None)": {
        "prefix": "nuke.createToolset(filename=None, overwrite=-1, rootPath= None)",
        "body": "nuke.createToolset(filename=${1:None}, overwrite=${2:-1}, rootPath=${3: None})",
        "description": "Creates a tool preset based on the currently selected nodes. \n\n@param filename: Saves the preset as a script with the given file name.\n @param overwrite: If 1 (true) always overwrite; if 0 (false) never overwrite; @param rootPath: If specified, use this as the root path to save the Toolset to. If not specified, save to the user's .nuke/Toolsets folder.  otherwise, in GUI mode ask the user, in terminal do same as False. Default  is -1, meaning 'ask the user'.\n\nReturns: None"
    },
    "nuke.critical(message)": {
        "prefix": "nuke.critical(message)",
        "body": "nuke.critical(${1:message})",
        "description": "Puts the message into the error console, treating it like an error. \n  Also pops up an alert dialog to the user, immediately.\n\nParameters:\n\nmessage - String parameter.\n\nReturns: None\nNone."
    },
    "nuke.debug(message)": {
        "prefix": "nuke.debug(message)",
        "body": "nuke.debug(${1:message})",
        "description": "Puts the message into the error console, treating it like a debug \n  message, which only shows up when the verbosity level is high enough.\n\nParameters:\n\nmessage - String parameter.\n\nReturns: None\nNone."
    },
    "nuke.defaultFontPathname()": {
        "prefix": "nuke.defaultFontPathname()",
        "body": "nuke.defaultFontPathname()",
        "description": "Get the path to Nukes default font.\n\nReturns: str\nPath to the font."
    },
    "nuke.defaultNodeColor(s)": {
        "prefix": "nuke.defaultNodeColor(s)",
        "body": "nuke.defaultNodeColor(${1:s})",
        "description": "Get the default node colour.\n\nParameters:\n\ns - Node class.\n\nReturns: int\nThe color as a packed integer (0xRRGGBB00)."
    },
    "nuke.delete(n)": {
        "prefix": "nuke.delete(n)",
        "body": "nuke.delete(${1:n})",
        "description": "The named node is deleted. It can be recovered with an undo.\n\nParameters:\n\nn - Node.\n\nReturns: None\nNone"
    },
    "nuke.deletePreset(nodeClassName, presetName)": {
        "prefix": "nuke.deletePreset(nodeClassName, presetName)",
        "body": "nuke.deletePreset(${1:nodeClassName}, ${2:presetName})",
        "description": "Deletes a pre-created node preset\n\nParameters:\n\nnodeClassName - Name of the node class to create a preset for.\npresetName - Name of the preset to create.\n\nReturns: None\nbool."
    },
    "nuke.deleteUserPreset(nodeClassName, presetName)": {
        "prefix": "nuke.deleteUserPreset(nodeClassName, presetName)",
        "body": "nuke.deleteUserPreset(${1:nodeClassName}, ${2:presetName})",
        "description": "Deletes a pre-created user node preset\n\nParameters:\n\nnodeClassName - Name of the node class to create a preset for.\npresetName - Name of the preset to create.\n\nReturns: None\nbool."
    },
    "nuke.deleteView(s)": {
        "prefix": "nuke.deleteView(s)",
        "body": "nuke.deleteView(${1:s})",
        "description": "Deprecated. Use the Root node.\nDeletes a view from the list of views.\n\nParameters:\n\ns - View name.\n\nReturns: None\nNone"
    },
    "nuke.dependencies(nodes, what=7)": {
        "prefix": "nuke.dependencies(nodes, what=7)",
        "body": "nuke.dependencies(${1:nodes}, what=${2:7})",
        "description": "List all nodes referred to by the nodes argument. 'what' is an optional integer (see below).\n  You can use the following constants or'ed together to select the types of dependencies that are looked for:\n         nuke.EXPRESSIONS = expressions\n         nuke.INPUTS = visible input pipes\n         nuke.HIDDEN_INPUTS = hidden input pipes.\n  The default is to look for all types of connections.\n  \nExample:\n  n1 = nuke.nodes.Blur()\n  n2 = nuke.nodes.Merge()\n  n2.setInput(0, n1)\n  deps = nuke.dependencies([n2], nuke.INPUTS | nuke.HIDDEN_INPUTS | nuke.EXPRESSIONS)"
    },
    "nuke.dependentNodes(what=7, nodes=[], evaluateAll=True)": {
        "prefix": "nuke.dependentNodes(what=7, nodes=[], evaluateAll=True)",
        "body": "nuke.dependentNodes(what=${1:7}, nodes=${2:[]}, evaluateAll=${3:True})",
        "description": "List all nodes referred to by the nodes argument. 'what' is an optional integer (see below).\n  You can use the following constants or'ed together to select what types of dependent nodes are looked for:\n         nuke.EXPRESSIONS = expressions\n         nuke.INPUTS = visible input pipes\n         nuke.HIDDEN_INPUTS = hidden input pipes.\n  The default is to look for all types of connections.\n  \n  evaluateAll is an optional boolean defaulting to True. When this parameter is true, it forces a re-evaluation of the entire tree.\n  This can be expensive, but otherwise could give incorrect results if nodes are expression-linked.\n  \n  \nExample:\n  n1 = nuke.nodes.Blur()\n  n2 = nuke.nodes.Merge()\n  n2.setInput(0, n1)\n  ndeps = nuke.dependentNodes(nuke.INPUTS | nuke.HIDDEN_INPUTS | nuke.EXPRESSIONS, [n1])\n  \n  @param what: Or'ed constant of nuke.EXPRESSIONS, nuke.INPUTS and nuke.HIDDEN_INPUTS to select the types of dependent nodes. The default is to look for all types of connections.\n  @param evaluateAll: Specifies whether a full tree evaluation will take place. Defaults to True.\n  @return: List of nodes."
    },
    "nuke.display(s, node, title, width)": {
        "prefix": "nuke.display(s, node, title, width)",
        "body": "nuke.display(${1:s}, ${2:node}, ${3:title}, ${4:width})",
        "description": "Creates a window showing the result of a python script. The script is \n  executed in the context of the given node, so this and a knob name in \n  expressions refer to that node.\nThe window will have an 'update' button to run the script again.\n\nParameters:\n\ns - Python script.\nnode - Node.\ntitle - Optional title of window.\nwidth - Optional width of window.\n\nReturns: None\nNone."
    },
    "nuke.endGroup()": {
        "prefix": "nuke.endGroup()",
        "body": "nuke.endGroup()",
        "description": "Deprecated. Use Group.run, Group.begin/Group.end pairs or (preferably)\n  the with statement.\nChanges the current group to the parent of the current group. Does \n  nothing if the current group is a Root (the main window of a script).\n\nReturns: None\nNone."
    },
    "nuke.error(message)": {
        "prefix": "nuke.error(message)",
        "body": "nuke.error(${1:message})",
        "description": "Puts the message into the error console, treating it like an \n  error.\n\nParameters:\n\nmessage - String parameter.\n\nReturns: None\nNone."
    },
    "nuke.execute(nameOrNode, start, end, incr, views, continueOnError= False)": {
        "prefix": "nuke.execute(nameOrNode, start, end, incr, views, continueOnError= False)",
        "body": "nuke.execute(${1:nameOrNode}, ${2:start}, ${3:end}, ${4:incr}, ${5:views}, continueOnError=${6: False})",
        "description": "execute(nameOrNode, frameRangeSet, views, continueOnError = False) \n  -> None.\nExecute the named Write node over the specified frames.\nThere are two variants of this function. The first allows you to \n  specify the frames to write range by giving the start frame number, the \n  end frame number and the frame increment. The second allows you to \n  specify more complicated sets of frames by providing a sequence of \n  FrameRange objects.\nIf Nuke is run with the GUI up, this will pop up a progress meter. If \n  the user hits the cancel button this command will return 'cancelled' \n  error. If Nuke is run from the nuke command line (ie nuke was started \n  with the -t switch) execute() prints a text percentage as it progresses. \n  If the user types ^C it will aborting the execute() and return a \n  'cancelled' error.\n\nParameters:\n\nnameOrNode - A node name or a node object.\nstart - Optional start frame. Default is root.first_frame.\nend - Optional end frame. Default is root.last_frame.\nincr - Optional increment. Default is 1.\nviews - Optional list of views. Default is None, meaning \"all \n          views\".\n\nReturns: None\nNone"
    },
    "nuke.executeBackgroundNuke(exe_path, nodes, frameRange, views, limits, continueOnError= False, flipbookToRun= , flipbookOptions= {})": {
        "prefix": "nuke.executeBackgroundNuke(exe_path, nodes, frameRange, views, limits, continueOnError= False, flipbookToRun= , flipbookOptions= {})",
        "body": "nuke.executeBackgroundNuke(${1:exe_path}, ${2:nodes}, ${3:frameRange}, ${4:views}, ${5:limits}, continueOnError=${6: False}, ${7:flipbookToRun=}, flipbookOptions=${8: {}})",
        "description": "Run an instance of Nuke as a monitored sub process. Returns an integer\n  that's used as unique id for the started task. If it failed to launch \n  this will be -1.\n\nParameters:\n\nexe_path - Path to Nuke or a script that can take Nuke arguments. You \n          probably want to supply nuke.EXE_PATH.\nnodes - A list of nodes to execute.\nframeRanges - List of frame ranges to execute.\nviews - A list of view names to execute.\nlimits - A dictionary with system limits, currently uses keys maxThreads \n          and maxCache.\nflipbookToRun - The name of the flipbook application to run after the render, or \n          an empty string if not desired.\nflipbookOptions - A dictionary with options to pass to the flipbook. These should \n          include roi and pixelAspect.\n\nReturns: None\nInt."
    },
    "nuke.executeInMainThread(call, args=(), kwargs={})": {
        "prefix": "nuke.executeInMainThread(call, args=(), kwargs={})",
        "body": "nuke.executeInMainThread(${1:call}, args=${2:()}, kwargs=${3:{}})",
        "description": "Execute the callable 'call' with optional arguments 'args' and named arguments 'kwargs' i\nn\n      Nuke's main thread and return immediately."
    },
    "nuke.executeInMainThreadWithResult(call, args=(), kwargs={})": {
        "prefix": "nuke.executeInMainThreadWithResult(call, args=(), kwargs={})",
        "body": "nuke.executeInMainThreadWithResult(${1:call}, args=${2:()}, kwargs=${3:{}})",
        "description": "Execute the callable 'call' with optional arguments 'args' and named arguments 'kwargs' i\nn\n      Nuke's main thread and wait for the result to become available."
    },
    "nuke.executeMultiple(nodes, ranges, views, continueOnError=False)": {
        "prefix": "nuke.executeMultiple(nodes, ranges, views, continueOnError=False)",
        "body": "nuke.executeMultiple(${1:nodes}, ${2:ranges}, ${3:views}, continueOnError=${4:False})",
        "description": "Execute the current script for a specified frame range. The argument \n  nodes is a sequence of Nuke nodes and ranges is a sequence of range \n  lists. A Nuke range list is a sequence of 3 integers - first, last and \n  incr ( e.g. nuke.execute((w,), ((1,100,1),)) ). The named nodes must all \n  be Write or other executable operators. If no nodes are given then all \n  executable nodes in the current group are executed. Note that DiskCache \n  and Precomp nodes do not get executed with this call, unless explicitly \n  specified.\nIf Nuke is run with the GUI up, this will pop up a progress meter. If \n  the user hits the cancel button this command will raise a 'cancelled' \n  error. If Nuke is run in terminal mode (with the -t switch) this prints a\n  text percentage as it progresses.\nIf the user types ^C it will abort the execute() and raise a \n  'cancelled' error.\n\nParameters:\n\nnodes - Node list.\nranges - Optional start frame. Default is root.first_frame.\nviews - Optional list of views. Default is None. Execute for all.\n\nReturns: None\nNone"
    },
    "nuke.exists(s)": {
        "prefix": "nuke.exists(s)",
        "body": "nuke.exists(${1:s})",
        "description": "Check for the existence of a named item. Function for \n  backwards-compatibility with TCL.\n\nParameters:\n\ns - Name of item.\n\nReturns: bool\nTrue if exists, False otherwise."
    },
    "nuke.expandSelectedGroup()": {
        "prefix": "nuke.expandSelectedGroup()",
        "body": "nuke.expandSelectedGroup()",
        "description": "Moves all nodes from the currently selected group node into its parent\n  group, maintaining node input and output connections, and deletes the \n  group. Returns the nodes that were moved, which will also be \n  selected.\n\nReturns: None\nNone"
    },
    "nuke.expr(s)": {
        "prefix": "nuke.expr(s)",
        "body": "nuke.expr(${1:s})",
        "description": "Parse a Nuke expression. Runs the same expression parser as is used by\n  animations. This is not the same as the tcl expr parser. The main \n  differences are:\n\n      Only floating point numbers are calculated. There are no strings, \n      boolean, or integer values.\n    \n\n      You can name any knob that returns a floating point value, with a \n      dot-separated name, see knob for details on these names. You may \n      follow the knob name with a time in parenthesis (like a function \n      call) and if it is animated it will be evaluated at that time. If it \n      is animated and no time is given, 'frame' is used.\n    \n\n      The words 'frame', 't', and 'x' evaluate to the frame number of the \n      context node, or the frame number this animation is being evaluated \n      at.\n    \n\n      The word 'y' in an animation expression evaluates to the value the \n      animation would have if the control points were used and there was no\n      expression. Outside an animation expression y returns zero.\n    \n\nParameters:\n\ns - The expression, as a string.\n\nReturns: float\nThe result."
    },
    "nuke.expression(s)": {
        "prefix": "nuke.expression(s)",
        "body": "nuke.expression(${1:s})",
        "description": "Parse a Nuke expression. Runs the same expression parser as is used by\n  animations. This is not the same as the tcl expr parser. The main \n  differences are:\n\n      Only floating point numbers are calculated. There are no strings, \n      boolean, or integer values.\n    \n\n      You can name any knob that returns a floating point value, with a \n      dot-separated name, see knob for details on these names. You may \n      follow the knob name with a time in parenthesis (like a function \n      call) and if it is animated it will be evaluated at that time. If it \n      is animated and no time is given, 'frame' is used.\n    \n\n      The words 'frame', 't', and 'x' evaluate to the frame number of the \n      context node, or the frame number this animation is being evaluated \n      at.\n    \n\n      The word 'y' in an animation expression evaluates to the value the \n      animation would have if the control points were used and there was no\n      expression. Outside an animation expression y returns zero.\n    \n\nParameters:\n\ns - The expression, as a string.\n\nReturns: float\nThe result."
    },
    "nuke.extractSelected()": {
        "prefix": "nuke.extractSelected()",
        "body": "nuke.extractSelected()",
        "description": "Disconnects the selected nodes in the group from the tree, and shifts \n  them to the side.\n\nReturns: None\nNone"
    },
    "nuke.filename(node, i)": {
        "prefix": "nuke.filename(node, i)",
        "body": "nuke.filename(${1:node}, ${2:i})",
        "description": "Return the filename(s) this node or group is working with.\nFor a Read or Write operator (or anything else with a filename knob) \n  this will return the current filename, based on the root.proxy settings \n  and which of the fullsize/proxy filenames are filled in. All expansion of\n  commands and variables is done. However by default it will still have \n  %%04d sequences in it, use REPLACE to get the actual filename with the \n  current frame number.\nIf the node is a group, a search is done for executable (i.e. Write) \n  operators and the value from each of them is returned. This will \n  duplicate the result of calling execute() on the group.\n\nParameters:\n\nnode - Optional node.\ni - Optional nuke.REPLACE. Will replace %%04d style sequences with \n          the current frame number.\n\nReturns: str\nFilename, or None if no filenames are found."
    },
    "nuke.filenameFilter(filename)": {
        "prefix": "nuke.filenameFilter(filename)",
        "body": "nuke.filenameFilter(${1:filename})",
        "description": ""
    },
    "nuke.forceClone()": {
        "prefix": "nuke.forceClone()",
        "body": "nuke.forceClone()",
        "description": "Returns: bool\nTrue if succeeded, False otherwise."
    },
    "nuke.forceLoad(n)": {
        "prefix": "nuke.forceLoad(n)",
        "body": "nuke.forceLoad(${1:n})",
        "description": "Force the plugin to be fully instantiated.\n\nParameters:\n\nn - Optional node argument. Default is the current node.\n\nReturns: None\nNone"
    },
    "nuke.formats()": {
        "prefix": "nuke.formats()",
        "body": "nuke.formats()",
        "description": "Returns: list\nList of all available formats."
    },
    "nuke.frame(f)": {
        "prefix": "nuke.frame(f)",
        "body": "nuke.frame(${1:f})",
        "description": "Return or set the current frame number. Deprecated. Use \n  Root.frame.\nReturns the current frame. Normally this is the frame number set in \n  the root node, typically by the user moving the frame slider in a viewer.\n  If a number is given, it sets the current frame number to that number. If\n  the current context is the root this changes the root frame.\n\nParameters:\n\nf - Optional frame number.\n\nReturns: Current frame\nCurrent frame."
    },
    "nuke.fromNode(n)": {
        "prefix": "nuke.fromNode(n)",
        "body": "nuke.fromNode(${1:n})",
        "description": "Return the Node n as a string. This function is most useful when \n  combining Python and TCL scripts for backwards compatibility reasons.\n\nParameters:\n\nn - A Node.\n\nReturns: String\nString."
    },
    "nuke.getAllUserPresets()": {
        "prefix": "nuke.getAllUserPresets()",
        "body": "nuke.getAllUserPresets()",
        "description": "gets a list of all current user presets\n\nReturns: None\na list of tuples containing all nodename/presetname pairs."
    },
    "nuke.getClipname(prompt, pattern=None, default=None, multiple=False)": {
        "prefix": "nuke.getClipname(prompt, pattern=None, default=None, multiple=False)",
        "body": "nuke.getClipname(${1:prompt}, pattern=${2:None}, default=${3:None}, multiple=${4:False})",
        "description": "Pops up a file chooser dialog box. You can use the pattern to restrict\n  the displayed choices to matching filenames, normal Unix glob rules are \n  used here. getClipname compresses lists of filenames that only differ by \n  an index number into a single entry called a 'clip'.\n\nParameters:\n\nprompt - Present the user with this message.\npattern - Optional file selection pattern.\ndefault - Optional default filename and path.\nmultiple - Optional boolean convertible object to allow for multiple  \n          selection.\n\nReturns: list of strings or string\nIf multiple is True, the user input is returned as a list of  \n          strings, otherwise as a single string. If the dialog is \n          cancelled, the  return value is None."
    },
    "nuke.getColor(initial)": {
        "prefix": "nuke.getColor(initial)",
        "body": "nuke.getColor(${1:initial})",
        "description": "Show a color chooser dialog and return the selected color as an \n  int.\nThe format of the color values is packed 8bit rgb multiplied by 256 \n  (ie in hex: 0xRRGGBB00).\n\nParameters:\n\ninitial - Optional initial color. Integer with components packed as above.\n\nReturns: int\nThe selected color."
    },
    "nuke.getDeletedPresets()": {
        "prefix": "nuke.getDeletedPresets()",
        "body": "nuke.getDeletedPresets()",
        "description": "gets a list of all currently deleted presets\n\nReturns: None\na pyDict containing all nodename/presetname pairs."
    },
    "nuke.getFileNameList(dir, splitSequences= False, extraInformation= False, returnDirs=True, returnHidden=False)": {
        "prefix": "nuke.getFileNameList(dir, splitSequences= False, extraInformation= False, returnDirs=True, returnHidden=False)",
        "body": "nuke.getFileNameList(${1:dir}, splitSequences=${2: False}, extraInformation=${3: False}, returnDirs=${4:True}, returnHidden=${5:False})",
        "description": "@param dir the directory to get sequences from @param splitSequences \n  whether to split sequences or not @param extraInformation whether or not \n  there should be extra sequence information on the sequence name @param \n  returnDirs whether to return a list of directories as well as sequences \n  @param returnHidden whether to return hidden files and directories. \n  Retrieves the filename list .\n\nReturns: str\nArray of files."
    },
    "nuke.getFilename(message, pattern=None, default=None, favorites=None, type=None, multiple=False)": {
        "prefix": "nuke.getFilename(message, pattern=None, default=None, favorites=None, type=None, multiple=False)",
        "body": "nuke.getFilename(${1:message}, pattern=${2:None}, default=${3:None}, favorites=${4:None}, type=${5:None}, multiple=${6:False})",
        "description": "Pops up a file chooser dialog box. You can use the pattern to restrict\n  the displayed choices to matching filenames, normal Unix glob rules are \n  used here.\n\nParameters:\n\nmessage - Present the user with this message.\npattern - Optional file selection pattern.\ndefault - Optional default filename and path.\nfavorites - Optional. Restrict favorites to this set. Must be one of  \n          'image', 'script', or 'font'.\ntype - Optional the type of browser, to define task-specific behaviors;\n          currently only 'save' is recognised.\nmultiple - Optional boolean convertible object to allow for multiple  \n          selection. If this is True, the return value will be a list of \n          strings; if  not, it will be a single string. The default is\n\nReturns: list of strings or single string\nIf multiple is True, the user input is returned as a list of  \n          strings, otherwise as a single string. If the dialog was \n          cancelled, the  return value will be None."
    },
    "nuke.getFramesAndViews(label, default=None, maxviews=0)": {
        "prefix": "nuke.getFramesAndViews(label, default=None, maxviews=0)",
        "body": "nuke.getFramesAndViews(${1:label}, default=${2:None}, maxviews=${3:0})",
        "description": "Pops up a dialog with fields for a frame range and view selection.\n\nParameters:\n\nlabel - User message.\ndefault - Optional value for the input field.\nmaxviews - Optional max number of views.\n\nReturns: (ranges, views)\nList of ranges and views."
    },
    "nuke.getInput(prompt, default)": {
        "prefix": "nuke.getInput(prompt, default)",
        "body": "nuke.getInput(${1:prompt}, ${2:default})",
        "description": "Pops up a dialog box with a text field for an arbitrary string.\n\nParameters:\n\nprompt - Present the user with this message.\ndefault - Default value for the input text field.\n\nReturns: str\nString from text field or None if dialog is cancelled."
    },
    "nuke.getNodeClassName()": {
        "prefix": "nuke.getNodeClassName()",
        "body": "nuke.getNodeClassName()",
        "description": "gets the class name for the currently selected node\n\nReturns: None\na string containing the name."
    },
    "nuke.getNodePresetExcludePaths()": {
        "prefix": "nuke.getNodePresetExcludePaths()",
        "body": "nuke.getNodePresetExcludePaths()",
        "description": "Gets a list of all paths that are excluded from the search for node \n  presets.\n\nReturns: string list\nList of paths."
    },
    "nuke.getNodePresetID()": {
        "prefix": "nuke.getNodePresetID()",
        "body": "nuke.getNodePresetID()",
        "description": "gets the node preset identifier for the currently selected node\n\nReturns: None\na string containing the ID."
    },
    "nuke.getPaneFor(panelName)": {
        "prefix": "nuke.getPaneFor(panelName)",
        "body": "nuke.getPaneFor(${1:panelName})",
        "description": "Returns the first pane that contains the named panel or None if it \n  can't be found. Note that the panelName must be exact as described in the\n  layout.xml file or the panel ID. For example, 'Properties.1' or 'Viewer.1\n  or 'co.uk.thefoundry.WebBrowser'\n\nReturns: Dock\nThe pane or None."
    },
    "nuke.getPresetKnobValues()": {
        "prefix": "nuke.getPresetKnobValues()",
        "body": "nuke.getPresetKnobValues()",
        "description": "gets a list of knob values for a given preset\n\nParameters:\n\nnodeClassName - Name of the node class to get values for.\npresetName - Name of the preset to get values for.\n\nReturns: None\na pyDict containing all knob name/value pairs."
    },
    "nuke.getPresets()": {
        "prefix": "nuke.getPresets()",
        "body": "nuke.getPresets()",
        "description": "gets a list of all presets for the currently selected node's class\n\nReturns: None\na pyList containing all nodename/presetname pairs."
    },
    "nuke.getPresetsMenu(Node)": {
        "prefix": "nuke.getPresetsMenu(Node)",
        "body": "nuke.getPresetsMenu(${1:Node})",
        "description": "Gets the presets menu for the currently selected node.\n\nReturns: Menu or None\nThe menu, or None if it doesn't exist."
    },
    "nuke.getReadFileKnob(node)": {
        "prefix": "nuke.getReadFileKnob(node)",
        "body": "nuke.getReadFileKnob(${1:node})",
        "description": "\brief Gets the read knob for a node (if it exists).\n\nParameters:\n\nnode - The node to get the knob for.\n\nReturns: knob\nA PyObject containing the read knob if it exists, NULL otherwise"
    },
    "nuke.getToolsetExcludePaths()": {
        "prefix": "nuke.getToolsetExcludePaths()",
        "body": "nuke.getToolsetExcludePaths()",
        "description": "Gets a list of all paths that are excluded from the search for node \n  presets.\n\nReturns: string list\nList of paths."
    },
    "nuke.getUserPresetKnobValues()": {
        "prefix": "nuke.getUserPresetKnobValues()",
        "body": "nuke.getUserPresetKnobValues()",
        "description": "gets a list of knob values for a given preset\n\nParameters:\n\nnodeClassName - Name of the node class to get values for.\npresetName - Name of the preset to get values for.\n\nReturns: None\na pyDict containing all knob name/value pairs."
    },
    "nuke.getUserPresets(Node)": {
        "prefix": "nuke.getUserPresets(Node)",
        "body": "nuke.getUserPresets(${1:Node})",
        "description": "gets a list of all user presets for the currently selected node's \n  class\n\nReturns: None\na pyList containing all nodename/presetname pairs."
    },
    "nuke.hotkeys()": {
        "prefix": "nuke.hotkeys()",
        "body": "nuke.hotkeys()",
        "description": "Returns the Nuke key assignments as a string formatted for use in \n  nuke.display().\n\nReturns: str\nA formatted string."
    },
    "nuke.import_module(name, filterRule)": {
        "prefix": "nuke.import_module(name, filterRule)",
        "body": "nuke.import_module(${1:name}, ${2:filterRule})",
        "description": ""
    },
    "nuke.inputs(n, i)": {
        "prefix": "nuke.inputs(n, i)",
        "body": "nuke.inputs(${1:n}, ${2:i})",
        "description": "Deprecated. Use Node.inputs.\nGet how many inputs the node has. Normally this is a constant but some\n  nodes have a variable number, the user can keep connecting them and the \n  count will increase. Attempting to set the number will just disconnect \n  all inputs greater or equal to number. For a variable input node this may\n  decrease inputs to the new value. For most nodes this will have no effect\n  on the value of inputs.\n\nParameters:\n\nn - Node.\ni - Optional number of inputs requested.\n\nReturns: int\nNumber of inputs."
    },
    "nuke.invertSelection()": {
        "prefix": "nuke.invertSelection()",
        "body": "nuke.invertSelection()",
        "description": "Selects all unselected nodes, and deselects all selected ones.\n\nReturns: None\nNone."
    },
    "nuke.knob(name, value, getType, getClass)": {
        "prefix": "nuke.knob(name, value, getType, getClass)",
        "body": "nuke.knob(${1:name}, ${2:value}, ${3:getType}, ${4:getClass})",
        "description": "\brief Returns or sets the entire state of a knob.\nEach individual control on a control panel is called a 'knob'. A \n  knob's name is a dot-separated list. An example of a fully-expanded name \n  of a knob is 'root.Group1.Blur1.size.w'. 'root' is the node name of the \n  outermost group, 'Group1' is a group inside that containing the blur \n  operator, 'Blur1' is the name of a blur operator, 'size' is the name of \n  the actual knob, and 'w' is the name of the 'field' (there are two fields\n  in a blur size, 'w' and 'h').\nYou can omit a lot of this because all knob names are figured out \n  relative to a 'current knob' and 'current node'. These are set depending \n  on the context of where the scripting is invoked. For menu items the \n  current node is the group that contained the menu, and there is no \n  current knob. For expressions typed into knob fields the current knob is \n  that knob and the current node is the node the knob belongs to.\nIf a name does not start with 'root' then a search upwards is done for\n  the first word in the name, first against the fields in the current knob,\n  then against the knobs in the current node, then against the nodes in the\n  group containing the current node (or in it if it is a group), on up to \n  the root.\nThe word 'this' means the current knob or the current node.\nThe word 'input' means the first (0 or B) input of a node. Ie \n  'Blur1.input' returns the node connected to the input of Blur1, while \n  'Blur1.input.input' returns the input of that node.\nIf you are getting the value for reporting to the user, you probably \n  want to use the value or expression commands.\nIf the getType argument is specified and is True, it will print out \n  the type of the knob rather than getting or setting the value. The type \n  is an integer, using the same list as addUserKnob.\nIf the getClass argument is specified and is True, it will print out \n  the type of the knob as a string, e.g. 'Int_Knob', 'Enumeration_Knob', \n  'XY_Knob'.\nIf both the getType and getClass arguments are present and are True, \n  getType takes precedence.\n\nParameters:\n\nname - The name of the knob.\nvalue - Optional argument. If this is present, the value will be stored \n          into the knob.\ngetType - Optional boolean argument. If True, return the class ID for the \n          knob instead of the knob itself. The class ID is an int.\ngetClass - Optional boolean argument. If True, return the class name for the\n          knob instead of the knob itself. The class name is a string.\n\nReturns: None"
    },
    "nuke.knobChanged()": {
        "prefix": "nuke.knobChanged()",
        "body": "nuke.knobChanged()",
        "description": ""
    },
    "nuke.knobDefault(classknob, value)": {
        "prefix": "nuke.knobDefault(classknob, value)",
        "body": "nuke.knobDefault(${1:classknob}, ${2:value})",
        "description": "Set a default value for knobs in nodes that belong to the same class. \n  All knobs with matching names, that are created after this command was \n  issued, will default to the new value. If class. is missing or is \n  \"*.\" then this default applies to all nodes with such a knob. \n  If several values are supplied, the first value which is valid will be \n  used as the default. knobDefault can be used to specify file format \n  specific knobs. These are knobs that are added to Read, Write and other \n  file format dependent nodes when the file name changes. To specify \n  defaults, use the class name, followed by the file format extension, \n  followed by the knob name, all separated by periods. An example is shown \n  below.\nExample: nuke.knobDefault(\"Blur.size\", \"20\")\nExample: nuke.knobDefault(\"Read.exr.compression\", \n  \"2\")\n\nParameters:\n\nclassknob - String in the form \"class.knob\" where \"class\"\n          is the class of Node, i.e. Blur, and \"knob\" is the name\n          of the knob. This can also include a file extension, as in \n          \"class.extension.knob\"\nvalue - Optional string to convert to the default value.\n\nReturns: str\nNone or String with the default value."
    },
    "nuke.knobTooltip(classknob, value)": {
        "prefix": "nuke.knobTooltip(classknob, value)",
        "body": "nuke.knobTooltip(${1:classknob}, ${2:value})",
        "description": "Set an override for a tooltip on a knob.\n\nExample:\n\n   nuke.knobTooltip('Blur.size', '[some text]')\n\n@param classknob: String in the form \"class.knob\" where \"class\" is the class of Node, i.e. Blur, and \"knob\" is the name of the knob.\n@param value: String to use as the tooltip\n@return: None\n\nReturns: None"
    },
    "nuke.layers(node=None)": {
        "prefix": "nuke.layers(node=None)",
        "body": "nuke.layers(node=${1:None})",
        "description": "Lists the layers in a node. If no node is provided this will list all \n  known layer names in this script.\n\nParameters:\n\nnode - Optional node parameter.\n\nReturns: string list\nA list of layer names."
    },
    "nuke.load(s)": {
        "prefix": "nuke.load(s)",
        "body": "nuke.load(${1:s})",
        "description": "Load a plugin. You can force a certain plugin to load with this \n  function. If the plugin has already been loaded nothing happens. If there\n  is no slash in the name then the pluginPath() is searched for it. If \n  there is a slash then the name is used directly as a filename, if it does\n  not start with a slash the name is relative to the directory containing \n  any plugin being currently loaded. If no filename extension is provided, \n  it will try appending '.so' (or whatever your OS dynamic library \n  extension is) and finding nothing will also try to append '.tcl' and \n  '.py'.\n\nParameters:\n\ns - Plugin name or filename.\n\nReturns: None\nNone\nRaises:\n\nRuntimeError - if the plugin couldn't be loaded for any reason."
    },
    "nuke.loadToolset(filename=None, overwrite=-1)": {
        "prefix": "nuke.loadToolset(filename=None, overwrite=-1)",
        "body": "nuke.loadToolset(filename=${1:None}, overwrite=${2:-1})",
        "description": "Loads the tool preset with the given file name.\n\nParameters:\n\nfilename - name of preset script file to load\n\nReturns: None"
    },
    "nuke.localisationEnabled(knob)": {
        "prefix": "nuke.localisationEnabled(knob)",
        "body": "nuke.localisationEnabled(${1:knob})",
        "description": "\brief Checks if localisation is enabled on a given Read_File_Knob.\n\nParameters:\n\nknob - The Read_File_Knob to check.\n\nReturns: bool\ntrue if enabled, false otherwise"
    },
    "nuke.localiseFiles(readKnobs)": {
        "prefix": "nuke.localiseFiles(readKnobs)",
        "body": "nuke.localiseFiles(${1:readKnobs})",
        "description": "creates localisations of all files pointed to by the given read \n  knobs\n\nParameters:\n\nreadKnobs - List of read knobs.\n\nReturns: None\nNone."
    },
    "nuke.makeGroup(show=True)": {
        "prefix": "nuke.makeGroup(show=True)",
        "body": "nuke.makeGroup(show=${1:True})",
        "description": "Creates a new group containing copies of all the currently selected \n  nodes. Note that this creates duplicates of the selected nodes, rather \n  than moving them.\n\nParameters:\n\nshow - If show is True, the node graph for the new group is shown.\n\nReturns: Group\nThe new Group node."
    },
    "nuke.memory(cmd, value)": {
        "prefix": "nuke.memory(cmd, value)",
        "body": "nuke.memory(${1:cmd}, ${2:value})",
        "description": "Get or set information about memory usage.\n\nThe value parameter is optional and is only used by some of the commands (see below).\n\nThe cmd parameter specifies what memory information to retrieve. It can be one of the following values:\n- info [node-name]                           Return a string describing current memory usage. Can optionally provide it for a specific node.\n- infoxml [format_bytes] [node-name]         Return current memory usage as above, but in XML format. Can optionally provide if bytes should be formatted to be human readable, and also a specific node\n- allocator_info [format_bytes]              Return current allocator usage in XML format. Can optionally provide if bytes should be formatted to be human readable\n- free [size]                                Free as much memory as possible. If a size is specified, if will stop trying to free memory when usage drops below the size.\n- usage                                      Return the amount of memory currently in use.\n- max_usage [size]                           If no size is specified, returns the current size of the memory limit.  If a size is given, then set this size as the memory limit.\n- total_ram                                  Return the total amount of RAM.\n- total_vm                                   Return the total virtual memory.\n- free_count [num]                           Get or set the free count.\n- new_handler_count [num]                    Get or set the new handler count.\n\nReturns: str or int"
    },
    "nuke.menu(name)": {
        "prefix": "nuke.menu(name)",
        "body": "nuke.menu(${1:name})",
        "description": "Find and return the Menu object with the given name. Current valid \n  menus are:\n'Nuke'          the application menu 'Pane'          the UI Panes \n  & Panels menu 'Nodes'         the Nodes toolbar (and Nodegraph right \n  mouse menu) 'Properties'    the Properties panel right mouse menu \n  'Animation'     the knob Animation menu and Curve Editor right mouse menu\n  'Viewer'        the Viewer right mouse menu 'Node Graph'    the Node \n  Graph right mouse menu 'Axis'          functions which appear in menus on\n  all Axis_Knobs.\n\nParameters:\n\nname - The name of the menu to get. Must be one of the values above.\n\nReturns: Menu\nThe menu.\nRaises:\n\nRuntimeError - if Nuke isn't in GUI mode."
    },
    "nuke.message(prompt)": {
        "prefix": "nuke.message(prompt)",
        "body": "nuke.message(${1:prompt})",
        "description": "Show an info dialog box. Pops up an info box (with a 'i' and the text \n  message) and waits for the user to hit the OK button.\n\nParameters:\n\nprompt - Present user with this message.\n\nReturns: None\nNone"
    },
    "nuke.modified(status)": {
        "prefix": "nuke.modified(status)",
        "body": "nuke.modified(${1:status})",
        "description": "Deprecated. Use Root.modified and Root.setModified.\nGet or set the 'modified' flag in a script. Setting the value will \n  turn the indicator in the title bar on/off and will start or stop the \n  autosave timeout.\n\nParameters:\n\nstatus - Optional boolean value. If this is present the status will be set\n          to this value; otherwise it will be retrieved instead.\n\nReturns: True if modified, False otherwise\nTrue if modified, False otherwise."
    },
    "nuke.nodeCopy(s)": {
        "prefix": "nuke.nodeCopy(s)",
        "body": "nuke.nodeCopy(${1:s})",
        "description": "Copy all selected nodes into a file or the clipboard.\n\nParameters:\n\ns - The name of a clipboad to copy into. If s is the string \n          '%clipboard%' this will copy into the operating systems \n          clipboard.\n\nReturns: bool\nTrue if any nodes were selected, False otherwise."
    },
    "nuke.nodeDelete(s)": {
        "prefix": "nuke.nodeDelete(s)",
        "body": "nuke.nodeDelete(${1:s})",
        "description": "Removes all selected nodes from the DAG.\n\nReturns: True if any nodes were deleted, False otherwise\nTrue if any nodes were deleted, False otherwise."
    },
    "nuke.nodePaste(s)": {
        "prefix": "nuke.nodePaste(s)",
        "body": "nuke.nodePaste(${1:s})",
        "description": "Paste nodes from a script file or the clipboard. This function \n  executes the script stored in a file. It is assumed the script is the \n  result of a nodeCopy command. The 's' argument can be '%clipboard%' to \n  paste the operating system's clipboard contents.\n\nParameters:\n\ns - The 's' argument can be '%clipboard%' to paste the operating \n          system's clipboard contents.\n\nReturns: Node\nNode"
    },
    "nuke.nodesSelected()": {
        "prefix": "nuke.nodesSelected()",
        "body": "nuke.nodesSelected()",
        "description": "returns true if any nodes are currently selected\n\nReturns ->\b None"
    },
    "nuke.numvalue(knob, default=infinity)": {
        "prefix": "nuke.numvalue(knob, default=infinity)",
        "body": "nuke.numvalue(${1:knob}, default=${2:infinity})",
        "description": "The numvalue function returns the current value of a knob.\nThis is the same as the value() command except it will always return a\n  number. For enumerations this returns the index into the menu, starting \n  at zero. For checkmarks this returns 0 for false and 1 for true.\n\nParameters:\n\nknob - A knob.\ndefault - Optional default value to return if the knob's value cannot  be \n          converted to a number.\n\nReturns: float\nA numeric value for the knob, or the default value (if any)."
    },
    "nuke.oculaPresent()": {
        "prefix": "nuke.oculaPresent()",
        "body": "nuke.oculaPresent()",
        "description": "Check whether Ocula is present.\n\nReturns: bool\nTrue if Ocula is present, False if not."
    },
    "nuke.ofxAddPluginAliasExclusion(fullOfxEffectName)": {
        "prefix": "nuke.ofxAddPluginAliasExclusion(fullOfxEffectName)",
        "body": "nuke.ofxAddPluginAliasExclusion(${1:fullOfxEffectName})",
        "description": "Adds the ofx effect name to a list of exclusions that will not get tcl\n  aliases automatically created for them. For example, if there is an ofx \n  plugin with a fully qualified name of: \n  'OFXuk.co.thefoundry.noisetools.denoise_v100'. Nuke by default would \n  automatically alias that so that nuke.createNode('Denoise') will create \n  that node type. By calling \n  nuke.ofxAddPluginAliasExclusion('OFXuk.co.thefoundry.noisetools.denoise_v100'),\n  you'd be changing that such that the only way to create a node of that \n  type would be to call \n  nuke.createNode('OFXuk.co.thefoundry.noisetools.denoise_v100') This does \n  not change saving or loading of Nuke scripts with that plugin used in any\n  way.\n\nParameters:\n\nfullOfxEffectName - The fully qualified name of the ofx plugin to add to the \n          exclusion list.\n\nReturns: None\nNone."
    },
    "nuke.ofxMenu()": {
        "prefix": "nuke.ofxMenu()",
        "body": "nuke.ofxMenu()",
        "description": "Find all the OFX plugins (by searching all the directories below \n  $OFX_PLUGIN_PATH, or by reading a cache file stored in $NUKE_TEMP_DIR), \n  then add a menu item for each of them to the main menu.\n\nReturns: bool\nTrue if succeeded, False otherwise."
    },
    "nuke.ofxPluginPath(nuke)": {
        "prefix": "nuke.ofxPluginPath(nuke)",
        "body": "nuke.ofxPluginPath(${1:nuke})",
        "description": "List of all the directories Nuke searched for OFX plugins in.\n\nReturns: String list\nString list"
    },
    "nuke.ofxRemovePluginAliasExclusion(fullOfxEffectName)": {
        "prefix": "nuke.ofxRemovePluginAliasExclusion(fullOfxEffectName)",
        "body": "nuke.ofxRemovePluginAliasExclusion(${1:fullOfxEffectName})",
        "description": "Remove an ofx plugin alias exclusion that was previously added with . \n  Example: \n  nuke.ofxRemovePluginAliasExclusion('OFXuk.co.thefoundry.noisetools.denoise_v100')\n\nParameters:\n\nfullOfxEffectName - The fully qualified name of the ofx plugin to remove from the \n          exclusion list.\n\nReturns: None\nNone."
    },
    "nuke.onCreate()": {
        "prefix": "nuke.onCreate()",
        "body": "nuke.onCreate()",
        "description": ""
    },
    "nuke.onDestroy()": {
        "prefix": "nuke.onDestroy()",
        "body": "nuke.onDestroy()",
        "description": ""
    },
    "nuke.onScriptClose()": {
        "prefix": "nuke.onScriptClose()",
        "body": "nuke.onScriptClose()",
        "description": ""
    },
    "nuke.onScriptLoad()": {
        "prefix": "nuke.onScriptLoad()",
        "body": "nuke.onScriptLoad()",
        "description": ""
    },
    "nuke.onScriptSave()": {
        "prefix": "nuke.onScriptSave()",
        "body": "nuke.onScriptSave()",
        "description": ""
    },
    "nuke.onUserCreate()": {
        "prefix": "nuke.onUserCreate()",
        "body": "nuke.onUserCreate()",
        "description": ""
    },
    "nuke.openPanels()": {
        "prefix": "nuke.openPanels()",
        "body": "nuke.openPanels()",
        "description": "returns a list of Nodes which have panels open.The last item in the \n      list is the currently active Node panel.\n\nReturns ->\b List"
    },
    "nuke.output_redirector(...)": {
        "prefix": "nuke.output_redirector(...)",
        "body": "nuke.output_redirector(${1:...})",
        "description": "Internal to Nuke. Not for public use."
    },
    "nuke.pan()": {
        "prefix": "nuke.pan()",
        "body": "nuke.pan()",
        "description": "Return the pan values of a group's display. This function is \n  deprecated and will be removed in a future version.  You probably want to\n  use nuke.center().\nn = nuke.pan() print n[0] print n[1]\n\nReturns: array with x, then y\nArray of x, y."
    },
    "nuke.pluginAddPath(args, addToSysPath=True)": {
        "prefix": "nuke.pluginAddPath(args, addToSysPath=True)",
        "body": "nuke.pluginAddPath(${1:args}, addToSysPath=${2:True})",
        "description": "Adds all the paths to the beginning of the Nuke plugin path. If the \n  path already exists in the list of plugin paths, it is moved to the \n  start. If this command is executed inside an init.py then the init.py in \n  the path will be executed. It also adds the paths to the sys.path, if \n  addToSysPath is True."
    },
    "nuke.pluginAppendPath(args, addToSysPath=True)": {
        "prefix": "nuke.pluginAppendPath(args, addToSysPath=True)",
        "body": "nuke.pluginAppendPath(${1:args}, addToSysPath=${2:True})",
        "description": "Add a filepath to the end of the Nuke plugin path.  If the path \n  already exists in the list of plugin paths, it will remain at its current\n  position. It also appends the paths to the sys.path, if addToSysPath is \n  True."
    },
    "nuke.pluginExists(name)": {
        "prefix": "nuke.pluginExists(name)",
        "body": "nuke.pluginExists(${1:name})",
        "description": "This function is the same as load(), but only checks for the existence\n  of a plugin rather than loading it. If there is no slash in the name then\n  the pluginPath() is searched for it. If there is a slash then the name is\n  used directly as a filename, if it does not start with a slash the name \n  is relative to the directory containing any plugin being currently \n  loaded. If no filename extension is provided, it will try appending '.so'\n  (or whatever your OS dynamic library extension is) and finding nothing \n  will also try to append '.tcl' and '.py'.\n\nParameters:\n\nname - Plugin name or filename.\n\nReturns: True if found, or False if not\nTrue if found, or False if not."
    },
    "nuke.pluginInstallLocation()": {
        "prefix": "nuke.pluginInstallLocation()",
        "body": "nuke.pluginInstallLocation()",
        "description": "The system-specific locations that Nuke will look in for third-party \n  plugins.\n\nReturns: string list\nList of paths."
    },
    "nuke.pluginPath()": {
        "prefix": "nuke.pluginPath()",
        "body": "nuke.pluginPath()",
        "description": "List all the directories Nuke will search in for plugins.\nThe built-in default is ~/.nuke and the 'plugins' directory from the \n  same location the NUKE executable file is in. Setting the environment \n  variable $NUKE_PATH to a colon-separated list of directories will replace\n  the ~/.nuke with your own set of directories, but the plugins directory \n  is always on the end.\n\nReturns: string list\nList of paths."
    },
    "nuke.plugins(switches=0, *pattern)": {
        "prefix": "nuke.plugins(switches=0, *pattern)",
        "body": "nuke.plugins(switches=${1:0}, ${2:*pattern})",
        "description": "Returns a list of every loaded plugin or every plugin available. By default each plugin is returned as the full pathname of the plugin file.\n\nYou can give a glob-style matching pattern and only the plugins whose filenames (not path) match the pattern will be returned. You can give more than one glob pattern if desired.\n\nYou can also put options before the glob patterns. Currently supported:\n\n  ALL    Return all plugins in each of the plugin_path() directories,\n         rather than only the currently loaded plugins.\n\n  NODIR  Just put the filenames in the list, not the full path. There\n         may be duplicates.\n\nIf you don't specify any switches, the default behaviour is to return a list\nwith the full paths of all loaded plugins.\n\n@param switches: Optional parameter. Bitwise OR of nuke.ALL, nuke.NODIR.\n@param pattern: Zero or more glob patterns.\n@return: List of plugins.\n\nReturns: list of str"
    },
    "nuke.recentFile(index)": {
        "prefix": "nuke.recentFile(index)",
        "body": "nuke.recentFile(${1:index})",
        "description": "Returns a filename from the recent-files list.\n\nParameters:\n\nindex - A position in the recent files list. This must be a non-negative \n          number.\n\nReturns: str\nA file path.\nRaises:\n\nValueError - if the index is negative.\nRuntimeError - if there is no entry in the recent files list for the specified \n        index."
    },
    "nuke.redo()": {
        "prefix": "nuke.redo()",
        "body": "nuke.redo()",
        "description": "Perform the most recent redo.\n\nReturns: None\nNone"
    },
    "nuke.removeAfterBackgroundFrameRender(call, args=(), kwargs={})": {
        "prefix": "nuke.removeAfterBackgroundFrameRender(call, args=(), kwargs={})",
        "body": "nuke.removeAfterBackgroundFrameRender(${1:call}, args=${2:()}, kwargs=${3:{}})",
        "description": "Remove a previously-added callback with the same arguments."
    },
    "nuke.removeAfterBackgroundRender(call, args=(), kwargs={})": {
        "prefix": "nuke.removeAfterBackgroundRender(call, args=(), kwargs={})",
        "body": "nuke.removeAfterBackgroundRender(${1:call}, args=${2:()}, kwargs=${3:{}})",
        "description": "Remove a previously-added callback with the same arguments."
    },
    "nuke.removeAfterFrameRender(call, args=(), kwargs={}, nodeClass='Write')": {
        "prefix": "nuke.removeAfterFrameRender(call, args=(), kwargs={}, nodeClass='Write')",
        "body": "nuke.removeAfterFrameRender(${1:call}, args=${2:()}, kwargs=${3:{}}, nodeClass=${4:'Write'})",
        "description": "Remove a previously-added callback with the same arguments."
    },
    "nuke.removeAfterRender(call, args=(), kwargs={}, nodeClass='Write')": {
        "prefix": "nuke.removeAfterRender(call, args=(), kwargs={}, nodeClass='Write')",
        "body": "nuke.removeAfterRender(${1:call}, args=${2:()}, kwargs=${3:{}}, nodeClass=${4:'Write'})",
        "description": "Remove a previously-added callback with the same arguments."
    },
    "nuke.removeAutoSaveDeleteFilter(filter)": {
        "prefix": "nuke.removeAutoSaveDeleteFilter(filter)",
        "body": "nuke.removeAutoSaveDeleteFilter(${1:filter})",
        "description": "Remove a previously-added callback with the same arguments."
    },
    "nuke.removeAutoSaveFilter(filter)": {
        "prefix": "nuke.removeAutoSaveFilter(filter)",
        "body": "nuke.removeAutoSaveFilter(${1:filter})",
        "description": "Remove a previously-added callback with the same arguments."
    },
    "nuke.removeAutoSaveRestoreFilter(filter)": {
        "prefix": "nuke.removeAutoSaveRestoreFilter(filter)",
        "body": "nuke.removeAutoSaveRestoreFilter(${1:filter})",
        "description": "Remove a previously-added callback with the same arguments."
    },
    "nuke.removeAutolabel(call, args=(), kwargs={}, nodeClass='*')": {
        "prefix": "nuke.removeAutolabel(call, args=(), kwargs={}, nodeClass='*')",
        "body": "nuke.removeAutolabel(${1:call}, args=${2:()}, kwargs=${3:{}}, nodeClass=${4:'*'})",
        "description": "Remove a previously-added callback with the same arguments."
    },
    "nuke.removeBeforeBackgroundRender(call, args=(), kwargs={})": {
        "prefix": "nuke.removeBeforeBackgroundRender(call, args=(), kwargs={})",
        "body": "nuke.removeBeforeBackgroundRender(${1:call}, args=${2:()}, kwargs=${3:{}})",
        "description": "Remove a previously-added callback with the same arguments."
    },
    "nuke.removeBeforeFrameRender(call, args=(), kwargs={}, nodeClass='Write')": {
        "prefix": "nuke.removeBeforeFrameRender(call, args=(), kwargs={}, nodeClass='Write')",
        "body": "nuke.removeBeforeFrameRender(${1:call}, args=${2:()}, kwargs=${3:{}}, nodeClass=${4:'Write'})",
        "description": "Remove a previously-added callback with the same arguments."
    },
    "nuke.removeBeforeRender(call, args=(), kwargs={}, nodeClass='Write')": {
        "prefix": "nuke.removeBeforeRender(call, args=(), kwargs={}, nodeClass='Write')",
        "body": "nuke.removeBeforeRender(${1:call}, args=${2:()}, kwargs=${3:{}}, nodeClass=${4:'Write'})",
        "description": "Remove a previously-added callback with the same arguments."
    },
    "nuke.removeFavoriteDir(name, type)": {
        "prefix": "nuke.removeFavoriteDir(name, type)",
        "body": "nuke.removeFavoriteDir(${1:name}, ${2:type})",
        "description": "Remove a directory path from the favorites list.\n\nParameters:\n\nname - Favourite path entry ('Home', 'Desktop', etc.).\ntype - Optional bitwise OR combination of nuke.IMAGE, nuke.SCRIPT, \n          nuke.FONT or nuke.GEO.\n\nReturns: None\nNone"
    },
    "nuke.removeFilenameFilter(call, args=(), kwargs={}, nodeClass='*')": {
        "prefix": "nuke.removeFilenameFilter(call, args=(), kwargs={}, nodeClass='*')",
        "body": "nuke.removeFilenameFilter(${1:call}, args=${2:()}, kwargs=${3:{}}, nodeClass=${4:'*'})",
        "description": "Remove a previously-added callback with the same arguments."
    },
    "nuke.removeFilenameValidate(call, args=(), kwargs={}, nodeClass='Write')": {
        "prefix": "nuke.removeFilenameValidate(call, args=(), kwargs={}, nodeClass='Write')",
        "body": "nuke.removeFilenameValidate(${1:call}, args=${2:()}, kwargs=${3:{}}, nodeClass=${4:'Write'})",
        "description": "Remove a previously-added callback."
    },
    "nuke.removeKnobChanged(call, args=(), kwargs={}, nodeClass='*', node=None)": {
        "prefix": "nuke.removeKnobChanged(call, args=(), kwargs={}, nodeClass='*', node=None)",
        "body": "nuke.removeKnobChanged(${1:call}, args=${2:()}, kwargs=${3:{}}, nodeClass=${4:'*'}, node=${5:None})",
        "description": "Remove a previously-added callback with the same arguments."
    },
    "nuke.removeOnCreate(call, args=(), kwargs={}, nodeClass='*')": {
        "prefix": "nuke.removeOnCreate(call, args=(), kwargs={}, nodeClass='*')",
        "body": "nuke.removeOnCreate(${1:call}, args=${2:()}, kwargs=${3:{}}, nodeClass=${4:'*'})",
        "description": "Remove a previously-added callback with the same arguments."
    },
    "nuke.removeOnDestroy(call, args=(), kwargs={}, nodeClass='*')": {
        "prefix": "nuke.removeOnDestroy(call, args=(), kwargs={}, nodeClass='*')",
        "body": "nuke.removeOnDestroy(${1:call}, args=${2:()}, kwargs=${3:{}}, nodeClass=${4:'*'})",
        "description": "Remove a previously-added callback with the same arguments."
    },
    "nuke.removeOnScriptClose(call, args=(), kwargs={}, nodeClass='Root')": {
        "prefix": "nuke.removeOnScriptClose(call, args=(), kwargs={}, nodeClass='Root')",
        "body": "nuke.removeOnScriptClose(${1:call}, args=${2:()}, kwargs=${3:{}}, nodeClass=${4:'Root'})",
        "description": "Remove a previously-added callback with the same arguments."
    },
    "nuke.removeOnScriptLoad(call, args=(), kwargs={}, nodeClass='Root')": {
        "prefix": "nuke.removeOnScriptLoad(call, args=(), kwargs={}, nodeClass='Root')",
        "body": "nuke.removeOnScriptLoad(${1:call}, args=${2:()}, kwargs=${3:{}}, nodeClass=${4:'Root'})",
        "description": "Remove a previously-added callback with the same arguments."
    },
    "nuke.removeOnScriptSave(call, args=(), kwargs={}, nodeClass='Root')": {
        "prefix": "nuke.removeOnScriptSave(call, args=(), kwargs={}, nodeClass='Root')",
        "body": "nuke.removeOnScriptSave(${1:call}, args=${2:()}, kwargs=${3:{}}, nodeClass=${4:'Root'})",
        "description": "Remove a previously-added callback with the same arguments."
    },
    "nuke.removeOnUserCreate(call, args=(), kwargs={}, nodeClass='*')": {
        "prefix": "nuke.removeOnUserCreate(call, args=(), kwargs={}, nodeClass='*')",
        "body": "nuke.removeOnUserCreate(${1:call}, args=${2:()}, kwargs=${3:{}}, nodeClass=${4:'*'})",
        "description": "Remove a previously-added callback with the same arguments."
    },
    "nuke.removeUpdateUI(call, args=(), kwargs={}, nodeClass='*')": {
        "prefix": "nuke.removeUpdateUI(call, args=(), kwargs={}, nodeClass='*')",
        "body": "nuke.removeUpdateUI(${1:call}, args=${2:()}, kwargs=${3:{}}, nodeClass=${4:'*'})",
        "description": "Remove a previously-added callback with the same arguments."
    },
    "nuke.render(nameOrNode, start, end, incr, views, continueOnError= False)": {
        "prefix": "nuke.render(nameOrNode, start, end, incr, views, continueOnError= False)",
        "body": "nuke.render(${1:nameOrNode}, ${2:start}, ${3:end}, ${4:incr}, ${5:views}, continueOnError=${6: False})",
        "description": "execute(nameOrNode, frameRangeSet, views, continueOnError = False) \n  -> None.\nExecute the named Write node over the specified frames.\nThere are two variants of this function. The first allows you to \n  specify the frames to write range by giving the start frame number, the \n  end frame number and the frame increment. The second allows you to \n  specify more complicated sets of frames by providing a sequence of \n  FrameRange objects.\nIf Nuke is run with the GUI up, this will pop up a progress meter. If \n  the user hits the cancel button this command will return 'cancelled' \n  error. If Nuke is run from the nuke command line (ie nuke was started \n  with the -t switch) execute() prints a text percentage as it progresses. \n  If the user types ^C it will aborting the execute() and return a \n  'cancelled' error.\n\nParameters:\n\nnameOrNode - A node name or a node object.\nstart - Optional start frame. Default is root.first_frame.\nend - Optional end frame. Default is root.last_frame.\nincr - Optional increment. Default is 1.\nviews - Optional list of views. Default is None, meaning \"all \n          views\".\n\nReturns: None\nNone"
    },
    "nuke.resetPerformanceTimers()": {
        "prefix": "nuke.resetPerformanceTimers()",
        "body": "nuke.resetPerformanceTimers()",
        "description": "Clears the accumulated time on the performance timers.\n\nReturns ->\b None"
    },
    "nuke.restoreWindowLayout(i)": {
        "prefix": "nuke.restoreWindowLayout(i)",
        "body": "nuke.restoreWindowLayout(${1:i})",
        "description": "Restores a saved window layout.\n\nParameters:\n\ni - Layout number\n\nReturns: None\nNone"
    },
    "nuke.root()": {
        "prefix": "nuke.root()",
        "body": "nuke.root()",
        "description": "Get the DAG's root node. Always succeeds.\n\nReturns: node\nThe root node. This will never be None."
    },
    "nuke.runIn(object, cmd)": {
        "prefix": "nuke.runIn(object, cmd)",
        "body": "nuke.runIn(${1:object}, ${2:cmd})",
        "description": "Execute commands with a given node/knob/field as the 'context'. This \n  means that all names are evaluated relative to this object, and commands \n  that modify 'this' node will modify the given one.\n\nParameters:\n\nobject - Name of object.\ncmd - Command to run.\n\nReturns: bool\nTrue if succeeded, False otherwise."
    },
    "nuke.sample(n, c, x, y, dx, dy)": {
        "prefix": "nuke.sample(n, c, x, y, dx, dy)",
        "body": "nuke.sample(${1:n}, ${2:c}, ${3:x}, ${4:y}, ${5:dx}, ${6:dy})",
        "description": "Get pixel values from an image. Deprecated, use Node.sample \n  instead.\nThis requires the image to be calculated, so performance may be very \n  bad if this is placed into an expression in a control panel. Produces a \n  cubic filtered result. Any sizes less than 1, including 0, produce the \n  same filtered result, this is correct based on sampling theory. Note that\n  integers are at the corners of pixels, to center on a pixel add .5 to \n  both coordinates. If the optional dx,dy are not given then the exact \n  value of the square pixel that x,y lands in is returned. This is also \n  called 'impulse filtering'.\n\nParameters:\n\nn - Node.\nc - Channel name.\nx - Centre of the area to sample (X coordinate).\ny - Centre of the area to sample (Y coordinate).\ndx - Optional size of the area to sample (X coordinate).\ndy - Optional size of the area to sample (Y coordinate).\n\nReturns: float\nFloating point value."
    },
    "nuke.saveUserPreset(node, presetName)": {
        "prefix": "nuke.saveUserPreset(node, presetName)",
        "body": "nuke.saveUserPreset(${1:node}, ${2:presetName})",
        "description": "Saves a node's current knob values as a user preset.\n\nParameters:\n\npresetName - Name of the preset to create.\n\nReturns: None\nbool."
    },
    "nuke.saveWindowLayout(i=-1)": {
        "prefix": "nuke.saveWindowLayout(i=-1)",
        "body": "nuke.saveWindowLayout(i=${1:-1})",
        "description": "Saves the current window layout.\n\nParameters:\n\ni - Optional layout index. If this is omitted or set to a negative \n          value, save as the default layout.\n\nReturns: None\nNone."
    },
    "nuke.scriptClear(...)": {
        "prefix": "nuke.scriptClear(...)",
        "body": "nuke.scriptClear(${1:...})",
        "description": "Clears a Nuke script and resets all the root knobs to user defined \n  knob defaults. To reset to compiled in defaults only pass in \n  resetToCompiledDefaults=True."
    },
    "nuke.scriptClose(...)": {
        "prefix": "nuke.scriptClose(...)",
        "body": "nuke.scriptClose(${1:...})",
        "description": "Close the current script or group. Returns True if successful."
    },
    "nuke.scriptExit(...)": {
        "prefix": "nuke.scriptExit(...)",
        "body": "nuke.scriptExit(${1:...})",
        "description": "Exit Nuke."
    },
    "nuke.scriptName()": {
        "prefix": "nuke.scriptName()",
        "body": "nuke.scriptName()",
        "description": "Return the current script's file name\n\nReturns ->\b String"
    },
    "nuke.scriptNew(...)": {
        "prefix": "nuke.scriptNew(...)",
        "body": "nuke.scriptNew(${1:...})",
        "description": "Start a new script. Returns True if successful."
    },
    "nuke.scriptOpen(...)": {
        "prefix": "nuke.scriptOpen(...)",
        "body": "nuke.scriptOpen(${1:...})",
        "description": "Opens a new script containing the contents of the named file."
    },
    "nuke.scriptReadFile(...)": {
        "prefix": "nuke.scriptReadFile(...)",
        "body": "nuke.scriptReadFile(${1:...})",
        "description": "Read nodes from a file."
    },
    "nuke.scriptReadText(...)": {
        "prefix": "nuke.scriptReadText(...)",
        "body": "nuke.scriptReadText(${1:...})",
        "description": "Read nodes from a string."
    },
    "nuke.scriptSave(filename=None)": {
        "prefix": "nuke.scriptSave(filename=None)",
        "body": "nuke.scriptSave(filename=${1:None})",
        "description": "Saves the current script to the current file name. If there is no \n  current file name and Nuke is running in GUI mode, the user is asked for \n  a name using the file chooser.\n\nParameters:\n\nfilename - Save to this file name without changing the script name in the \n          project (use scriptSaveAs() if you want it to change).\n\nReturns: bool\nTrue if the file was saved, otherwise an exception is thrown."
    },
    "nuke.scriptSaveAs(filename=None, overwrite=-1)": {
        "prefix": "nuke.scriptSaveAs(filename=None, overwrite=-1)",
        "body": "nuke.scriptSaveAs(filename=${1:None}, overwrite=${2:-1})",
        "description": "Saves the current script with the given file name if supplied, or (in \n  GUI mode) asks the user for one using the file chooser. If Nuke is not \n  running in GUI mode, you must supply a filename.\n\nParameters:\n\nfilename - Saves the current script with the given file name if  supplied, \n          or (in GUI mode) asks the user for one using the file chooser.\noverwrite - If 1 (true) always overwrite; if 0 (false) never overwrite;  \n          otherwise, in GUI mode ask the user, in terminal do same as \n          False. Default  is -1, meaning 'ask the user'.\n\nReturns: None"
    },
    "nuke.scriptSource(...)": {
        "prefix": "nuke.scriptSource(...)",
        "body": "nuke.scriptSource(${1:...})",
        "description": "Same as scriptReadFile()."
    },
    "nuke.script_directory()": {
        "prefix": "nuke.script_directory()",
        "body": "nuke.script_directory()",
        "description": ""
    },
    "nuke.selectAll()": {
        "prefix": "nuke.selectAll()",
        "body": "nuke.selectAll()",
        "description": "Select all nodes in the DAG.\n\nReturns: None\nNone"
    },
    "nuke.selectConnectedNodes()": {
        "prefix": "nuke.selectConnectedNodes()",
        "body": "nuke.selectConnectedNodes()",
        "description": "Selects all nodes in the tree of the selected node."
    },
    "nuke.selectPattern()": {
        "prefix": "nuke.selectPattern()",
        "body": "nuke.selectPattern()",
        "description": "Selects nodes according to a regular expression matching pattern, \n  entered through an input dialog. The pattern can include wildcards ('?' \n  and '*') as well as regular expressions. The expressions are checked \n  against the node name, label, class, and associated file names.\n\nReturns: None\nNone"
    },
    "nuke.selectSimilar(matchType)": {
        "prefix": "nuke.selectSimilar(matchType)",
        "body": "nuke.selectSimilar(${1:matchType})",
        "description": "Selects nodes that match a node in the current selection based on \n  matchType criteria.\n\nParameters:\n\nmatchType - One of nuke.MATCH_CLASS, nuke.MATCH_LABEL, nuke.MATCH_COLOR.\n\nReturns: None\nNone."
    },
    "nuke.selectedNode()": {
        "prefix": "nuke.selectedNode()",
        "body": "nuke.selectedNode()",
        "description": "Returns the 'node the user is thinking about'. If several nodes are \n  selected, this returns one of them. The one returned will be an 'output' \n  node in that no other selected nodes use that node as an input. If no \n  nodes are selected, then if the last thing typed was a hotkey this \n  returns the node the cursor is pointing at. If none, or the last event \n  was not a hotkey, this produces a 'No node selected' error.\n\nReturns: Node\nNode."
    },
    "nuke.selectedNodes(filter)": {
        "prefix": "nuke.selectedNodes(filter)",
        "body": "nuke.selectedNodes(${1:filter})",
        "description": "Returns a list of all selected nodes in the current group. An attempt \n  is made to return them in 'useful' order where inputs are done before the\n  final node, so commands applied to this list go from top-down.\n\nParameters:\n\nfilter - Optional class of Node. Instructs the algorithm to apply only to \n          a specific class of nodes.\n\nReturns: List\nThe list of selected nodes."
    },
    "nuke.setPreset(nodeClassName, presetName, knobValues)": {
        "prefix": "nuke.setPreset(nodeClassName, presetName, knobValues)",
        "body": "nuke.setPreset(${1:nodeClassName}, ${2:presetName}, ${3:knobValues})",
        "description": "Create a node preset for the given node using the supplied knob \n  values\n\nParameters:\n\nnodeClassName - Name of the node class to create a preset for.\npresetName - Name of the preset to create.\nknobValues - A dictionary containing a set of knob names and preset values.\n\nReturns: None\nbool."
    },
    "nuke.setReadOnlyPresets(readOnly)": {
        "prefix": "nuke.setReadOnlyPresets(readOnly)",
        "body": "nuke.setReadOnlyPresets(${1:readOnly})",
        "description": "Sets whether newly created presets should be added in read-only mode. \n  Read-only presets can be applied to a node, but can't be overwritten or \n  deleted.\n\nReturns: None"
    },
    "nuke.setUserPreset(nodeClassName, presetName, knobValues)": {
        "prefix": "nuke.setUserPreset(nodeClassName, presetName, knobValues)",
        "body": "nuke.setUserPreset(${1:nodeClassName}, ${2:presetName}, ${3:knobValues})",
        "description": "Create a node preset for the given node using the supplied knob \n  values\n\nParameters:\n\nnodeClassName - Name of the node class to create a preset for.\npresetName - Name of the preset to create.\nknobValues - A dictionary containing a set of knob names and preset values.\n\nReturns: None\nbool."
    },
    "nuke.show(n, forceFloat)": {
        "prefix": "nuke.show(n, forceFloat)",
        "body": "nuke.show(${1:n}, ${2:forceFloat})",
        "description": "Opens a window for each named node, as though the user double-clicked \n  on them.  For normal operators this opens the control panel, for viewers \n  it opens the viewer, for groups it opens the control panel.\n\nParameters:\n\nn - Optional node argument. Default is the current node.\nforceFloat - Optional python object. If it evaluates to True it will open the \n          window as a floating panel. Default is False.\n\nReturns: None\nNone"
    },
    "nuke.showBookmarkChooser(n)": {
        "prefix": "nuke.showBookmarkChooser(n)",
        "body": "nuke.showBookmarkChooser(${1:n})",
        "description": "Show bookmark chooser search box.\n\nReturns: None\nNone"
    },
    "nuke.showDag(n)": {
        "prefix": "nuke.showDag(n)",
        "body": "nuke.showDag(${1:n})",
        "description": "Show the tree view of a group node or opens a node control panel.\n\nParameters:\n\nn - Optional Group.\n\nReturns: None\nNone"
    },
    "nuke.showInfo(n)": {
        "prefix": "nuke.showInfo(n)",
        "body": "nuke.showInfo(${1:n})",
        "description": "Returns a long string of debugging information about each node and the\n  operators it is currently managing. You should not rely on its contents \n  or format being the same in different versions of Nuke.\n\nParameters:\n\nn - Optional node argument.\n\nReturns: str\nString."
    },
    "nuke.showSettings()": {
        "prefix": "nuke.showSettings()",
        "body": "nuke.showSettings()",
        "description": "Show the settings of the current group.\n\nReturns: None\nNone"
    },
    "nuke.splayNodes()": {
        "prefix": "nuke.splayNodes()",
        "body": "nuke.splayNodes()",
        "description": "Deprecated. Use Group.splaySelectedNodes.\n\nReturns: None\nNone"
    },
    "nuke.startPerformanceTimers()": {
        "prefix": "nuke.startPerformanceTimers()",
        "body": "nuke.startPerformanceTimers()",
        "description": "Start keeping track of accumulated time on the performance timers, \n      and display the accumulated time in the DAG.\n\nReturns ->\b None"
    },
    "nuke.stderr_redirector(...)": {
        "prefix": "nuke.stderr_redirector(...)",
        "body": "nuke.stderr_redirector(${1:...})",
        "description": "Internal to Nuke. Not for public use."
    },
    "nuke.stopPerformanceTimers()": {
        "prefix": "nuke.stopPerformanceTimers()",
        "body": "nuke.stopPerformanceTimers()",
        "description": "Stop keeping track of accumulated time on the performance timers, and\n      cease displaying the accumulated time in the DAG.\n\nReturns ->\b None"
    },
    "nuke.stripFrameRange(clipname)": {
        "prefix": "nuke.stripFrameRange(clipname)",
        "body": "nuke.stripFrameRange(${1:clipname})",
        "description": "Strip out the frame range from a clipname, leaving a file path (still \n  possibly with variables).\n\nParameters:\n\nclipname - The clipname.\n\nReturns: string\nThe name without the frame range."
    },
    "nuke.tabClose(...)": {
        "prefix": "nuke.tabClose(...)",
        "body": "nuke.tabClose(${1:...})",
        "description": "Close the active dock tab. Returns True if successful."
    },
    "nuke.tabNext(...)": {
        "prefix": "nuke.tabNext(...)",
        "body": "nuke.tabNext(${1:...})",
        "description": "Make the next tab in this dock active. Returns True if successful."
    },
    "nuke.tcl(s, *args)": {
        "prefix": "nuke.tcl(s, *args)",
        "body": "nuke.tcl(${1:s}, ${2:*args})",
        "description": "Run a tcl command. The arguments must be strings and passed to the \n  command. If no arguments are given and the command has whitespace in it \n  then it is instead interpreted as a tcl program (this is deprecated).\n\nParameters:\n\ns - TCL code.\nargs - The arguments to pass in to the TCL code.\n\nReturns: str\nResult of TCL command as string."
    },
    "nuke.thisClass()": {
        "prefix": "nuke.thisClass()",
        "body": "nuke.thisClass()",
        "description": "Get the class name of the current node. This equivalent to calling \n  nuke.thisNode().Class(), only faster.\n\nReturns: None\nThe class name for the current node."
    },
    "nuke.thisGroup()": {
        "prefix": "nuke.thisGroup()",
        "body": "nuke.thisGroup()",
        "description": "Returns the current context Group node.\n\nReturns: Group\nThe group node."
    },
    "nuke.thisKnob()": {
        "prefix": "nuke.thisKnob()",
        "body": "nuke.thisKnob()",
        "description": "Returns the current context knob if any.\n\nReturns: Knob\nKnob or None"
    },
    "nuke.thisNode()": {
        "prefix": "nuke.thisNode()",
        "body": "nuke.thisNode()",
        "description": "Return the current context node.\n\nReturns: Node\nThe node."
    },
    "nuke.thisPane()": {
        "prefix": "nuke.thisPane()",
        "body": "nuke.thisPane()",
        "description": "Returns the active pane. This is only valid during a pane menu \n  callback or window layout restoration.\n\nReturns: the active pane\nThe active pane."
    },
    "nuke.thisParent()": {
        "prefix": "nuke.thisParent()",
        "body": "nuke.thisParent()",
        "description": "Returns the current context Node parent.\n\nReturns: Node\nA node."
    },
    "nuke.thisView()": {
        "prefix": "nuke.thisView()",
        "body": "nuke.thisView()",
        "description": "Get the name of the current view.\n\nReturns: str\nThe current view name as a string."
    },
    "nuke.toNode(s)": {
        "prefix": "nuke.toNode(s)",
        "body": "nuke.toNode(${1:s})",
        "description": "Search for a node in the DAG by name and return it as a Python \n  object.\n\nParameters:\n\ns - Node name.\n\nReturns: Node\nNode or None if it does not exist."
    },
    "nuke.toggleFullscreen()": {
        "prefix": "nuke.toggleFullscreen()",
        "body": "nuke.toggleFullscreen()",
        "description": "Toggles between windowed and fullscreen mode.\n\nReturns: None\nNone"
    },
    "nuke.toggleViewers()": {
        "prefix": "nuke.toggleViewers()",
        "body": "nuke.toggleViewers()",
        "description": "Toggles all the viewers on and off.\n\nReturns: None\nNone"
    },
    "nuke.toolbar(name, create=True)": {
        "prefix": "nuke.toolbar(name, create=True)",
        "body": "nuke.toolbar(${1:name}, create=${2:True})",
        "description": "Find and return the ToolBar object with the given name. The name of \n  the built-in nodes toolbar is 'Nodes'.\nA RuntimeException is thrown if not in GUI mode.\n\nParameters:\n\nname - The name of the toolbar to find or create.\ncreate - Optional parameter. True (the default value) will mean that a new\n          toolbar gets created if one with the given name couldn't be \n          found; False will  mean that no new toolbar will be \n          created.@return: The toolbar, or None if no toolbar was found and\n          'create' was False.\n\nReturns: ToolBar"
    },
    "nuke.tprint(value, sep=' ', end='\\n', file=sys.stdout, ...)": {
        "prefix": "nuke.tprint(value, sep=' ', end='\\n', file=sys.stdout, ...)",
        "body": "nuke.tprint(${1:value}, sep=${2:' '}, end=${3:'\\n'}, file=${4:sys.stdout}, ${5:...})",
        "description": "Prints the values to a stream, or to stdout by default.\n\nParameters:\n\nvalue - A python object\nfile - a file-like object (stream); defaults to stdout.\nsep - string inserted between values, default a space.\nend - string appended after the last value, default a newline.\n\nReturns: None\nNone"
    },
    "nuke.undo()": {
        "prefix": "nuke.undo()",
        "body": "nuke.undo()",
        "description": "Perform the most recent undo.\n\nReturns: None\nNone"
    },
    "nuke.updateUI()": {
        "prefix": "nuke.updateUI()",
        "body": "nuke.updateUI()",
        "description": ""
    },
    "nuke.usingPerformanceTimers()": {
        "prefix": "nuke.usingPerformanceTimers()",
        "body": "nuke.usingPerformanceTimers()",
        "description": "Return true if performance timers are in use.\n\nReturns ->\b True if on, False if off"
    },
    "nuke.validateFilename(filename)": {
        "prefix": "nuke.validateFilename(filename)",
        "body": "nuke.validateFilename(${1:filename})",
        "description": ""
    },
    "nuke.value(knob, default)": {
        "prefix": "nuke.value(knob, default)",
        "body": "nuke.value(${1:knob}, ${2:default})",
        "description": "The value function returns the current value of a knob. The knob \n  argument is a string referring to a knob and default is an optional \n  default value to be returned in case of an error. Unlike knob(), this \n  will evaluate animation at the current frame, and expand brackets and \n  dollar signs in string knobs.\n\nReturns: string"
    },
    "nuke.views()": {
        "prefix": "nuke.views()",
        "body": "nuke.views()",
        "description": "List of all the globally existing views.\n\nReturns: List\nList"
    },
    "nuke.waitForThreadsToFinish()": {
        "prefix": "nuke.waitForThreadsToFinish()",
        "body": "nuke.waitForThreadsToFinish()",
        "description": "Returns true if Nuke should wait for any Python threads to finish \n  before exitting.\n\nReturns: str\nTrue or False."
    },
    "nuke.warning(message)": {
        "prefix": "nuke.warning(message)",
        "body": "nuke.warning(${1:message})",
        "description": "Puts the message into the error console, treating it like a \n  warning.\n\nParameters:\n\nmessage - String parameter.\n\nReturns: None\nNone."
    },
    "nuke.zoom(scale, center, group)": {
        "prefix": "nuke.zoom(scale, center, group)",
        "body": "nuke.zoom(${1:scale}, ${2:center}, ${3:group})",
        "description": "Change the zoom and pan of a group's display. The scale argument is \n  the new zoom factor. If the scale is given, but not the center, the zoom \n  is set to that factor and the view is positioned so the cursor is \n  pointing at the same place it was before zooming. A zero or negative \n  scale value will cause a zoom-to-fit.\nIf both scale and center arguments are given, the view is zoomed and \n  then centered on the specified point.\nThe new scale factor will be returned, or None if the function is run \n  in a non-GUI context.\n\nParameters:\n\nscale - New zoom factor.\ncenter - Optional 2-item tuple specifying the center coordinates.\ngroup - Optional Group. This is ignored at present.\n\nReturns: float\nCurrent zoom factor or None if not in a GUI context."
    },
    "nuke.zoomToFitSelected()": {
        "prefix": "nuke.zoomToFitSelected()",
        "body": "nuke.zoomToFitSelected()",
        "description": "Does a zoom to fit on the selected nodes in the DAG\n\nReturns: None\nNone."
    },
    "nuke.AnimationCurve().addKey( keys)": {
        "prefix": "nuke.AnimationCurve().addKey( keys)",
        "body": "nuke.AnimationCurve().addKey(${1:keys})",
        "description": "Insert a sequence of keys.\n\nParameters:\n\nkeys - Sequence of AnimationKey.\n\nReturns: None\nNone."
    },
    "nuke.AnimationCurve().changeInterpolation( keys, type)": {
        "prefix": "nuke.AnimationCurve().changeInterpolation( keys, type)",
        "body": "nuke.AnimationCurve().changeInterpolation(${1:keys}, ${2:type})",
        "description": "Change interpolation (and extrapolation) type for the keys.\n\nParameters:\n\nkeys - Sequence of keys.\ntype - Interpolation type. One of nuke.HORIZONTAL, nuke.BREAK, \n          nuke.BEFORE_CONST, nuke.BEFORE_LINEAR, nuke.AFTER_CONST or \n          nuke.AFTER_LINEAR.\n\nReturns: None\nNone."
    },
    "nuke.AnimationCurve().clear()": {
        "prefix": "nuke.AnimationCurve().clear()",
        "body": "nuke.AnimationCurve().clear()",
        "description": "Delete all keys.\n\nReturns: None\nNone."
    },
    "nuke.AnimationCurve().constant()": {
        "prefix": "nuke.AnimationCurve().constant()",
        "body": "nuke.AnimationCurve().constant()",
        "description": "Returns: bool\nTrue if the animation appears to be a horizontal line, is a \n          simple number, or it is the default and all the points are at the\n          same y value and have 0 slopes. False otherwise."
    },
    "nuke.AnimationCurve().derivative( t, n)": {
        "prefix": "nuke.AnimationCurve().derivative( t, n)",
        "body": "nuke.AnimationCurve().derivative(${1:t}, ${2:n})",
        "description": "The n'th derivative at time 't'. If n is less than 1 it returns \n  evaluate(t).\n\nParameters:\n\nt - Time.\nn - Optional. Default is 1.\n\nReturns: Float\nThe value of the derivative."
    },
    "nuke.AnimationCurve().evaluate( t)": {
        "prefix": "nuke.AnimationCurve().evaluate( t)",
        "body": "nuke.AnimationCurve().evaluate(${1:t})",
        "description": "Value at time 't'.\n\nParameters:\n\nt - Time.\n\nReturns: float\nThe value of the animation at time 't'."
    },
    "nuke.AnimationCurve().expression()": {
        "prefix": "nuke.AnimationCurve().expression()",
        "body": "nuke.AnimationCurve().expression()",
        "description": "Get the expression.@return: String.\n\nReturns ->\b String"
    },
    "nuke.AnimationCurve().fixSlopes()": {
        "prefix": "nuke.AnimationCurve().fixSlopes()",
        "body": "nuke.AnimationCurve().fixSlopes()",
        "description": "Returns: None\nNone."
    },
    "nuke.AnimationCurve().fromScript( s)": {
        "prefix": "nuke.AnimationCurve().fromScript( s)",
        "body": "nuke.AnimationCurve().fromScript(${1:s})",
        "description": "Parameters:\n\ns - String.\n\nReturns: None\nNone."
    },
    "nuke.AnimationCurve().identity()": {
        "prefix": "nuke.AnimationCurve().identity()",
        "body": "nuke.AnimationCurve().identity()",
        "description": "Returns: bool\nTrue if the animation appears to be such that y == x everywhere. \n          This is True only for an expression of 'x' or the default \n          expression and all points having y == x and slope == 1. \n          Extrapolation is ignored."
    },
    "nuke.AnimationCurve().integrate( t1, t2)": {
        "prefix": "nuke.AnimationCurve().integrate( t1, t2)",
        "body": "nuke.AnimationCurve().integrate(${1:t1}, ${2:t2})",
        "description": "Calculate the area underneath the curve from t1 to t2. @param t1 The \n  start of the integration range. @param t2 The end of the integration \n  range.\n\nReturns: Float\nThe result of the integration."
    },
    "nuke.AnimationCurve().inverse( y)": {
        "prefix": "nuke.AnimationCurve().inverse( y)",
        "body": "nuke.AnimationCurve().inverse(${1:y})",
        "description": "The inverse function at value y. This is the value of x such that \n  evaluate(x) returns y. This is designed to invert color lookup tables. It\n  only works if the derivative is zero or positive everywhere.\n\nParameters:\n\ny - The value of the function to get the inverse for.\n\nReturns: Float\nFloat."
    },
    "nuke.AnimationCurve().keys()": {
        "prefix": "nuke.AnimationCurve().keys()",
        "body": "nuke.AnimationCurve().keys()",
        "description": "Returns: List of keys\nList of keys."
    },
    "nuke.AnimationCurve().knob()": {
        "prefix": "nuke.AnimationCurve().knob()",
        "body": "nuke.AnimationCurve().knob()",
        "description": "Return knob this animation belongs to.@return: Knob.\n\nReturns ->\b Knob"
    },
    "nuke.AnimationCurve().knobAndFieldName()": {
        "prefix": "nuke.AnimationCurve().knobAndFieldName()",
        "body": "nuke.AnimationCurve().knobAndFieldName()",
        "description": "Knob and field name combined (e.g. 'translate.x').\n\nReturns: string\nstring."
    },
    "nuke.AnimationCurve().knobIndex()": {
        "prefix": "nuke.AnimationCurve().knobIndex()",
        "body": "nuke.AnimationCurve().knobIndex()",
        "description": "Return the knob index this animation belongs to.@return: Int.\n\nReturns ->\b Int"
    },
    "nuke.AnimationCurve().noExpression()": {
        "prefix": "nuke.AnimationCurve().noExpression()",
        "body": "nuke.AnimationCurve().noExpression()",
        "description": "Returns: bool\nTrue if the expression is the default expression (i.e. the keys \n          control the curve), False otherwise."
    },
    "nuke.AnimationCurve().removeKey( keys)": {
        "prefix": "nuke.AnimationCurve().removeKey( keys)",
        "body": "nuke.AnimationCurve().removeKey(${1:keys})",
        "description": "Remove some keys from the curve.\n\nParameters:\n\nkeys - The sequence of keys to be removed.\n\nReturns: None\nNone."
    },
    "nuke.AnimationCurve().selected()": {
        "prefix": "nuke.AnimationCurve().selected()",
        "body": "nuke.AnimationCurve().selected()",
        "description": "Returns: bool\nTrue if selected, False otherwise."
    },
    "nuke.AnimationCurve().setExpression( s)": {
        "prefix": "nuke.AnimationCurve().setExpression( s)",
        "body": "nuke.AnimationCurve().setExpression(${1:s})",
        "description": "Set expression.\n\nParameters:\n\ns - A string containing the expression.\n\nReturns: None\nNone."
    },
    "nuke.AnimationCurve().setKey( t, y)": {
        "prefix": "nuke.AnimationCurve().setKey( t, y)",
        "body": "nuke.AnimationCurve().setKey(${1:t}, ${2:y})",
        "description": "Set a key at time t and value y. If there is no key there one is \n  created. If there is a key there it is moved vertically to be at y.  If a\n  new key is inserted the interpolation and extrapolation are copied from a\n  neighboring key, if there were no keys then it is set to nuke.SMOOTH \n  interpolation and nuke.CONSTANT extrapolation.\n\nParameters:\n\nt - The time to set the key at.\ny - The value for the key.\n\nReturns: Key\nThe new key."
    },
    "nuke.AnimationCurve().size()": {
        "prefix": "nuke.AnimationCurve().size()",
        "body": "nuke.AnimationCurve().size()",
        "description": "Returns: Number of keys\nNumber of keys."
    },
    "nuke.AnimationCurve().toScript( selected)": {
        "prefix": "nuke.AnimationCurve().toScript( selected)",
        "body": "nuke.AnimationCurve().toScript(${1:selected})",
        "description": "Parameters:\n\nselected - Optional parameter. If this is given and is True, then only \n          process the selected curves; otherwise convert all.\n\nReturns: str\nA string containing the curves."
    },
    "nuke.AnimationCurve().view()": {
        "prefix": "nuke.AnimationCurve().view()",
        "body": "nuke.AnimationCurve().view()",
        "description": "The view this AnimationCurve object is associated with.\n\nReturns: String\nString."
    },
    "nuke.Array_Knob().animation( chan, view)": {
        "prefix": "nuke.Array_Knob().animation( chan, view)",
        "body": "nuke.Array_Knob().animation(${1:chan}, ${2:view})",
        "description": "Return the AnimationCurve for the  channel 'chan' and view 'view'. The\n  view argument is optional.\n\nParameters:\n\nchannel - The channel index.\nview - Optional view.\n\nReturns: AnimationCurve or None\nAnimationCurve or None."
    },
    "nuke.Array_Knob().animations( view)": {
        "prefix": "nuke.Array_Knob().animations( view)",
        "body": "nuke.Array_Knob().animations(${1:view})",
        "description": "Parameters:\n\nview - Optional view.\n\nReturns: AnimationCurve list\nAnimationCurve list. Example: b = nuke.nodes.Blur() k = b['size']\n          k.setAnimated(0) a = k.animations() a[0].setKey(0, 11) \n          a[0].setKey(10, 20)"
    },
    "nuke.Array_Knob().array()": {
        "prefix": "nuke.Array_Knob().array()",
        "body": "nuke.Array_Knob().array()",
        "description": "Returns: List of knob values\nList of knob values."
    },
    "nuke.Array_Knob().arraySize()": {
        "prefix": "nuke.Array_Knob().arraySize()",
        "body": "nuke.Array_Knob().arraySize()",
        "description": "Returns: Number of elements in array\nNumber of elements in array."
    },
    "nuke.Array_Knob().clearAnimated( index, view)": {
        "prefix": "nuke.Array_Knob().clearAnimated( index, view)",
        "body": "nuke.Array_Knob().clearAnimated(${1:index}, ${2:view})",
        "description": "Delete animation.\n\nParameters:\n\nindex - Optional index.\nview - Optional view.\n\nReturns: True if succeeded, False otherwise\nTrue if succeeded, False otherwise.\nOverrides:\n        Knob.clearAnimated"
    },
    "nuke.Array_Knob().copyAnimation( channel, curve, view)": {
        "prefix": "nuke.Array_Knob().copyAnimation( channel, curve, view)",
        "body": "nuke.Array_Knob().copyAnimation(${1:channel}, ${2:curve}, ${3:view})",
        "description": "Copies the i'th channel of the AnimationCurve curve to this object. \n  The view is optional and defaults to the current view.\n\nParameters:\n\nchannel - The channel index.\ncurve - AnimationCurve.\nview - Optional view. Defaults to current.\n\nReturns: None\nNone."
    },
    "nuke.Array_Knob().copyAnimations( curves, view)": {
        "prefix": "nuke.Array_Knob().copyAnimations( curves, view)",
        "body": "nuke.Array_Knob().copyAnimations(${1:curves}, ${2:view})",
        "description": "Copies the AnimationCurves from curves to this object. The view is \n  optional and defaults to the current view.\n\nParameters:\n\ncurves - AnimationCurve list.\nview - Optional view. Defaults to current.\n\nReturns: None\nNone."
    },
    "nuke.Array_Knob().defaultValue()": {
        "prefix": "nuke.Array_Knob().defaultValue()",
        "body": "nuke.Array_Knob().defaultValue()",
        "description": "Returns: Default value\nDefault value."
    },
    "nuke.Array_Knob().deleteAnimation( curve)": {
        "prefix": "nuke.Array_Knob().deleteAnimation( curve)",
        "body": "nuke.Array_Knob().deleteAnimation(${1:curve})",
        "description": "Raises ValueError if not found. Deletes the AnimationCurve.\n\nParameters:\n\ncurve - An AnimationCurve instance which belongs to this Knob.\n\nReturns: None\nNone. Raises ValueError if not found."
    },
    "nuke.Array_Knob().dimensions()": {
        "prefix": "nuke.Array_Knob().dimensions()",
        "body": "nuke.Array_Knob().dimensions()",
        "description": "Returns: Dimensions in array\nDimensions in array."
    },
    "nuke.Array_Knob().frame()": {
        "prefix": "nuke.Array_Knob().frame()",
        "body": "nuke.Array_Knob().frame()",
        "description": "Returns: Frame number\nFrame number."
    },
    "nuke.Array_Knob().fromScript( s)": {
        "prefix": "nuke.Array_Knob().fromScript( s)",
        "body": "nuke.Array_Knob().fromScript(${1:s})",
        "description": "Set value of the knob to a user defined script (TCL syntax, as in .nk \n  file). Return True if successful.\n\nParameters:\n\ns - Nuke script to be set on knob.\n\nReturns: True if successful, False otherwise\nTrue if successful, False otherwise.\nOverrides:\n        Knob.fromScript"
    },
    "nuke.Array_Knob().getDerivative(...)": {
        "prefix": "nuke.Array_Knob().getDerivative(...)",
        "body": "nuke.Array_Knob().getDerivative(${1:...})",
        "description": "Return derivative at time 't' and index 'i'.\n\nOverrides:\n        Knob.getDerivative"
    },
    "nuke.Array_Knob().getIntegral(...)": {
        "prefix": "nuke.Array_Knob().getIntegral(...)",
        "body": "nuke.Array_Knob().getIntegral(${1:...})",
        "description": "Return integral at time interval [t1, t2] and index 'i'.\n\nOverrides:\n        Knob.getIntegral"
    },
    "nuke.Array_Knob().getKeyIndex(...)": {
        "prefix": "nuke.Array_Knob().getKeyIndex(...)",
        "body": "nuke.Array_Knob().getKeyIndex(${1:...})",
        "description": "Return index of the keyframe at time 't' and channel 'c'.\n\nOverrides:\n        Knob.getKeyIndex"
    },
    "nuke.Array_Knob().getKeyTime(...)": {
        "prefix": "nuke.Array_Knob().getKeyTime(...)",
        "body": "nuke.Array_Knob().getKeyTime(${1:...})",
        "description": "Return time of the keyframe at time 't' and channel 'c'.\n\nOverrides:\n        Knob.getKeyTime"
    },
    "nuke.Array_Knob().getNthDerivative(...)": {
        "prefix": "nuke.Array_Knob().getNthDerivative(...)",
        "body": "nuke.Array_Knob().getNthDerivative(${1:...})",
        "description": "Return n'th derivative at time 't' and index 'i'.\n\nOverrides:\n        Knob.getNthDerivative"
    },
    "nuke.Array_Knob().getNumKeys(...)": {
        "prefix": "nuke.Array_Knob().getNumKeys(...)",
        "body": "nuke.Array_Knob().getNumKeys(${1:...})",
        "description": "Return number of keys at channel 'c'.\n\nOverrides:\n        Knob.getNumKeys"
    },
    "nuke.Array_Knob().getValue( index, view, time)": {
        "prefix": "nuke.Array_Knob().getValue( index, view, time)",
        "body": "nuke.Array_Knob().getValue(${1:index}, ${2:view}, ${3:time})",
        "description": "Return value at the current frame for channel 'c'.\n\nParameters:\n\nindex - Optional index. Default is 0.\nview - Optional view.\ntime - Optional time.\n\nReturns: Floating point or List of floating point values (in case some are \n      different)\nFloating point or List of floating point values (in case some are\n          different).\nOverrides:\n        Knob.getValue"
    },
    "nuke.Array_Knob().getValueAt( time, index, view)": {
        "prefix": "nuke.Array_Knob().getValueAt( time, index, view)",
        "body": "nuke.Array_Knob().getValueAt(${1:time}, ${2:index}, ${3:view})",
        "description": "Return value for this knob at specified time, optional index and \n  view.\n\nParameters:\n\ntime - Time.\nindex - Optional index. Default is 0.\nview - Optional view.\n\nReturns: Floating point or List of floating point values (in case some are \n      different)\nFloating point or List of floating point values (in case some are\n          different).\nOverrides:\n        Knob.getValueAt"
    },
    "nuke.Array_Knob().hasExpression( index)": {
        "prefix": "nuke.Array_Knob().hasExpression( index)",
        "body": "nuke.Array_Knob().hasExpression(${1:index})",
        "description": "Return True if animation at index 'index' has an expression.\n\nParameters:\n\nindex - Optional index.\n\nReturns: True if has expression, False otherwise\nTrue if has expression, False otherwise.\nOverrides:\n        Knob.hasExpression"
    },
    "nuke.Array_Knob().height()": {
        "prefix": "nuke.Array_Knob().height()",
        "body": "nuke.Array_Knob().height()",
        "description": "Returns: Height of array of values\nHeight of array of values."
    },
    "nuke.Array_Knob().isAnimated( index, view)": {
        "prefix": "nuke.Array_Knob().isAnimated( index, view)",
        "body": "nuke.Array_Knob().isAnimated(${1:index}, ${2:view})",
        "description": "Return True if channel 'c' is animated.\n\nParameters:\n\nindex - Optional index.\nview - Optional view.\n\nReturns: True if animated, False otherwise\nTrue if animated, False otherwise.\nOverrides:\n        Knob.isAnimated"
    },
    "nuke.Array_Knob().isKey( index, view)": {
        "prefix": "nuke.Array_Knob().isKey( index, view)",
        "body": "nuke.Array_Knob().isKey(${1:index}, ${2:view})",
        "description": "Return True if there is a keyframe at the current frame for channel \n  'c'.\n\nParameters:\n\nindex - Optional index.\nview - Optional view.\n\nReturns: True if succeeded, False otherwise\nTrue if succeeded, False otherwise.\nOverrides:\n        Knob.isKey"
    },
    "nuke.Array_Knob().isKeyAt( time, index, view)": {
        "prefix": "nuke.Array_Knob().isKeyAt( time, index, view)",
        "body": "nuke.Array_Knob().isKeyAt(${1:time}, ${2:index}, ${3:view})",
        "description": "Returns True if there is a keyframe at specified time, optional index \n  and view, otherwise returns False.\n\nParameters:\n\ntime - Time.\nindex - Optional index.\nview - Optional view.\n\nReturns: True if succeeded, False otherwise\nTrue if succeeded, False otherwise.\nOverrides:\n        Knob.isKeyAt"
    },
    "nuke.Array_Knob().max()": {
        "prefix": "nuke.Array_Knob().max()",
        "body": "nuke.Array_Knob().max()",
        "description": "Returns: Maximum value\nMaximum value."
    },
    "nuke.Array_Knob().maximum()": {
        "prefix": "nuke.Array_Knob().maximum()",
        "body": "nuke.Array_Knob().maximum()",
        "description": "Returns: Maximum value\nMaximum value."
    },
    "nuke.Array_Knob().min()": {
        "prefix": "nuke.Array_Knob().min()",
        "body": "nuke.Array_Knob().min()",
        "description": "Returns: Minimum value\nMinimum value."
    },
    "nuke.Array_Knob().minimum()": {
        "prefix": "nuke.Array_Knob().minimum()",
        "body": "nuke.Array_Knob().minimum()",
        "description": "Returns: Minimum value\nMinimum value."
    },
    "nuke.Array_Knob().notDefault()": {
        "prefix": "nuke.Array_Knob().notDefault()",
        "body": "nuke.Array_Knob().notDefault()",
        "description": "Returns: True if any of the values is not set to the default, False otherwise\nTrue if any of the values is not set to the default, False \n          otherwise."
    },
    "nuke.Array_Knob().removeKey( index, view)": {
        "prefix": "nuke.Array_Knob().removeKey( index, view)",
        "body": "nuke.Array_Knob().removeKey(${1:index}, ${2:view})",
        "description": "Remove key.\n\nParameters:\n\nindex - Optional index.\nview - Optional view.\n\nReturns: True if succeeded, False otherwise\nTrue if succeeded, False otherwise.\nOverrides:\n        Knob.removeKey"
    },
    "nuke.Array_Knob().removeKeyAt( time, index, view)": {
        "prefix": "nuke.Array_Knob().removeKeyAt( time, index, view)",
        "body": "nuke.Array_Knob().removeKeyAt(${1:time}, ${2:index}, ${3:view})",
        "description": "Remove keyframe at specified time, optional index and view. Return \n  True if successful.\n\nParameters:\n\ntime - Time.\nindex - Optional index.\nview - Optional view.\n\nReturns: True if succeeded, False otherwise\nTrue if succeeded, False otherwise.\nOverrides:\n        Knob.removeKeyAt"
    },
    "nuke.Array_Knob().resize( w, h)": {
        "prefix": "nuke.Array_Knob().resize( w, h)",
        "body": "nuke.Array_Knob().resize(${1:w}, ${2:h})",
        "description": "Resize the array.\n\nParameters:\n\nw - New width\nh - Optional new height\n\nReturns: True if successful, False otherwise\nTrue if successful, False otherwise."
    },
    "nuke.Array_Knob().setAnimated( index, view)": {
        "prefix": "nuke.Array_Knob().setAnimated( index, view)",
        "body": "nuke.Array_Knob().setAnimated(${1:index}, ${2:view})",
        "description": "Create an Animation object. Return True if successful, in which case \n  caller must initialise it by calling setValue() or setValueAt().\n\nParameters:\n\nindex - Optional index.\nview - Optional view.\n\nReturns: True if succeeded, False otherwise\nTrue if succeeded, False otherwise.\nOverrides:\n        Knob.setAnimated"
    },
    "nuke.Array_Knob().setDefaultValue( s)": {
        "prefix": "nuke.Array_Knob().setDefaultValue( s)",
        "body": "nuke.Array_Knob().setDefaultValue(${1:s})",
        "description": "Parameters:\n\ns - Sequence of floating-point values.\n\nReturns: None\nNone."
    },
    "nuke.Array_Knob().setExpression( expr, channel=-1, view=None)": {
        "prefix": "nuke.Array_Knob().setExpression( expr, channel=-1, view=None)",
        "body": "nuke.Array_Knob().setExpression(${1:expr}, channel=${2:-1}, view=${3:None})",
        "description": "Set the expression for a knob. You can optionally specify a channel to\n  set the expression for.\n\nParameters:\n\nexpr - The new expression for the knob. This should be a string.\nchannel - Optional parameter, specifying the channel to set the expression \n          for. This should be an integer.\nview - Optional view parameter. Without, this command will set the \n          expression for the current view theinterface is displaying. Can \n          be the name of the view or the index.\n\nReturns: bool\nTrue if successful, False if not.\nOverrides:\n        Knob.setExpression"
    },
    "nuke.Array_Knob().setKeyAt( time, index, view)": {
        "prefix": "nuke.Array_Knob().setKeyAt( time, index, view)",
        "body": "nuke.Array_Knob().setKeyAt(${1:time}, ${2:index}, ${3:view})",
        "description": "Set a key on element 'index', at time and view.\n\nParameters:\n\ntime - Time.\nindex - Optional index.\nview - Optional view.\n\nReturns: None\nNone."
    },
    "nuke.Array_Knob().setRange( f1, f2)": {
        "prefix": "nuke.Array_Knob().setRange( f1, f2)",
        "body": "nuke.Array_Knob().setRange(${1:f1}, ${2:f2})",
        "description": "Set range of values. @param f1 Min value. @param f2 Max value.\n\nReturns: None\nNone."
    },
    "nuke.Array_Knob().setSingleValue( b, view)": {
        "prefix": "nuke.Array_Knob().setSingleValue( b, view)",
        "body": "nuke.Array_Knob().setSingleValue(${1:b}, ${2:view})",
        "description": "Set to just hold a single value or not.\n\nParameters:\n\nb - Boolean object.\nview - Optional view. Default is current view.\n\nReturns: None\nNone."
    },
    "nuke.Array_Knob().setValue( value, index, time, view)": {
        "prefix": "nuke.Array_Knob().setValue( value, index, time, view)",
        "body": "nuke.Array_Knob().setValue(${1:value}, ${2:index}, ${3:time}, ${4:view})",
        "description": "Safe to ignore. Set index to value at time and view.\n\nParameters:\n\nvalue - Floating point value.\nindex - Optional index.\ntime - Optional time.\nview - Optional view.\n\nReturns: True if value changed, False otherwise\nTrue if value changed, False otherwise. Safe to ignore.\nOverrides:\n        Knob.setValue"
    },
    "nuke.Array_Knob().setValueAt( value, time, index, view)": {
        "prefix": "nuke.Array_Knob().setValueAt( value, time, index, view)",
        "body": "nuke.Array_Knob().setValueAt(${1:value}, ${2:time}, ${3:index}, ${4:view})",
        "description": "Set value of element 'index' at time for view. If the knob is \n  animated, it will set a new keyframe or change an existing one. Index and\n  view are optional. Return True if successful.\n\nParameters:\n\nvalue - Floating point value.\ntime - Time.\nindex - Optional index.\nview - Optional view.\n\nReturns: bool\nTrue if value changed, False otherwise. Safe to ignore.\nOverrides:\n        Knob.setValueAt"
    },
    "nuke.Array_Knob().singleValue( view)": {
        "prefix": "nuke.Array_Knob().singleValue( view)",
        "body": "nuke.Array_Knob().singleValue(${1:view})",
        "description": "Parameters:\n\nview - Optional view. Default is current view.\n\nReturns: True if holds a single value\nTrue if holds a single value."
    },
    "nuke.Array_Knob().splitView( view)": {
        "prefix": "nuke.Array_Knob().splitView( view)",
        "body": "nuke.Array_Knob().splitView(${1:view})",
        "description": "Split the view away from the current knob value.\n\nParameters:\n\nview - Optional view. Default is current view.\n\nReturns: None\nNone."
    },
    "nuke.Array_Knob().toScript( quote, context)": {
        "prefix": "nuke.Array_Knob().toScript( quote, context)",
        "body": "nuke.Array_Knob().toScript(${1:quote}, ${2:context})",
        "description": "Return the value of the knob in script syntax.\n\nParameters:\n\nquote - Optional, default is False. Specify True to return the knob value\n          quoted in {}.\ncontext - Optional context, default is current, None will be \n          \"contextless\" (all views, all keys) as in a .nk file.\n\nReturns: String\nString.\nOverrides:\n        Knob.toScript"
    },
    "nuke.Array_Knob().unsplitView( view)": {
        "prefix": "nuke.Array_Knob().unsplitView( view)",
        "body": "nuke.Array_Knob().unsplitView(${1:view})",
        "description": "Unsplit the view so that it shares a value with other views.\n\nParameters:\n\nview - Optional view. Default is current view.\n\nReturns: None\nNone."
    },
    "nuke.Array_Knob().value( index, view, time)": {
        "prefix": "nuke.Array_Knob().value( index, view, time)",
        "body": "nuke.Array_Knob().value(${1:index}, ${2:view}, ${3:time})",
        "description": "Return value at the current frame for channel 'c'.\n\nParameters:\n\nindex - Optional index. Default is 0.\nview - Optional view.\ntime - Optional time.\n\nReturns: Floating point or List of floating point values (in case some are \n      different)\nFloating point or List of floating point values (in case some are\n          different).\nOverrides:\n        Knob.value"
    },
    "nuke.Array_Knob().valueAt( time, index, view)": {
        "prefix": "nuke.Array_Knob().valueAt( time, index, view)",
        "body": "nuke.Array_Knob().valueAt(${1:time}, ${2:index}, ${3:view})",
        "description": "Return value for this knob at specified time, optional index and \n  view.\n\nParameters:\n\ntime - Time.\nindex - Optional index. Default is 0.\nview - Optional view.\n\nReturns: Floating point or List of floating point values (in case some are \n      different)\nFloating point or List of floating point values (in case some are\n          different)."
    },
    "nuke.Array_Knob().vect()": {
        "prefix": "nuke.Array_Knob().vect()",
        "body": "nuke.Array_Knob().vect()",
        "description": "Returns: List of knob values\nList of knob values."
    },
    "nuke.Array_Knob().width()": {
        "prefix": "nuke.Array_Knob().width()",
        "body": "nuke.Array_Knob().width()",
        "description": "Returns: Width of array of values\nWidth of array of values."
    },
    "nuke.Axis_Knob().pivot()": {
        "prefix": "nuke.Axis_Knob().pivot()",
        "body": "nuke.Axis_Knob().pivot()",
        "description": "Return pivot knob.\n\nReturns ->\b XYZ_Knob"
    },
    "nuke.Axis_Knob().rotate()": {
        "prefix": "nuke.Axis_Knob().rotate()",
        "body": "nuke.Axis_Knob().rotate()",
        "description": "Return rotation knob.\n\nReturns ->\b XYZ_Knob"
    },
    "nuke.Axis_Knob().scale()": {
        "prefix": "nuke.Axis_Knob().scale()",
        "body": "nuke.Axis_Knob().scale()",
        "description": "Return scale knob.\n\nReturns ->\b Scale_Knob"
    },
    "nuke.Axis_Knob().skew()": {
        "prefix": "nuke.Axis_Knob().skew()",
        "body": "nuke.Axis_Knob().skew()",
        "description": "Return skew knob.\n\nReturns ->\b XYZ_Knob"
    },
    "nuke.Axis_Knob().translate()": {
        "prefix": "nuke.Axis_Knob().translate()",
        "body": "nuke.Axis_Knob().translate()",
        "description": "Return translation knob.\n\nReturns ->\b XYZ_Knob"
    },
    "nuke.Axis_Knob().uniformScale()": {
        "prefix": "nuke.Axis_Knob().uniformScale()",
        "body": "nuke.Axis_Knob().uniformScale()",
        "description": "Return uniform scale knob.\n\nReturns ->\b Double_Knob"
    },
    "nuke.Axis_Knob().value()": {
        "prefix": "nuke.Axis_Knob().value()",
        "body": "nuke.Axis_Knob().value()",
        "description": "Return the transform matrix formed by combining the input knob values \n  for translate, rotate, scale, skew and pivot.\n\nReturns: _nukemath.Matrix4\nOverrides:\n        Knob.value"
    },
    "nuke.BBox_Knob().fromDict( box)": {
        "prefix": "nuke.BBox_Knob().fromDict( box)",
        "body": "nuke.BBox_Knob().fromDict(${1:box})",
        "description": "Set the bounding box from the given box.\n\nParameters:\n\nbox - Dictionary containing the x, y, r and t keys.\n\nReturns: None\nNone"
    },
    "nuke.BBox_Knob().names(...)": {
        "prefix": "nuke.BBox_Knob().names(...)",
        "body": "nuke.BBox_Knob().names(${1:...})",
        "description": "Return name for dimension 'i'"
    },
    "nuke.BBox_Knob().r(...)": {
        "prefix": "nuke.BBox_Knob().r(...)",
        "body": "nuke.BBox_Knob().r(${1:...})",
        "description": "Return value for R extent."
    },
    "nuke.BBox_Knob().setR(...)": {
        "prefix": "nuke.BBox_Knob().setR(...)",
        "body": "nuke.BBox_Knob().setR(${1:...})",
        "description": "Set value for R extent."
    },
    "nuke.BBox_Knob().setT(...)": {
        "prefix": "nuke.BBox_Knob().setT(...)",
        "body": "nuke.BBox_Knob().setT(${1:...})",
        "description": "Set value for T extent."
    },
    "nuke.BBox_Knob().setX(...)": {
        "prefix": "nuke.BBox_Knob().setX(...)",
        "body": "nuke.BBox_Knob().setX(${1:...})",
        "description": "Set value for X position."
    },
    "nuke.BBox_Knob().setY(...)": {
        "prefix": "nuke.BBox_Knob().setY(...)",
        "body": "nuke.BBox_Knob().setY(${1:...})",
        "description": "Set value for Y position."
    },
    "nuke.BBox_Knob().t(...)": {
        "prefix": "nuke.BBox_Knob().t(...)",
        "body": "nuke.BBox_Knob().t(${1:...})",
        "description": "Return value for T extent."
    },
    "nuke.BBox_Knob().toDict()": {
        "prefix": "nuke.BBox_Knob().toDict()",
        "body": "nuke.BBox_Knob().toDict()",
        "description": "Returns the bounding box as a dict with x, y, r, and t keys.\n\nReturns: dict\ndict with x, y, r and t keys"
    },
    "nuke.BBox_Knob().value( index, view, time)": {
        "prefix": "nuke.BBox_Knob().value( index, view, time)",
        "body": "nuke.BBox_Knob().value(${1:index}, ${2:view}, ${3:time})",
        "description": "Return value for dimension 'i'\n\nParameters:\n\nindex - Optional index. Default is 0.\nview - Optional view.\ntime - Optional time.\n\nReturns: Floating point or List of floating point values (in case some are \n      different)\nFloating point or List of floating point values (in case some are\n          different).\nOverrides:\n        Knob.value"
    },
    "nuke.BBox_Knob().x(...)": {
        "prefix": "nuke.BBox_Knob().x(...)",
        "body": "nuke.BBox_Knob().x(${1:...})",
        "description": "Return value for X position."
    },
    "nuke.BBox_Knob().y(...)": {
        "prefix": "nuke.BBox_Knob().y(...)",
        "body": "nuke.BBox_Knob().y(${1:...})",
        "description": "Return value for Y position."
    },
    "nuke.BackdropNode().selectNodes( selectNodes)": {
        "prefix": "nuke.BackdropNode().selectNodes( selectNodes)",
        "body": "nuke.BackdropNode().selectNodes(${1:selectNodes})",
        "description": "Select or deselect all nodes in backdrop node Example: backdrop = \n  nuke.toNode(\"BackdropNode1\") backdrop.selectNodes(True)\n\nReturns: None\nNone."
    },
    "nuke.Boolean_Knob().setValue( b)": {
        "prefix": "nuke.Boolean_Knob().setValue( b)",
        "body": "nuke.Boolean_Knob().setValue(${1:b})",
        "description": "Set the boolean value of this knob.\n\nParameters:\n\nb - Boolean convertible object.\n\nReturns: bool\nTrue if modified, False otherwise.\nOverrides:\n        Knob.setValue"
    },
    "nuke.Boolean_Knob().value()": {
        "prefix": "nuke.Boolean_Knob().value()",
        "body": "nuke.Boolean_Knob().value()",
        "description": "Get the boolean value for this knob.\n\nParameters:\n\nindex - Optional index. Default is 0.\nview - Optional view.\ntime - Optional time.\n\nReturns: bool\nTrue or False.\nOverrides:\n        Knob.value"
    },
    "nuke.Box().centerX()": {
        "prefix": "nuke.Box().centerX()",
        "body": "nuke.Box().centerX()",
        "description": "Return center in X.\n\nReturns ->\b float"
    },
    "nuke.Box().centerY()": {
        "prefix": "nuke.Box().centerY()",
        "body": "nuke.Box().centerY()",
        "description": "Return height in Y.\n\nReturns ->\b float"
    },
    "nuke.Box().clampX( x)": {
        "prefix": "nuke.Box().clampX( x)",
        "body": "nuke.Box().clampX(${1:x})",
        "description": "Return x restricted to pointing at a pixel in the box.\n\nReturns ->\b int"
    },
    "nuke.Box().clampY( y)": {
        "prefix": "nuke.Box().clampY( y)",
        "body": "nuke.Box().clampY(${1:y})",
        "description": "Return y restricted to pointing at a pixel in the box.\n\nReturns ->\b int"
    },
    "nuke.Box().clear()": {
        "prefix": "nuke.Box().clear()",
        "body": "nuke.Box().clear()",
        "description": "Set to is_constant().\n\nReturns ->\b None"
    },
    "nuke.Box().h()": {
        "prefix": "nuke.Box().h()",
        "body": "nuke.Box().h()",
        "description": "Return height.\n\nReturns ->\b int"
    },
    "nuke.Box().intersect( x, y, r, t)": {
        "prefix": "nuke.Box().intersect( x, y, r, t)",
        "body": "nuke.Box().intersect(${1:x}, ${2:y}, ${3:r}, ${4:t})",
        "description": "Intersect with the given edges.\n\nReturns ->\b None"
    },
    "nuke.Box().isConstant()": {
        "prefix": "nuke.Box().isConstant()",
        "body": "nuke.Box().isConstant()",
        "description": "Returns ->\b True if box is 1x1 in both directions, False otherwise."
    },
    "nuke.Box().merge( x, y, r, t)": {
        "prefix": "nuke.Box().merge( x, y, r, t)",
        "body": "nuke.Box().merge(${1:x}, ${2:y}, ${3:r}, ${4:t})",
        "description": "Merge with the given edges.\n\nReturns ->\b None"
    },
    "nuke.Box().move( dx, dy)": {
        "prefix": "nuke.Box().move( dx, dy)",
        "body": "nuke.Box().move(${1:dx}, ${2:dy})",
        "description": "Move all the sides and thus the entire box by the given deltas.\n\nReturns ->\b None"
    },
    "nuke.Box().pad( dx, dy, dr, dt)": {
        "prefix": "nuke.Box().pad( dx, dy, dr, dt)",
        "body": "nuke.Box().pad(${1:dx}, ${2:dy}, ${3:dr}, ${4:dt})",
        "description": "Move all the sides and thus the entire box by the given deltas.\n\nReturns ->\b None"
    },
    "nuke.Box().r()": {
        "prefix": "nuke.Box().r()",
        "body": "nuke.Box().r()",
        "description": "Return the right edge of the box.\n\nReturns ->\b int"
    },
    "nuke.Box().set( x, y, r, t)": {
        "prefix": "nuke.Box().set( x, y, r, t)",
        "body": "nuke.Box().set(${1:x}, ${2:y}, ${3:r}, ${4:t})",
        "description": "Set all values at once.\n\nReturns ->\b None"
    },
    "nuke.Box().setH( n)": {
        "prefix": "nuke.Box().setH( n)",
        "body": "nuke.Box().setH(${1:n})",
        "description": "Set height by moving top edge.\n\nReturns ->\b None"
    },
    "nuke.Box().setR( n)": {
        "prefix": "nuke.Box().setR( n)",
        "body": "nuke.Box().setR(${1:n})",
        "description": "Set the right edge. The parameter n is an integer.\n\nReturns: None"
    },
    "nuke.Box().setT( n)": {
        "prefix": "nuke.Box().setT( n)",
        "body": "nuke.Box().setT(${1:n})",
        "description": "Set top edge.\n\nReturns ->\b None"
    },
    "nuke.Box().setW( n)": {
        "prefix": "nuke.Box().setW( n)",
        "body": "nuke.Box().setW(${1:n})",
        "description": "Set width by moving right edge.\n\nReturns ->\b None"
    },
    "nuke.Box().setX( n)": {
        "prefix": "nuke.Box().setX( n)",
        "body": "nuke.Box().setX(${1:n})",
        "description": "Set the left edge. The parameter n is an integer.\n\nReturns: None"
    },
    "nuke.Box().setY( n)": {
        "prefix": "nuke.Box().setY( n)",
        "body": "nuke.Box().setY(${1:n})",
        "description": "Set the bottom edge. The parameter n is an integer.\n\nReturns: None"
    },
    "nuke.Box().t()": {
        "prefix": "nuke.Box().t()",
        "body": "nuke.Box().t()",
        "description": "Return top edge.\n\nReturns ->\b int"
    },
    "nuke.Box().w()": {
        "prefix": "nuke.Box().w()",
        "body": "nuke.Box().w()",
        "description": "Return width.\n\nReturns ->\b int"
    },
    "nuke.Box().x()": {
        "prefix": "nuke.Box().x()",
        "body": "nuke.Box().x()",
        "description": "The left edge of the box.\n\nReturns ->\b int"
    },
    "nuke.Box().y()": {
        "prefix": "nuke.Box().y()",
        "body": "nuke.Box().y()",
        "description": "Return the bottom edge.\n\nReturns ->\b int"
    },
    "nuke.Box3_Knob().f(...)": {
        "prefix": "nuke.Box3_Knob().f(...)",
        "body": "nuke.Box3_Knob().f(${1:...})",
        "description": "Return value for F extent. F (far) is the maximum Z extent of the \n  box."
    },
    "nuke.Box3_Knob().n(...)": {
        "prefix": "nuke.Box3_Knob().n(...)",
        "body": "nuke.Box3_Knob().n(${1:...})",
        "description": "Return value for N position. N (near) is the minimum Z extent of the \n  box."
    },
    "nuke.Box3_Knob().names(...)": {
        "prefix": "nuke.Box3_Knob().names(...)",
        "body": "nuke.Box3_Knob().names(${1:...})",
        "description": "Return name for dimension 'i'"
    },
    "nuke.Box3_Knob().r(...)": {
        "prefix": "nuke.Box3_Knob().r(...)",
        "body": "nuke.Box3_Knob().r(${1:...})",
        "description": "Return value for R extent. R (right) is the right extent of the \n  box."
    },
    "nuke.Box3_Knob().setF(...)": {
        "prefix": "nuke.Box3_Knob().setF(...)",
        "body": "nuke.Box3_Knob().setF(${1:...})",
        "description": "Set value for F extent. F (far) is the maximum Z extent of the \n  box."
    },
    "nuke.Box3_Knob().setN(...)": {
        "prefix": "nuke.Box3_Knob().setN(...)",
        "body": "nuke.Box3_Knob().setN(${1:...})",
        "description": "Set value for N position. N (near) is the minimum Z extent of the \n  box."
    },
    "nuke.Box3_Knob().setR(...)": {
        "prefix": "nuke.Box3_Knob().setR(...)",
        "body": "nuke.Box3_Knob().setR(${1:...})",
        "description": "Set value for R extent. R (right) is the right extent of the box."
    },
    "nuke.Box3_Knob().setT(...)": {
        "prefix": "nuke.Box3_Knob().setT(...)",
        "body": "nuke.Box3_Knob().setT(${1:...})",
        "description": "Set value for T extent. T (top) is the maximum vertical extent of the \n  box."
    },
    "nuke.Box3_Knob().setX(...)": {
        "prefix": "nuke.Box3_Knob().setX(...)",
        "body": "nuke.Box3_Knob().setX(${1:...})",
        "description": "Set value for X position. X is the minimum horizontal extent of the \n  box."
    },
    "nuke.Box3_Knob().setY(...)": {
        "prefix": "nuke.Box3_Knob().setY(...)",
        "body": "nuke.Box3_Knob().setY(${1:...})",
        "description": "Set value for Y position. Y is the minimum vertical extent of the \n  box."
    },
    "nuke.Box3_Knob().t(...)": {
        "prefix": "nuke.Box3_Knob().t(...)",
        "body": "nuke.Box3_Knob().t(${1:...})",
        "description": "Return value for T extent. T (top) is the maximum vertical extent of \n  the box."
    },
    "nuke.Box3_Knob().value( index, view, time)": {
        "prefix": "nuke.Box3_Knob().value( index, view, time)",
        "body": "nuke.Box3_Knob().value(${1:index}, ${2:view}, ${3:time})",
        "description": "Return value for dimension 'i'\n\nParameters:\n\nindex - Optional index. Default is 0.\nview - Optional view.\ntime - Optional time.\n\nReturns: Floating point or List of floating point values (in case some are \n      different)\nFloating point or List of floating point values (in case some are\n          different).\nOverrides:\n        Knob.value"
    },
    "nuke.Box3_Knob().x(...)": {
        "prefix": "nuke.Box3_Knob().x(...)",
        "body": "nuke.Box3_Knob().x(${1:...})",
        "description": "Return value for X position. X is the minimum horizontal extent of the\n  box."
    },
    "nuke.Box3_Knob().y(...)": {
        "prefix": "nuke.Box3_Knob().y(...)",
        "body": "nuke.Box3_Knob().y(${1:...})",
        "description": "Return value for Y position. Y is the minimum vertical extent of the \n  box."
    },
    "nuke.Channel_Knob().channelSelector()": {
        "prefix": "nuke.Channel_Knob().channelSelector()",
        "body": "nuke.Channel_Knob().channelSelector()",
        "description": "Returns ->\b bool"
    },
    "nuke.Channel_Knob().checkMarks()": {
        "prefix": "nuke.Channel_Knob().checkMarks()",
        "body": "nuke.Channel_Knob().checkMarks()",
        "description": "Returns ->\b bool"
    },
    "nuke.Channel_Knob().depth()": {
        "prefix": "nuke.Channel_Knob().depth()",
        "body": "nuke.Channel_Knob().depth()",
        "description": "Get the channel depth.\n\nReturns: int\nThe depth of the channel as an int."
    },
    "nuke.Channel_Knob().enableChannel( name, b)": {
        "prefix": "nuke.Channel_Knob().enableChannel( name, b)",
        "body": "nuke.Channel_Knob().enableChannel(${1:name}, ${2:b})",
        "description": "Enable or disable a channel.\n\nParameters:\n\nname - The name of the channel.\nb - True to enable the channel, False to disable it.\n\nReturns: None\nNone"
    },
    "nuke.Channel_Knob().inputKnob()": {
        "prefix": "nuke.Channel_Knob().inputKnob()",
        "body": "nuke.Channel_Knob().inputKnob()",
        "description": "Returns ->\b bool"
    },
    "nuke.Channel_Knob().inputNumber()": {
        "prefix": "nuke.Channel_Knob().inputNumber()",
        "body": "nuke.Channel_Knob().inputNumber()",
        "description": "Returns ->\b int"
    },
    "nuke.Channel_Knob().isChannelEnabled( name)": {
        "prefix": "nuke.Channel_Knob().isChannelEnabled( name)",
        "body": "nuke.Channel_Knob().isChannelEnabled(${1:name})",
        "description": "Test if a channel is enabled.\n\nParameters:\n\nname - The name of the channel.@return: True if the channel is enabled, \n          False otherwise.\n\nReturns: bool"
    },
    "nuke.Channel_Knob().layerSelector()": {
        "prefix": "nuke.Channel_Knob().layerSelector()",
        "body": "nuke.Channel_Knob().layerSelector()",
        "description": "Returns ->\b bool"
    },
    "nuke.Channel_Knob().setEnable( name)": {
        "prefix": "nuke.Channel_Knob().setEnable( name)",
        "body": "nuke.Channel_Knob().setEnable(${1:name})",
        "description": "Enable a channel.\n\nParameters:\n\nname - The name of the channel to enable.\n\nReturns: None\nNone"
    },
    "nuke.Channel_Knob().setInput( num)": {
        "prefix": "nuke.Channel_Knob().setInput( num)",
        "body": "nuke.Channel_Knob().setInput(${1:num})",
        "description": "Set the input number for this knob.@param num: The number of the new \n  input.\n\nReturns: None\nNone"
    },
    "nuke.Channel_Knob().setValue( name)": {
        "prefix": "nuke.Channel_Knob().setValue( name)",
        "body": "nuke.Channel_Knob().setValue(${1:name})",
        "description": "Set the selected channel using the channel name.\n\nParameters:\n\nname - The name of the new channel as a string.\n\nReturns: None\nNone @raise ValueError exception if the channel doesn't exist.\nOverrides:\n        Knob.setValue"
    },
    "nuke.Channel_Knob().value()": {
        "prefix": "nuke.Channel_Knob().value()",
        "body": "nuke.Channel_Knob().value()",
        "description": "Get the name of the selected channel.\n\nReturns: str\nThe name of the channel as a string.\nOverrides:\n        Knob.value"
    },
    "nuke.Color_Knob().inputNumber()": {
        "prefix": "nuke.Color_Knob().inputNumber()",
        "body": "nuke.Color_Knob().inputNumber()",
        "description": "Return input number.\n\nReturns ->\b int"
    },
    "nuke.Color_Knob().names(n)": {
        "prefix": "nuke.Color_Knob().names(n)",
        "body": "nuke.Color_Knob().names(${1:n})",
        "description": "Return name for dimension n. The argument n is an integer.\n\nReturns: string"
    },
    "nuke.Enumeration_Knob().enumName( n)": {
        "prefix": "nuke.Enumeration_Knob().enumName( n)",
        "body": "nuke.Enumeration_Knob().enumName(${1:n})",
        "description": "Return name of enumeration n. The argument n is an integer and in the \n  range of 0 and numValues. Deprecated.\n\nReturns: string"
    },
    "nuke.Enumeration_Knob().numValues()": {
        "prefix": "nuke.Enumeration_Knob().numValues()",
        "body": "nuke.Enumeration_Knob().numValues()",
        "description": "Return number of values. Deprecated.\n\nReturns: int"
    },
    "nuke.Enumeration_Knob().setValue( item)": {
        "prefix": "nuke.Enumeration_Knob().setValue( item)",
        "body": "nuke.Enumeration_Knob().setValue(${1:item})",
        "description": "Set the current value. If item is of an Integer type it will treat it \n  as an index to the enum, otherwise as a value.\n\nParameters:\n\nitem - String or Integer.\n\nReturns: None\nNone. Example: w = nuke.nodes.Write() k = w['file_type'] \n          k.setValue('exr')\nOverrides:\n        Knob.setValue"
    },
    "nuke.Enumeration_Knob().setValues( items)": {
        "prefix": "nuke.Enumeration_Knob().setValues( items)",
        "body": "nuke.Enumeration_Knob().setValues(${1:items})",
        "description": "(Re)initialise knob to the supplied list of items.\n\nParameters:\n\nitems - The new list of values.\n\nReturns: None\nNone. Example: w = nuke.nodes.Write() k = w['file_type'] \n          k.setValues(['exr'])"
    },
    "nuke.Enumeration_Knob().value()": {
        "prefix": "nuke.Enumeration_Knob().value()",
        "body": "nuke.Enumeration_Knob().value()",
        "description": "Current value.\n\nParameters:\n\nindex - Optional index. Default is 0.\nview - Optional view.\ntime - Optional time.\n\nReturns: String\nString. Example: w = nuke.nodes.Write() k = w['file_type'] \n          k.value()\nOverrides:\n        Knob.value"
    },
    "nuke.Enumeration_Knob().values()": {
        "prefix": "nuke.Enumeration_Knob().values()",
        "body": "nuke.Enumeration_Knob().values()",
        "description": "Return list of items.\n\nReturns: List of strings\nList of strings. Example: w = nuke.nodes.Write() k = \n          w['file_type'] k.values()"
    },
    "nuke.EvalString_Knob().evaluate()": {
        "prefix": "nuke.EvalString_Knob().evaluate()",
        "body": "nuke.EvalString_Knob().evaluate()",
        "description": "Evaluate the string, performing substitutions.\n\nReturns: String\nString."
    },
    "nuke.File_Knob().fromScript( s)": {
        "prefix": "nuke.File_Knob().fromScript( s)",
        "body": "nuke.File_Knob().fromScript(${1:s})",
        "description": "Assign string to knob.\n\nParameters:\n\ns - String to assign.\n\nReturns: None\nNone.\nOverrides:\n        Knob.fromScript"
    },
    "nuke.File_Knob().fromUserText( s)": {
        "prefix": "nuke.File_Knob().fromUserText( s)",
        "body": "nuke.File_Knob().fromUserText(${1:s})",
        "description": "Assign string to knob, parses frame range off the end and opens file \n  to get set the format.\n\nParameters:\n\ns - String to assign.\n\nReturns: None\nNone."
    },
    "nuke.File_Knob().getEvaluatedValue( oc)": {
        "prefix": "nuke.File_Knob().getEvaluatedValue( oc)",
        "body": "nuke.File_Knob().getEvaluatedValue(${1:oc})",
        "description": "Returns the string on this knob, will be normalized to technical \n  notation if sequence (%4d). Will also evaluate the string for any tcl \n  expressions\n\nReturns: String\nString."
    },
    "nuke.File_Knob().getValue()": {
        "prefix": "nuke.File_Knob().getValue()",
        "body": "nuke.File_Knob().getValue()",
        "description": "Returns the string on this knob, will be normalized to technical \n  notation if sequence (%4d).\n\nParameters:\n\noc - Optional parameter specifying the output context.\n\nReturns: String\nString.\nOverrides:\n        Knob.getValue"
    },
    "nuke.File_Knob().setValue( s)": {
        "prefix": "nuke.File_Knob().setValue( s)",
        "body": "nuke.File_Knob().setValue(${1:s})",
        "description": "Assign string to knob.\n\nParameters:\n\ns - String to assign.\n\nReturns: None\nNone.\nOverrides:\n        Knob.setValue"
    },
    "nuke.File_Knob().value()": {
        "prefix": "nuke.File_Knob().value()",
        "body": "nuke.File_Knob().value()",
        "description": "Returns the string on this knob, will be normalized to technical \n  notation if sequence (%4d).\n\nParameters:\n\noc - Optional parameter specifying the output context.\n\nReturns: String\nString.\nOverrides:\n        Knob.value"
    },
    "nuke.Font_Knob().setValue( val, chan)": {
        "prefix": "nuke.Font_Knob().setValue( val, chan)",
        "body": "nuke.Font_Knob().setValue(${1:val}, ${2:chan})",
        "description": "Sets the value 'val' at channel 'chan'.\n\nReturns: bool\nTrue if successful, False if not.\nOverrides:\n        Knob.setValue\n(inherited documentation)"
    },
    "nuke.Font_Knob().value(...)": {
        "prefix": "nuke.Font_Knob().value(...)",
        "body": "nuke.Font_Knob().value(${1:...})",
        "description": "Return value at the current frame for channel 'c'.\n\nOverrides:\n        Knob.value\n(inherited documentation)"
    },
    "nuke.Format().add( name)": {
        "prefix": "nuke.Format().add( name)",
        "body": "nuke.Format().add(${1:name})",
        "description": "Add this instance to a list of \"named\" formats. The name \n  parameter is the name of the list to add the format to.\n\nReturns: None"
    },
    "nuke.Format().fromUV( u, v)": {
        "prefix": "nuke.Format().fromUV( u, v)",
        "body": "nuke.Format().fromUV(${1:u}, ${2:v})",
        "description": "Transform a UV coordinate in the range 0-1 into the format's XY range.\n  Returns a list containing the x and y coordinates.\n\nParameters:\n\nu - The U coordinate.\nv - The V coordinate.\n\nReturns: [x, y]\n[x, y]"
    },
    "nuke.Format().height()": {
        "prefix": "nuke.Format().height()",
        "body": "nuke.Format().height()",
        "description": "Return the height of image file in pixels.\n\nReturns ->\b int"
    },
    "nuke.Format().name()": {
        "prefix": "nuke.Format().name()",
        "body": "nuke.Format().name()",
        "description": "Returns the user-visible name of the format.\n\nReturns ->\b string"
    },
    "nuke.Format().pixelAspect()": {
        "prefix": "nuke.Format().pixelAspect()",
        "body": "nuke.Format().pixelAspect()",
        "description": "Returns the pixel aspect ratio (pixel width divided by pixel height) \n      for this format.\n\nReturns ->\b float"
    },
    "nuke.Format().r()": {
        "prefix": "nuke.Format().r()",
        "body": "nuke.Format().r()",
        "description": "Return the right edge of image file in pixels.\n\nReturns ->\b int"
    },
    "nuke.Format().scaled(sx, sy, tx, ty)": {
        "prefix": "nuke.Format().scaled(sx, sy, tx, ty)",
        "body": "nuke.Format().scaled(${1:sx}, ${2:sy}, ${3:tx}, ${4:ty})",
        "description": "Scale and translate this format by sx, sy, tx and ty.\n\nParameters:\n\nsx - Scale factor in X.@param sy: Scale factor in Y.@param tx: Offset \n          factor in X.@param ty: Offset factor in Y.@return: Format.\n\nReturns: Format"
    },
    "nuke.Format().setHeight( newHeight)": {
        "prefix": "nuke.Format().setHeight( newHeight)",
        "body": "nuke.Format().setHeight(${1:newHeight})",
        "description": "Set the height of image file in pixels. newHeight is the new height \n  for the image; it should be a positive integer.\n\nReturns: None"
    },
    "nuke.Format().setName( name)": {
        "prefix": "nuke.Format().setName( name)",
        "body": "nuke.Format().setName(${1:name})",
        "description": "Set name of this format. The name parameter is the new name for the \n  format.\n\nReturns: None"
    },
    "nuke.Format().setPixelAspect( aspectRatio)": {
        "prefix": "nuke.Format().setPixelAspect( aspectRatio)",
        "body": "nuke.Format().setPixelAspect(${1:aspectRatio})",
        "description": "Set a new pixel aspect ratio for this format. The aspectRatio \n  parameter is the new ratio, found by dividing the desired pixel width by \n  the desired pixel height.\n\nReturns: None"
    },
    "nuke.Format().setR( newR)": {
        "prefix": "nuke.Format().setR( newR)",
        "body": "nuke.Format().setR(${1:newR})",
        "description": "Set the right edge of image file in pixels. newR is the new right edge\n  for the image; it should be a positive integer.\n\nReturns: None"
    },
    "nuke.Format().setT( newT)": {
        "prefix": "nuke.Format().setT( newT)",
        "body": "nuke.Format().setT(${1:newT})",
        "description": "Set the top edge of image file in pixels. newY is the new top edge for\n  the image; it should be a positive integer.\n\nReturns: None"
    },
    "nuke.Format().setWidth( newWidth)": {
        "prefix": "nuke.Format().setWidth( newWidth)",
        "body": "nuke.Format().setWidth(${1:newWidth})",
        "description": "Set the width of image file in pixels.newWidth is the new width for \n      the image; it should be a positive integer.\n\nReturns ->\b None"
    },
    "nuke.Format().setX( newX)": {
        "prefix": "nuke.Format().setX( newX)",
        "body": "nuke.Format().setX(${1:newX})",
        "description": "Set the left edge of image file in pixels. newX is the new left edge \n  for the  image; it should be a positive integer.\n\nReturns: None"
    },
    "nuke.Format().setY( newY)": {
        "prefix": "nuke.Format().setY( newY)",
        "body": "nuke.Format().setY(${1:newY})",
        "description": "Set the bottom edge of image file in pixels. newY is the new bottom \n  edge for the image; it should be a positive integer.\n\nReturns: None"
    },
    "nuke.Format().t()": {
        "prefix": "nuke.Format().t()",
        "body": "nuke.Format().t()",
        "description": "Return the top edge of image file in pixels.\n\nReturns ->\b int"
    },
    "nuke.Format().toUV( x, y)": {
        "prefix": "nuke.Format().toUV( x, y)",
        "body": "nuke.Format().toUV(${1:x}, ${2:y})",
        "description": "Back-transform an XY coordinate in the format's space into UV \n  space.\n\nParameters:\n\nx - The X coordinate.\ny - The Y coordinate.\n\nReturns: (u, v)\n[u, v]."
    },
    "nuke.Format().width()": {
        "prefix": "nuke.Format().width()",
        "body": "nuke.Format().width()",
        "description": "Return the width of image file in pixels.\n\nReturns ->\b int"
    },
    "nuke.Format().x()": {
        "prefix": "nuke.Format().x()",
        "body": "nuke.Format().x()",
        "description": "Return the left edge of image file in pixels.\n\nReturns ->\b int"
    },
    "nuke.Format().y()": {
        "prefix": "nuke.Format().y()",
        "body": "nuke.Format().y()",
        "description": "Return the bottom edge of image file in pixels.\n\nReturns ->\b int"
    },
    "nuke.Format_Knob().actualValue()": {
        "prefix": "nuke.Format_Knob().actualValue()",
        "body": "nuke.Format_Knob().actualValue()",
        "description": "Return value of knob.\n\nReturns ->\b Format"
    },
    "nuke.Format_Knob().fromScript(s)": {
        "prefix": "nuke.Format_Knob().fromScript(s)",
        "body": "nuke.Format_Knob().fromScript(${1:s})",
        "description": "Initialise from script s.\n\nReturns: True if succeeded, False otherwise\nOverrides:\n        Knob.fromScript"
    },
    "nuke.Format_Knob().name()": {
        "prefix": "nuke.Format_Knob().name()",
        "body": "nuke.Format_Knob().name()",
        "description": "Return name of knob.\n\nReturns: string\nname.\nOverrides:\n        Knob.name"
    },
    "nuke.Format_Knob().notDefault()": {
        "prefix": "nuke.Format_Knob().notDefault()",
        "body": "nuke.Format_Knob().notDefault()",
        "description": "Returns ->\b True if set to its default value, False otherwise."
    },
    "nuke.Format_Knob().setValue(format)": {
        "prefix": "nuke.Format_Knob().setValue(format)",
        "body": "nuke.Format_Knob().setValue(${1:format})",
        "description": "Set value of knob to format (either a Format object or a name of a \n  format, e.g. \"NTSC\").\n\nReturns: True if succeeded, False otherwise\nTrue if successful, False if not.\nOverrides:\n        Knob.setValue"
    },
    "nuke.Format_Knob().toScript(quote, context=current)": {
        "prefix": "nuke.Format_Knob().toScript(quote, context=current)",
        "body": "nuke.Format_Knob().toScript(${1:quote}, context=${2:current})",
        "description": "Return the value of the knob in script syntax. Pass True for quote to \n  return results quoted in {}. Pass None for context to get results for all\n  views and key times (as stored in a .nk file).\n\nReturns: string\nOverrides:\n        Knob.toScript"
    },
    "nuke.Format_Knob().value()": {
        "prefix": "nuke.Format_Knob().value()",
        "body": "nuke.Format_Knob().value()",
        "description": "Return value of knob.\n\nReturns: Format\nOverrides:\n        Knob.value"
    },
    "nuke.FrameRange().first()": {
        "prefix": "nuke.FrameRange().first()",
        "body": "nuke.FrameRange().first()",
        "description": "return the first frame of the range.\n\nReturns ->\b int"
    },
    "nuke.FrameRange().frames()": {
        "prefix": "nuke.FrameRange().frames()",
        "body": "nuke.FrameRange().frames()",
        "description": "return the numbers of frames defined in the range.\n\nReturns ->\b int"
    },
    "nuke.FrameRange().getFrame( n)": {
        "prefix": "nuke.FrameRange().getFrame( n)",
        "body": "nuke.FrameRange().getFrame(${1:n})",
        "description": "return the frame according to the index, parameter n must be between \n      0 and frames().\n\nReturns ->\b int"
    },
    "nuke.FrameRange().increment()": {
        "prefix": "nuke.FrameRange().increment()",
        "body": "nuke.FrameRange().increment()",
        "description": "return the increment between two frames.\n\nReturns ->\b int"
    },
    "nuke.FrameRange().isInRange( n)": {
        "prefix": "nuke.FrameRange().isInRange( n)",
        "body": "nuke.FrameRange().isInRange(${1:n})",
        "description": "return if the frame is inside the range.\n\nReturns ->\b int"
    },
    "nuke.FrameRange().last()": {
        "prefix": "nuke.FrameRange().last()",
        "body": "nuke.FrameRange().last()",
        "description": "return the last frame of the range.\n\nReturns ->\b int"
    },
    "nuke.FrameRange().maxFrame()": {
        "prefix": "nuke.FrameRange().maxFrame()",
        "body": "nuke.FrameRange().maxFrame()",
        "description": "return the maximun frame define in the range.\n\nReturns ->\b int"
    },
    "nuke.FrameRange().minFrame()": {
        "prefix": "nuke.FrameRange().minFrame()",
        "body": "nuke.FrameRange().minFrame()",
        "description": "return the minimun frame define in the range.\n\nReturns ->\b int"
    },
    "nuke.FrameRange().next(x)": {
        "prefix": "nuke.FrameRange().next(x)",
        "body": "nuke.FrameRange().next(${1:x})",
        "description": "Returns ->\b the next value, or raise StopIteration"
    },
    "nuke.FrameRange().setFirst( n)": {
        "prefix": "nuke.FrameRange().setFirst( n)",
        "body": "nuke.FrameRange().setFirst(${1:n})",
        "description": "set the first frame of the range.\n\nReturns ->\b None"
    },
    "nuke.FrameRange().setIncrement( n)": {
        "prefix": "nuke.FrameRange().setIncrement( n)",
        "body": "nuke.FrameRange().setIncrement(${1:n})",
        "description": "set the increment between two frames.\n\nReturns ->\b None"
    },
    "nuke.FrameRange().setLast( n)": {
        "prefix": "nuke.FrameRange().setLast( n)",
        "body": "nuke.FrameRange().setLast(${1:n})",
        "description": "set the last frame of the range.\n\nReturns ->\b None"
    },
    "nuke.FrameRange().stepFrame()": {
        "prefix": "nuke.FrameRange().stepFrame()",
        "body": "nuke.FrameRange().stepFrame()",
        "description": "return the absolute increment between two frames.\n\nReturns ->\b int"
    },
    "nuke.FrameRanges().add(r)": {
        "prefix": "nuke.FrameRanges().add(r)",
        "body": "nuke.FrameRanges().add(${1:r})",
        "description": "add a new frame range.\n\nReturns ->\b None"
    },
    "nuke.FrameRanges().clear()": {
        "prefix": "nuke.FrameRanges().clear()",
        "body": "nuke.FrameRanges().clear()",
        "description": "reset all store frame ranges.\n\nReturns ->\b None"
    },
    "nuke.FrameRanges().compact()": {
        "prefix": "nuke.FrameRanges().compact()",
        "body": "nuke.FrameRanges().compact()",
        "description": "compact all the frame ranges.\n\nReturns ->\b None"
    },
    "nuke.FrameRanges().getRange()": {
        "prefix": "nuke.FrameRanges().getRange()",
        "body": "nuke.FrameRanges().getRange()",
        "description": "return a range from the list\n\nReturns ->\b FrameRange"
    },
    "nuke.FrameRanges().maxFrame()": {
        "prefix": "nuke.FrameRanges().maxFrame()",
        "body": "nuke.FrameRanges().maxFrame()",
        "description": "get maximun frame of all ranges.\n\nReturns ->\b int"
    },
    "nuke.FrameRanges().minFrame()": {
        "prefix": "nuke.FrameRanges().minFrame()",
        "body": "nuke.FrameRanges().minFrame()",
        "description": "get minimun frame of all ranges.\n\nReturns ->\b int"
    },
    "nuke.FrameRanges().next(x)": {
        "prefix": "nuke.FrameRanges().next(x)",
        "body": "nuke.FrameRanges().next(${1:x})",
        "description": "Returns ->\b the next value, or raise StopIteration"
    },
    "nuke.FrameRanges().size()": {
        "prefix": "nuke.FrameRanges().size()",
        "body": "nuke.FrameRanges().size()",
        "description": "return the ranges number.\n\nReturns ->\b int"
    },
    "nuke.FrameRanges().toFrameList()": {
        "prefix": "nuke.FrameRanges().toFrameList()",
        "body": "nuke.FrameRanges().toFrameList()",
        "description": "return a list of frames in a vector\n\nReturns ->\b [int]"
    },
    "_nuke.GeoSelect_Knob().getGeometry()": {
        "prefix": "_nuke.GeoSelect_Knob().getGeometry()",
        "body": "_nuke.GeoSelect_Knob().getGeometry()",
        "description": "Get the geometry which this knob can select from.\n\nReturns ->\b _geo.GeometryList"
    },
    "_nuke.GeoSelect_Knob().getSelection()": {
        "prefix": "_nuke.GeoSelect_Knob().getSelection()",
        "body": "_nuke.GeoSelect_Knob().getSelection()",
        "description": "Returns the selection weights for each vertex as a float. If you \n  access the result as selection[obj][pt], then obj is the index of the \n  object in the input geometry and pt is the index of the point in that \n  object.\n\nReturns: list of lists of floats"
    },
    "nuke.Gizmo().command()": {
        "prefix": "nuke.Gizmo().command()",
        "body": "nuke.Gizmo().command()",
        "description": "Gizmo command.\n\nReturns: String\nString."
    },
    "nuke.Gizmo().filename()": {
        "prefix": "nuke.Gizmo().filename()",
        "body": "nuke.Gizmo().filename()",
        "description": "Gizmo filename.\n\nReturns: String\nString."
    },
    "nuke.Gizmo().makeGroup()": {
        "prefix": "nuke.Gizmo().makeGroup()",
        "body": "nuke.Gizmo().makeGroup()",
        "description": "Creates a Group node copy of the Gizmo node.\n\nReturns: Group\nGroup."
    },
    "nuke.Group().begin()": {
        "prefix": "nuke.Group().begin()",
        "body": "nuke.Group().begin()",
        "description": "All python code that follows will be executed in the context of node. \n  All names are evaluated relative to this object. Must be paired with \n  end.\n\nReturns: Group\nGroup."
    },
    "nuke.Group().connectSelectedNodes( backward, inputA)": {
        "prefix": "nuke.Group().connectSelectedNodes( backward, inputA)",
        "body": "nuke.Group().connectSelectedNodes(${1:backward}, ${2:inputA})",
        "description": "Connect the selected nodes. @param backward. @param inputA.\n\nReturns: None\nNone."
    },
    "nuke.Group().end()": {
        "prefix": "nuke.Group().end()",
        "body": "nuke.Group().end()",
        "description": "All python code that follows will no longer be executed in the context\n  of node. Must be paired with begin.\n\nReturns: None\nNone."
    },
    "nuke.Group().expand()": {
        "prefix": "nuke.Group().expand()",
        "body": "nuke.Group().expand()",
        "description": "Moves all nodes from the group node into its parent group, maintaining\n  node input and output connections, and deletes the group. Returns the \n  nodes that were moved, which will also be selected.\n\nReturns: None\nNone."
    },
    "nuke.Group().node( s)": {
        "prefix": "nuke.Group().node( s)",
        "body": "nuke.Group().node(${1:s})",
        "description": "Locate a node by name.\n\nParameters:\n\ns - A string.\n\nReturns: Node with name s or None\nNode with name s or None."
    },
    "nuke.Group().nodes()": {
        "prefix": "nuke.Group().nodes()",
        "body": "nuke.Group().nodes()",
        "description": "List of nodes in group.\n\nReturns: List of nodes\nList of nodes"
    },
    "nuke.Group().numNodes()": {
        "prefix": "nuke.Group().numNodes()",
        "body": "nuke.Group().numNodes()",
        "description": "Number of nodes in group.\n\nReturns: Number of nodes\nNumber of nodes"
    },
    "nuke.Group().output()": {
        "prefix": "nuke.Group().output()",
        "body": "nuke.Group().output()",
        "description": "Return output node of group.\n\nReturns: Node or None\nNode or None."
    },
    "nuke.Group().run( callable)": {
        "prefix": "nuke.Group().run( callable)",
        "body": "nuke.Group().run(${1:callable})",
        "description": "Execute in the context of node. All names are evaluated relative to \n  this object.\n\nParameters:\n\ncallable - callable to execute.\n\nReturns: Result of callable\nResult of callable."
    },
    "nuke.Group().selectedNode()": {
        "prefix": "nuke.Group().selectedNode()",
        "body": "nuke.Group().selectedNode()",
        "description": "Returns the node the user is most likely thinking about. This is the \n  last node the user clicked on, if it is selected.  Otherwise it is an \n  'output' (one with no selected outputs) of the set of selected nodes. If \n  no nodes are selected then None is returned.\n\nReturns: Node or None\nNode or None."
    },
    "nuke.Group().selectedNodes()": {
        "prefix": "nuke.Group().selectedNodes()",
        "body": "nuke.Group().selectedNodes()",
        "description": "Selected nodes.\n\nReturns: Node or None\nNode or None."
    },
    "nuke.Group().splaySelectedNodes( backward, inputA)": {
        "prefix": "nuke.Group().splaySelectedNodes( backward, inputA)",
        "body": "nuke.Group().splaySelectedNodes(${1:backward}, ${2:inputA})",
        "description": "Splay the selected nodes. @param backward. @param inputA.\n\nReturns: None\nNone."
    },
    "_nuke.Hash().append(...)": {
        "prefix": "_nuke.Hash().append(...)",
        "body": "_nuke.Hash().append(${1:...})",
        "description": "Add another value to the hash."
    },
    "_nuke.Hash().getHash(...)": {
        "prefix": "_nuke.Hash().getHash(...)",
        "body": "_nuke.Hash().getHash(${1:...})",
        "description": "Get the current value of the hash."
    },
    "_nuke.Hash().reset(...)": {
        "prefix": "_nuke.Hash().reset(...)",
        "body": "_nuke.Hash().reset(${1:...})",
        "description": "Reset the hash."
    },
    "_nuke.Hash().setHash(...)": {
        "prefix": "_nuke.Hash().setHash(...)",
        "body": "_nuke.Hash().setHash(${1:...})",
        "description": "Set the current value of the hash."
    },
    "nuke.IArray_Knob().dimensions()": {
        "prefix": "nuke.IArray_Knob().dimensions()",
        "body": "nuke.IArray_Knob().dimensions()",
        "description": "Return number of dimensions.\n\nReturns: Dimensions in array\nDimensions in array.\nOverrides:\n        Array_Knob.dimensions"
    },
    "nuke.IArray_Knob().height()": {
        "prefix": "nuke.IArray_Knob().height()",
        "body": "nuke.IArray_Knob().height()",
        "description": "Return height of the array.\n\nReturns: Height of array of values\nHeight of array of values.\nOverrides:\n        Array_Knob.height"
    },
    "nuke.IArray_Knob().value( index, view, time)": {
        "prefix": "nuke.IArray_Knob().value( index, view, time)",
        "body": "nuke.IArray_Knob().value(${1:index}, ${2:view}, ${3:time})",
        "description": "Return value of the array at position (x, y).\n\nParameters:\n\nindex - Optional index. Default is 0.\nview - Optional view.\ntime - Optional time.\n\nReturns: Floating point or List of floating point values (in case some are \n      different)\nFloating point or List of floating point values (in case some are\n          different).\nOverrides:\n        Knob.value"
    },
    "nuke.IArray_Knob().width()": {
        "prefix": "nuke.IArray_Knob().width()",
        "body": "nuke.IArray_Knob().width()",
        "description": "Return width of the array.\n\nReturns: Width of array of values\nWidth of array of values.\nOverrides:\n        Array_Knob.width"
    },
    "nuke.Info().h()": {
        "prefix": "nuke.Info().h()",
        "body": "nuke.Info().h()",
        "description": "Return height.\n\nReturns ->\b float"
    },
    "nuke.Info().w()": {
        "prefix": "nuke.Info().w()",
        "body": "nuke.Info().w()",
        "description": "Return width.\n\nReturns ->\b float"
    },
    "nuke.Info().x()": {
        "prefix": "nuke.Info().x()",
        "body": "nuke.Info().x()",
        "description": "Return left edge.\n\nReturns ->\b float"
    },
    "nuke.Info().y()": {
        "prefix": "nuke.Info().y()",
        "body": "nuke.Info().y()",
        "description": "Return the bottom edge.\n\nReturns ->\b float"
    },
    "nuke.Int_Knob().setValue( val)": {
        "prefix": "nuke.Int_Knob().setValue( val)",
        "body": "nuke.Int_Knob().setValue(${1:val})",
        "description": "Set the integer value of this knob.\n\nParameters:\n\nval - The new value. Must be an integer.\n\nReturns: bool\nTrue if succeeded, False otherwise.\nOverrides:\n        Knob.setValue"
    },
    "nuke.Int_Knob().value()": {
        "prefix": "nuke.Int_Knob().value()",
        "body": "nuke.Int_Knob().value()",
        "description": "Get the integer value of this knob.\n\nParameters:\n\nindex - Optional index. Default is 0.\nview - Optional view.\ntime - Optional time.\n\nReturns: int\nThe value of this knob as an int.\nOverrides:\n        Knob.value"
    },
    "nuke.Keyer_Knob().names( n)": {
        "prefix": "nuke.Keyer_Knob().names( n)",
        "body": "nuke.Keyer_Knob().names(${1:n})",
        "description": "Parameters:\n\nn - The index of the name to return.\n\nReturns: string\nThe name at position n."
    },
    "nuke.Keyer_Knob().value( outputCtx, n)": {
        "prefix": "nuke.Keyer_Knob().value( outputCtx, n)",
        "body": "nuke.Keyer_Knob().value(${1:outputCtx}, ${2:n})",
        "description": "Get the value of argument n.\n\nParameters:\n\noutputCtx - The OutputContext to evaluate the argument in.\nn - The index of the argument to get the value of.\n\nReturns: float\nThe value of argument n.\nOverrides:\n        Knob.value"
    },
    "nuke.Knob().Class()": {
        "prefix": "nuke.Knob().Class()",
        "body": "nuke.Knob().Class()",
        "description": "Returns: Class name\nClass name."
    },
    "nuke.Knob().clearAnimated(...)": {
        "prefix": "nuke.Knob().clearAnimated(...)",
        "body": "nuke.Knob().clearAnimated(${1:...})",
        "description": "Clear animation for channel 'c'. Return True if successful."
    },
    "nuke.Knob().clearFlag( f)": {
        "prefix": "nuke.Knob().clearFlag( f)",
        "body": "nuke.Knob().clearFlag(${1:f})",
        "description": "Clear flag.\n\nParameters:\n\nf - Flag.\n\nReturns: None\nNone."
    },
    "nuke.Knob().critical( message)": {
        "prefix": "nuke.Knob().critical( message)",
        "body": "nuke.Knob().critical(${1:message})",
        "description": "Parameters:\n\nmessage - message to put the knob in error, and do a popup.\n\nReturns: None\nNone."
    },
    "nuke.Knob().debug( message)": {
        "prefix": "nuke.Knob().debug( message)",
        "body": "nuke.Knob().debug(${1:message})",
        "description": "Parameters:\n\nmessage - message to put out to the error console, attached to the knob, if\n          the verbosity level is set high enough.\n\nReturns: None\nNone."
    },
    "nuke.Knob().enabled()": {
        "prefix": "nuke.Knob().enabled()",
        "body": "nuke.Knob().enabled()",
        "description": "Returns: Boolean\nTrue if the knob is enabled, False if it's disabled."
    },
    "nuke.Knob().error( message)": {
        "prefix": "nuke.Knob().error( message)",
        "body": "nuke.Knob().error(${1:message})",
        "description": "Parameters:\n\nmessage - message to put the knob in error.\n\nReturns: None\nNone."
    },
    "nuke.Knob().fromScript(...)": {
        "prefix": "nuke.Knob().fromScript(...)",
        "body": "nuke.Knob().fromScript(${1:...})",
        "description": "Initialise from script."
    },
    "nuke.Knob().fullyQualifiedName( channel=-1)": {
        "prefix": "nuke.Knob().fullyQualifiedName( channel=-1)",
        "body": "nuke.Knob().fullyQualifiedName(channel=${1:-1})",
        "description": "Returns the fully-qualified name of the knob within the node. This can\n  be useful for expression linking.\n\nParameters:\n\nchannel - Optional parameter, specifies the channel number of the sub-knob \n          (for example, channels of  0 and 1 would refer to the x and y of \n          a XY_Knob respectively), leave blank or set to -1 to get the  \n          qualified name of the knob only.\n\nReturns: string\nThe string of the qualified knob or sub-knob, which can be used \n          directly in expression links."
    },
    "nuke.Knob().getDerivative(...)": {
        "prefix": "nuke.Knob().getDerivative(...)",
        "body": "nuke.Knob().getDerivative(${1:...})",
        "description": "Return derivative at time 't' for channel 'c'."
    },
    "nuke.Knob().getFlag( f)": {
        "prefix": "nuke.Knob().getFlag( f)",
        "body": "nuke.Knob().getFlag(${1:f})",
        "description": "Returns whether the input flag is set.\n\nParameters:\n\nf - Flag.\n\nReturns: Bool\nTrue if set, False otherwise."
    },
    "nuke.Knob().getIntegral(...)": {
        "prefix": "nuke.Knob().getIntegral(...)",
        "body": "nuke.Knob().getIntegral(${1:...})",
        "description": "Return integral at the interval [t1, t2] for channel 'c'."
    },
    "nuke.Knob().getKeyIndex(...)": {
        "prefix": "nuke.Knob().getKeyIndex(...)",
        "body": "nuke.Knob().getKeyIndex(${1:...})",
        "description": "Return keyframe index at time 't' for channel 'c'."
    },
    "nuke.Knob().getKeyTime(...)": {
        "prefix": "nuke.Knob().getKeyTime(...)",
        "body": "nuke.Knob().getKeyTime(${1:...})",
        "description": "Return index of the keyframe at time 't' for channel 'c'."
    },
    "nuke.Knob().getNthDerivative(...)": {
        "prefix": "nuke.Knob().getNthDerivative(...)",
        "body": "nuke.Knob().getNthDerivative(${1:...})",
        "description": "Return nth derivative at time 't' for channel 'c'."
    },
    "nuke.Knob().getNumKeys(...)": {
        "prefix": "nuke.Knob().getNumKeys(...)",
        "body": "nuke.Knob().getNumKeys(${1:...})",
        "description": "Return number of keyframes for channel 'c'."
    },
    "nuke.Knob().getValue(...)": {
        "prefix": "nuke.Knob().getValue(...)",
        "body": "nuke.Knob().getValue(${1:...})",
        "description": "Return value at the current frame for channel 'c'."
    },
    "nuke.Knob().getValueAt(...)": {
        "prefix": "nuke.Knob().getValueAt(...)",
        "body": "nuke.Knob().getValueAt(${1:...})",
        "description": "Return value at time 't' for channel 'c'."
    },
    "nuke.Knob().hasExpression( index=-1)": {
        "prefix": "nuke.Knob().hasExpression( index=-1)",
        "body": "nuke.Knob().hasExpression(index=${1:-1})",
        "description": "Return True if animation at index 'index' has an expression.\n\nParameters:\n\nindex - Optional index parameter. Defaults to -1 if not specified. This \n          can be specified as a keyword parameter if desired.\n\nReturns: bool\nTrue if has expression, False otherwise."
    },
    "nuke.Knob().isAnimated(...)": {
        "prefix": "nuke.Knob().isAnimated(...)",
        "body": "nuke.Knob().isAnimated(${1:...})",
        "description": "Return True if channel 'c' is animated."
    },
    "nuke.Knob().isKey(...)": {
        "prefix": "nuke.Knob().isKey(...)",
        "body": "nuke.Knob().isKey(${1:...})",
        "description": "Return True if there is a keyframe at the current frame for channel \n      'c'."
    },
    "nuke.Knob().isKeyAt(...)": {
        "prefix": "nuke.Knob().isKeyAt(...)",
        "body": "nuke.Knob().isKeyAt(${1:...})",
        "description": "Return True if there is a keyframe at time 't' for channel 'c'."
    },
    "nuke.Knob().label()": {
        "prefix": "nuke.Knob().label()",
        "body": "nuke.Knob().label()",
        "description": "Returns: label\nlabel."
    },
    "nuke.Knob().name()": {
        "prefix": "nuke.Knob().name()",
        "body": "nuke.Knob().name()",
        "description": "Returns: name\nname."
    },
    "nuke.Knob().node()": {
        "prefix": "nuke.Knob().node()",
        "body": "nuke.Knob().node()",
        "description": "Return the node that this knob belongs to. If the node has been \n  cloned, we'll always return a reference to the original.\n\nReturns: nuke.Node\nThe node which owns this knob, or None if the knob has no owner \n          yet."
    },
    "nuke.Knob().removeKey(...)": {
        "prefix": "nuke.Knob().removeKey(...)",
        "body": "nuke.Knob().removeKey(${1:...})",
        "description": "Remove key for channel 'c'. Return True if successful."
    },
    "nuke.Knob().removeKeyAt(...)": {
        "prefix": "nuke.Knob().removeKeyAt(...)",
        "body": "nuke.Knob().removeKeyAt(${1:...})",
        "description": "Remove key at time 't' for channel 'c'. Return True if successful."
    },
    "nuke.Knob().setAnimated(...)": {
        "prefix": "nuke.Knob().setAnimated(...)",
        "body": "nuke.Knob().setAnimated(${1:...})",
        "description": "Set channel 'c' to be animated."
    },
    "nuke.Knob().setEnabled( enabled)": {
        "prefix": "nuke.Knob().setEnabled( enabled)",
        "body": "nuke.Knob().setEnabled(${1:enabled})",
        "description": "Enable or disable the knob.\n\nParameters:\n\nenabled - True to enable the knob, False to disable it.\n\nReturns: None"
    },
    "nuke.Knob().setExpression( expr, channel=-1, view=None)": {
        "prefix": "nuke.Knob().setExpression( expr, channel=-1, view=None)",
        "body": "nuke.Knob().setExpression(${1:expr}, channel=${2:-1}, view=${3:None})",
        "description": "Set the expression for a knob. You can optionally specify a channel to\n  set the expression for.\n\nParameters:\n\nexpr - The new expression for the knob. This should be a string.\nchannel - Optional parameter, specifying the channel to set the expression \n          for. This should be an integer.\nview - Optional view parameter. Without, this command will set the \n          expression for the current view theinterface is displaying. Can \n          be the name of the view or the index.\n\nReturns: bool\nTrue if successful, False if not."
    },
    "nuke.Knob().setFlag( f)": {
        "prefix": "nuke.Knob().setFlag( f)",
        "body": "nuke.Knob().setFlag(${1:f})",
        "description": "Logical OR of the argument and existing knob flags.\n\nParameters:\n\nf - Flag.\n\nReturns: None\nNone."
    },
    "nuke.Knob().setLabel( s)": {
        "prefix": "nuke.Knob().setLabel( s)",
        "body": "nuke.Knob().setLabel(${1:s})",
        "description": "Parameters:\n\ns - New label.\n\nReturns: None\nNone."
    },
    "nuke.Knob().setName( s)": {
        "prefix": "nuke.Knob().setName( s)",
        "body": "nuke.Knob().setName(${1:s})",
        "description": "Parameters:\n\ns - New name.\n\nReturns: None\nNone."
    },
    "nuke.Knob().setTooltip( s)": {
        "prefix": "nuke.Knob().setTooltip( s)",
        "body": "nuke.Knob().setTooltip(${1:s})",
        "description": "Parameters:\n\ns - New tooltip.\n\nReturns: None\nNone."
    },
    "nuke.Knob().setValue( val, chan)": {
        "prefix": "nuke.Knob().setValue( val, chan)",
        "body": "nuke.Knob().setValue(${1:val}, ${2:chan})",
        "description": "Sets the value 'val' at channel 'chan'.\n\nReturns: bool\nTrue if successful, False if not."
    },
    "nuke.Knob().setValueAt( val, time, chan)": {
        "prefix": "nuke.Knob().setValueAt( val, time, chan)",
        "body": "nuke.Knob().setValueAt(${1:val}, ${2:time}, ${3:chan})",
        "description": "Sets the value 'val' at channel 'chan' for time 'time'.\n\nReturns: bool\nTrue if successful, False if not."
    },
    "nuke.Knob().setVisible( visible)": {
        "prefix": "nuke.Knob().setVisible( visible)",
        "body": "nuke.Knob().setVisible(${1:visible})",
        "description": "Show or hide the knob.\n\nParameters:\n\nvisible - True to show the knob, False to hide it.\n\nReturns: None"
    },
    "nuke.Knob().toScript(quote, context=current)": {
        "prefix": "nuke.Knob().toScript(quote, context=current)",
        "body": "nuke.Knob().toScript(${1:quote}, context=${2:current})",
        "description": "Return the value of the knob in script syntax. Pass True for quote to \n  return results quoted in {}. Pass None for context to get results for all\n  views and key times (as stored in a .nk file).\n\nReturns: string"
    },
    "nuke.Knob().tooltip()": {
        "prefix": "nuke.Knob().tooltip()",
        "body": "nuke.Knob().tooltip()",
        "description": "Returns: tooltip\ntooltip."
    },
    "nuke.Knob().value(...)": {
        "prefix": "nuke.Knob().value(...)",
        "body": "nuke.Knob().value(${1:...})",
        "description": "Return value at the current frame for channel 'c'."
    },
    "nuke.Knob().visible()": {
        "prefix": "nuke.Knob().visible()",
        "body": "nuke.Knob().visible()",
        "description": "Returns: Boolean\nTrue if the knob is visible, False if it's hidden."
    },
    "nuke.Knob().warning( message)": {
        "prefix": "nuke.Knob().warning( message)",
        "body": "nuke.Knob().warning(${1:message})",
        "description": "Parameters:\n\nmessage - message to put a warning on the knob.\n\nReturns: None\nNone."
    },
    "nuke.Layer().channels()": {
        "prefix": "nuke.Layer().channels()",
        "body": "nuke.Layer().channels()",
        "description": "Get a list of the channels in this layer.\n\nReturns: [string, ...]\nA list of strings, where each string is the name of a channel in \n          this layer."
    },
    "nuke.Layer().name()": {
        "prefix": "nuke.Layer().name()",
        "body": "nuke.Layer().name()",
        "description": "Get the layer name.\n\nReturns: str\nThe layer name, as a string."
    },
    "nuke.Layer().setName( newName)": {
        "prefix": "nuke.Layer().setName( newName)",
        "body": "nuke.Layer().setName(${1:newName})",
        "description": "Set the name of this layer.\n\nParameters:\n\nnewName - The new name for this layer.\n\nReturns: None"
    },
    "nuke.Layer().visible()": {
        "prefix": "nuke.Layer().visible()",
        "body": "nuke.Layer().visible()",
        "description": "Check whether the layer is visible.\n\nReturns: bool\nTrue if visible, False if not."
    },
    "nuke.Link_Knob().getLink()": {
        "prefix": "nuke.Link_Knob().getLink()",
        "body": "nuke.Link_Knob().getLink()",
        "description": "Returns ->\b s"
    },
    "nuke.Link_Knob().getLinkedKnob()": {
        "prefix": "nuke.Link_Knob().getLinkedKnob()",
        "body": "nuke.Link_Knob().getLinkedKnob()",
        "description": "Returns ->\b knob"
    },
    "nuke.Link_Knob().makeLink(s, t)": {
        "prefix": "nuke.Link_Knob().makeLink(s, t)",
        "body": "nuke.Link_Knob().makeLink(${1:s}, ${2:t})",
        "description": "Returns ->\b None"
    },
    "nuke.Link_Knob().setLink(s)": {
        "prefix": "nuke.Link_Knob().setLink(s)",
        "body": "nuke.Link_Knob().setLink(${1:s})",
        "description": "Returns ->\b None"
    },
    "nuke.Link_Knob().setValue()": {
        "prefix": "nuke.Link_Knob().setValue()",
        "body": "nuke.Link_Knob().setValue()",
        "description": "Set value of knob.\n\nReturns: None\nTrue if successful, False if not.\nOverrides:\n        Knob.setValue"
    },
    "nuke.Link_Knob().value()": {
        "prefix": "nuke.Link_Knob().value()",
        "body": "nuke.Link_Knob().value()",
        "description": "Return value of knob.\n\nReturns: string\nOverrides:\n        Knob.value"
    },
    "nuke.LinkableKnobInfo().absolute()": {
        "prefix": "nuke.LinkableKnobInfo().absolute()",
        "body": "nuke.LinkableKnobInfo().absolute()",
        "description": "Returns whether the values of this knob should be treated as absolute \n  or relative. This may be useful for positions.\n\nReturns: Boolean"
    },
    "nuke.LinkableKnobInfo().displayName()": {
        "prefix": "nuke.LinkableKnobInfo().displayName()",
        "body": "nuke.LinkableKnobInfo().displayName()",
        "description": "Returns the custom display name that will appear in Link-to menus.\n\nReturns ->\b String"
    },
    "nuke.LinkableKnobInfo().enabled()": {
        "prefix": "nuke.LinkableKnobInfo().enabled()",
        "body": "nuke.LinkableKnobInfo().enabled()",
        "description": "Returns whether the knob is currently enabled or not.\n\nReturns ->\b Boolean"
    },
    "nuke.LinkableKnobInfo().indices()": {
        "prefix": "nuke.LinkableKnobInfo().indices()",
        "body": "nuke.LinkableKnobInfo().indices()",
        "description": "Returns a list of the knob channels that should be used with this \n      linkable knob.\n\nReturns ->\b List"
    },
    "nuke.LinkableKnobInfo().knob()": {
        "prefix": "nuke.LinkableKnobInfo().knob()",
        "body": "nuke.LinkableKnobInfo().knob()",
        "description": "Returns the knob that may be linked to.\n\nReturns ->\b Knob"
    },
    "nuke.LookupCurves_Knob().addCurve( curve, expr=None)": {
        "prefix": "nuke.LookupCurves_Knob().addCurve( curve, expr=None)",
        "body": "nuke.LookupCurves_Knob().addCurve(${1:curve}, expr=${2:None})",
        "description": "Adds a curve.\n\nParameters:\n\ncurve - The name of an animation curve, or an AnimationCurve instance.\nexpr - Optional parameter giving an expression for the curve.\n\nReturns: None\nNone"
    },
    "nuke.LookupCurves_Knob().delCurve( curve)": {
        "prefix": "nuke.LookupCurves_Knob().delCurve( curve)",
        "body": "nuke.LookupCurves_Knob().delCurve(${1:curve})",
        "description": "Deletes a curve.\n\nParameters:\n\ncurve - The name of the animation curve.\n\nReturns: None\nNone"
    },
    "nuke.LookupCurves_Knob().editCurve( curve, expr=None)": {
        "prefix": "nuke.LookupCurves_Knob().editCurve( curve, expr=None)",
        "body": "nuke.LookupCurves_Knob().editCurve(${1:curve}, expr=${2:None})",
        "description": "Edits an existing curve.\n\nParameters:\n\ncurve - The name of an animation curve.\nexpr - The new expression for the curve.\n\nReturns: None\nNone"
    },
    "nuke.Lut().fromByte( float)": {
        "prefix": "nuke.Lut().fromByte( float)",
        "body": "nuke.Lut().fromByte(${1:float})",
        "description": "Converts byte values in the range 0-255 to floating point.\n\nReturns ->\b float"
    },
    "nuke.Lut().fromByteSingle( float)": {
        "prefix": "nuke.Lut().fromByteSingle( float)",
        "body": "nuke.Lut().fromByteSingle(${1:float})",
        "description": "Converts byte values in the range 0-255 to floating point.\n\nReturns ->\b float"
    },
    "nuke.Lut().fromFloat(src, alpha)": {
        "prefix": "nuke.Lut().fromFloat(src, alpha)",
        "body": "nuke.Lut().fromFloat(${1:src}, ${2:alpha})",
        "description": "Convert a sequence of floating-point values to from_byte(x*255). Alpha\n  is an optional argument and if present unpremultiply by alpha, convert, \n  and then multiply back.\n\nReturns: float list"
    },
    "nuke.Lut().isLinear()": {
        "prefix": "nuke.Lut().isLinear()",
        "body": "nuke.Lut().isLinear()",
        "description": "Returns ->\b True if toByte(x) appears to return x*255, False otherwise."
    },
    "nuke.Lut().isZero()": {
        "prefix": "nuke.Lut().isZero()",
        "body": "nuke.Lut().isZero()",
        "description": "Returns ->\b True if toByte(0) returns a value <= 0, False otherwise."
    },
    "nuke.Lut().toByte( float)": {
        "prefix": "nuke.Lut().toByte( float)",
        "body": "nuke.Lut().toByte(${1:float})",
        "description": "Converts floating point values to byte values in the range 0-255.\n\nReturns ->\b float"
    },
    "nuke.Lut().toByteSingle( float)": {
        "prefix": "nuke.Lut().toByteSingle( float)",
        "body": "nuke.Lut().toByteSingle(${1:float})",
        "description": "Converts floating point values to byte values in the range 0-255.\n\nReturns ->\b float"
    },
    "nuke.Lut().toFloat(src, alpha)": {
        "prefix": "nuke.Lut().toFloat(src, alpha)",
        "body": "nuke.Lut().toFloat(${1:src}, ${2:alpha})",
        "description": "Convert a sequence of floating-point values to to_byte(x)/255. Alpha \n  is an optional argument and if present unpremultiply by alpha, convert, \n  and then multiply back.\n\nReturns: float list"
    },
    "nuke.Menu().addCommand( name, command, shortcut, icon, tooltip, index, readonly)": {
        "prefix": "nuke.Menu().addCommand( name, command, shortcut, icon, tooltip, index, readonly)",
        "body": "nuke.Menu().addCommand(${1:name}, ${2:command}, ${3:shortcut}, ${4:icon}, ${5:tooltip}, ${6:index}, ${7:readonly})",
        "description": "Add a new command to this menu/toolbar. Note that when invoked, the \n  command is automatically enclosed in an undo group, so that undo/redo \n  functionality works. Optional arguments can be specified by name. Note \n  that if the command argument is not specified, then the command will be \n  auto-created as a \"nuke.createNode()\" using the name argument \n  as the node to create.\nExample: menubar = nuke.menu('Nuke') fileMenu = \n  menubar.findItem('File') fileMenu.addCommand('NewCommand', 'print 10', \n  shortcut='t')\n\nParameters:\n\nname - The name for the menu/toolbar item. The name may contain submenu \n          names delimited by '/' or '', and submenus are created as needed.\ncommand - Optional. The command to add to the menu/toolbar. This can be a \n          string to evaluate or a Python Callable (function, method, etc) \n          to run.\nshortcut - Optional. The keyboard shortcut for the command, such as 'R', \n          'F5' or 'Ctrl-H'. Note that this overrides pre-existing other \n          uses for the shortcut.\nicon - Optional. An icon for the command. This should be a path to an \n          icon in the nuke.pluginPath() directory. If the icon is not \n          specified, Nuke will automatically try to find an icon with the \n          name argument and .png appended to it.\ntooltip - Optional. The tooltip text, displayed on mouseover for toolbar \n          buttons.\nindex - Optional. The position to insert the new item in, in the \n          menu/toolbar. This defaults to last in the menu/toolbar.\nreadonly - Optional. True/False for whether the item should be available \n          when the menu is invoked in a read-only context.\n\nReturns: The menu/toolbar item that was added to hold the command\nThe menu/toolbar item that was added to hold the command."
    },
    "nuke.Menu().addMenu( **kwargs)": {
        "prefix": "nuke.Menu().addMenu( **kwargs)",
        "body": "nuke.Menu().addMenu(${1:**kwargs})",
        "description": "Add a new submenu.\n\nParameters:\n\n**kwargs, The, following, keyword, arguments, are, accepted - name      The name for the menu/toolbar item icon      An icon \n          for the menu. Loaded from the nuke search path. tooltip   The \n          tooltip text. index     The position to insert the menu in. Use \n          -1 to add to the end of the menu.\n\nReturns: The submenu that was added\nThe submenu that was added."
    },
    "nuke.Menu().addSeparator( **kwargs)": {
        "prefix": "nuke.Menu().addSeparator( **kwargs)",
        "body": "nuke.Menu().addSeparator(${1:**kwargs})",
        "description": "Add a separator to this menu/toolbar.\n\nParameters:\n\n**kwargs, The, following, keyword, arguments, are, accepted - index     The position to insert the new separator in, in the \n          menu/toolbar.\n\nReturns: The separator that was created\nThe separator that was created."
    },
    "nuke.Menu().clearMenu()": {
        "prefix": "nuke.Menu().clearMenu()",
        "body": "nuke.Menu().clearMenu()",
        "description": "Clears a menu.\n\nParameters:\n\n**kwargs, The, following, keyword, arguments, are, accepted - name      The name for the menu/toolbar item\n\nReturns:\ntrue if cleared, false if menu not found"
    },
    "nuke.Menu().findItem( name)": {
        "prefix": "nuke.Menu().findItem( name)",
        "body": "nuke.Menu().findItem(${1:name})",
        "description": "Finds a submenu or command with a particular name.\n\nParameters:\n\nname - The name to search for.\n\nReturns: Menu or None\nThe submenu or command we found, or None if we could not find \n          anything."
    },
    "nuke.Menu().items()": {
        "prefix": "nuke.Menu().items()",
        "body": "nuke.Menu().items()",
        "description": "Returns a list of sub menu items.\n\nReturns ->\b None"
    },
    "nuke.Menu().menu( name)": {
        "prefix": "nuke.Menu().menu( name)",
        "body": "nuke.Menu().menu(${1:name})",
        "description": "Finds a submenu or command with a particular name.\n\nParameters:\n\nname - The name to search for.\n\nReturns: Menu or None\nThe submenu or command we found, or None if we could not find \n          anything."
    },
    "nuke.Menu().name()": {
        "prefix": "nuke.Menu().name()",
        "body": "nuke.Menu().name()",
        "description": "Returns the name of the menu item.\n\nReturns: String\nOverrides:\n        MenuItem.name"
    },
    "nuke.Menu().removeItem( name)": {
        "prefix": "nuke.Menu().removeItem( name)",
        "body": "nuke.Menu().removeItem(${1:name})",
        "description": "Removes a submenu or command with a particular name. If the containing\n  menu becomes empty, it will be removed too.\n\nParameters:\n\nname - The name to remove for.\n\nReturns: None\ntrue if removed, false if menu not found"
    },
    "nuke.MenuBar().addCommand( name, command, shortcut, icon, tooltip, index, readonly)": {
        "prefix": "nuke.MenuBar().addCommand( name, command, shortcut, icon, tooltip, index, readonly)",
        "body": "nuke.MenuBar().addCommand(${1:name}, ${2:command}, ${3:shortcut}, ${4:icon}, ${5:tooltip}, ${6:index}, ${7:readonly})",
        "description": "Add a new command to this menu/toolbar. Note that when invoked, the \n  command is automatically enclosed in an undo group, so that undo/redo \n  functionality works. Optional arguments can be specified by name. Note \n  that if the command argument is not specified, then the command will be \n  auto-created as a \"nuke.createNode()\" using the name argument \n  as the node to create.\nExample: menubar = nuke.menu('Nuke') fileMenu = \n  menubar.findItem('File') fileMenu.addCommand('NewCommand', 'print 10', \n  shortcut='t')\n\nParameters:\n\nname - The name for the menu/toolbar item. The name may contain submenu \n          names delimited by '/' or '', and submenus are created as needed.\ncommand - Optional. The command to add to the menu/toolbar. This can be a \n          string to evaluate or a Python Callable (function, method, etc) \n          to run.\nshortcut - Optional. The keyboard shortcut for the command, such as 'R', \n          'F5' or 'Ctrl-H'. Note that this overrides pre-existing other \n          uses for the shortcut.\nicon - Optional. An icon for the command. This should be a path to an \n          icon in the nuke.pluginPath() directory. If the icon is not \n          specified, Nuke will automatically try to find an icon with the \n          name argument and .png appended to it.\ntooltip - Optional. The tooltip text, displayed on mouseover for toolbar \n          buttons.\nindex - Optional. The position to insert the new item in, in the \n          menu/toolbar. This defaults to last in the menu/toolbar.\nreadonly - Optional. True/False for whether the item should be available \n          when the menu is invoked in a read-only context.\n\nReturns: The menu/toolbar item that was added to hold the command\nThe menu/toolbar item that was added to hold the command."
    },
    "nuke.MenuBar().addMenu( **kwargs)": {
        "prefix": "nuke.MenuBar().addMenu( **kwargs)",
        "body": "nuke.MenuBar().addMenu(${1:**kwargs})",
        "description": "Add a new submenu.\n\nParameters:\n\n**kwargs, The, following, keyword, arguments, are, accepted - name      The name for the menu/toolbar item icon      An icon \n          for the menu. Loaded from the nuke search path. tooltip   The \n          tooltip text. index     The position to insert the menu in. Use \n          -1 to add to the end of the menu.\n\nReturns: The submenu that was added\nThe submenu that was added."
    },
    "nuke.MenuBar().addSeparator( **kwargs)": {
        "prefix": "nuke.MenuBar().addSeparator( **kwargs)",
        "body": "nuke.MenuBar().addSeparator(${1:**kwargs})",
        "description": "Add a separator to this menu/toolbar.\n\nParameters:\n\n**kwargs, The, following, keyword, arguments, are, accepted - index     The position to insert the new separator in, in the \n          menu/toolbar.\n\nReturns: The separator that was created\nThe separator that was created."
    },
    "nuke.MenuBar().clearMenu()": {
        "prefix": "nuke.MenuBar().clearMenu()",
        "body": "nuke.MenuBar().clearMenu()",
        "description": "Clears a menu.\n\nParameters:\n\n**kwargs, The, following, keyword, arguments, are, accepted - name      The name for the menu/toolbar item\n\nReturns:\ntrue if cleared, false if menu not found"
    },
    "nuke.MenuBar().findItem( name)": {
        "prefix": "nuke.MenuBar().findItem( name)",
        "body": "nuke.MenuBar().findItem(${1:name})",
        "description": "Finds a submenu or command with a particular name.\n\nParameters:\n\nname - The name to search for.\n\nReturns: Menu or None\nThe submenu or command we found, or None if we could not find \n          anything."
    },
    "nuke.MenuBar().items()": {
        "prefix": "nuke.MenuBar().items()",
        "body": "nuke.MenuBar().items()",
        "description": "Returns a list of sub menu items.\n\nReturns ->\b None"
    },
    "nuke.MenuBar().menu( name)": {
        "prefix": "nuke.MenuBar().menu( name)",
        "body": "nuke.MenuBar().menu(${1:name})",
        "description": "Finds a submenu or command with a particular name.\n\nParameters:\n\nname - The name to search for.\n\nReturns: Menu or None\nThe submenu or command we found, or None if we could not find \n          anything."
    },
    "nuke.MenuBar().name()": {
        "prefix": "nuke.MenuBar().name()",
        "body": "nuke.MenuBar().name()",
        "description": "Returns the name of the menu item.\n\nReturns ->\b String"
    },
    "nuke.MenuBar().removeItem( name)": {
        "prefix": "nuke.MenuBar().removeItem( name)",
        "body": "nuke.MenuBar().removeItem(${1:name})",
        "description": "Removes a submenu or command with a particular name. If the containing\n  menu becomes empty, it will be removed too.\n\nParameters:\n\nname - The name to remove for.\n\nReturns: None\ntrue if removed, false if menu not found"
    },
    "nuke.MenuItem().icon()": {
        "prefix": "nuke.MenuItem().icon()",
        "body": "nuke.MenuItem().icon()",
        "description": "Returns the name of the icon on this menu item as path of the icon.\n\nReturns ->\b String"
    },
    "nuke.MenuItem().invoke()": {
        "prefix": "nuke.MenuItem().invoke()",
        "body": "nuke.MenuItem().invoke()",
        "description": "Perform the action associated with this menu item.\n\nReturns ->\b None"
    },
    "nuke.MenuItem().name()": {
        "prefix": "nuke.MenuItem().name()",
        "body": "nuke.MenuItem().name()",
        "description": "Returns the name of the menu item.\n\nReturns ->\b String"
    },
    "nuke.MenuItem().script()": {
        "prefix": "nuke.MenuItem().script()",
        "body": "nuke.MenuItem().script()",
        "description": "Returns the script that gets executed for this menu item.\n\nReturns ->\b String"
    },
    "nuke.MenuItem().setEnabled( enabled)": {
        "prefix": "nuke.MenuItem().setEnabled( enabled)",
        "body": "nuke.MenuItem().setEnabled(${1:enabled})",
        "description": "Enable or disable the item.\n\nParameters:\n\nenabled - True to enable the object; False to disable it.\n\nReturns: None"
    },
    "nuke.MenuItem().setIcon( icon)": {
        "prefix": "nuke.MenuItem().setIcon( icon)",
        "body": "nuke.MenuItem().setIcon(${1:icon})",
        "description": "Set the icon on this menu item.\n\nParameters:\n\nicon - the new icon as a path\n\nReturns: None"
    },
    "nuke.MenuItem().setScript( script)": {
        "prefix": "nuke.MenuItem().setScript( script)",
        "body": "nuke.MenuItem().setScript(${1:script})",
        "description": "Set the script to be executed for this menu item. Note: To call a \n  python script file, you can use the execfile() function. i.e: \n  menu.setScript(\"execfile('script.py')\")\n\nReturns: None"
    },
    "nuke.MenuItem().setShortcut( keySequence)": {
        "prefix": "nuke.MenuItem().setShortcut( keySequence)",
        "body": "nuke.MenuItem().setShortcut(${1:keySequence})",
        "description": "Set the keyboard shortcut on this menu item.\n\nParameters:\n\nkeySequence - the new shortcut in PortableText format, e.g. \n          \"Ctrl+Shift+P\"\n\nReturns: None"
    },
    "nuke.MenuItem().shortcut()": {
        "prefix": "nuke.MenuItem().shortcut()",
        "body": "nuke.MenuItem().shortcut()",
        "description": "Returns the keyboard shortcut on this menu item. The format of this is\n  the PortableText format. It will return a string such as \n  \"Ctrl+Shift+P\". Note that on Mac OS X the Command key is \n  equivalent to Ctrl.\n\nReturns: String"
    },
    "nuke.MultiView_Knob().fromScript(s)": {
        "prefix": "nuke.MultiView_Knob().fromScript(s)",
        "body": "nuke.MultiView_Knob().fromScript(${1:s})",
        "description": "Initialise from script s.\n\nReturns: True if succeeded, False otherwise\nOverrides:\n        Knob.fromScript"
    },
    "nuke.MultiView_Knob().notDefault()": {
        "prefix": "nuke.MultiView_Knob().notDefault()",
        "body": "nuke.MultiView_Knob().notDefault()",
        "description": "Returns ->\b True if set to its default value, False otherwise."
    },
    "nuke.MultiView_Knob().setValue(s)": {
        "prefix": "nuke.MultiView_Knob().setValue(s)",
        "body": "nuke.MultiView_Knob().setValue(${1:s})",
        "description": "Initialise from script s.\n\nReturns: True if succeeded, False otherwise\nTrue if successful, False if not.\nOverrides:\n        Knob.setValue"
    },
    "nuke.MultiView_Knob().toScript(quote, context=current)": {
        "prefix": "nuke.MultiView_Knob().toScript(quote, context=current)",
        "body": "nuke.MultiView_Knob().toScript(${1:quote}, context=${2:current})",
        "description": "Return the value of the knob in script syntax. Pass True for quote to \n  return results quoted in {}. Pass None for context to get results for all\n  views and key times (as stored in a .nk file).\n\nReturns: string\nOverrides:\n        Knob.toScript"
    },
    "nuke.MultiView_Knob().value(quote, context=current)": {
        "prefix": "nuke.MultiView_Knob().value(quote, context=current)",
        "body": "nuke.MultiView_Knob().value(${1:quote}, context=${2:current})",
        "description": "Return the value of the knob in script syntax. Pass True for quote to \n  return results quoted in {}. Pass None for context to get results for all\n  views and key times (as stored in a .nk file).\n\nReturns: string\nOverrides:\n        Knob.value"
    },
    "nuke.Node().Class()": {
        "prefix": "nuke.Node().Class()",
        "body": "nuke.Node().Class()",
        "description": "Returns: Class of node\nClass of node."
    },
    "nuke.Node().addKnob( k)": {
        "prefix": "nuke.Node().addKnob( k)",
        "body": "nuke.Node().addKnob(${1:k})",
        "description": "Add knob k to this node or panel.\n\nParameters:\n\nk - Knob.\n\nReturns: None\nNone."
    },
    "nuke.Node().allKnobs()": {
        "prefix": "nuke.Node().allKnobs()",
        "body": "nuke.Node().allKnobs()",
        "description": "Get a list of all knobs in this node, including nameless knobs.\nFor example:\n\n>>> b = nuke.nodes.Blur()\n>>> b.allKnobs()\n\nReturns: dict\nList of all knobs.\n          Note that this doesn't follow the links for Link_Knobs"
    },
    "nuke.Node().autoplace()": {
        "prefix": "nuke.Node().autoplace()",
        "body": "nuke.Node().autoplace()",
        "description": "Automatically place nodes, so they do not overlap.\n\nReturns: None\nNone."
    },
    "nuke.Node().bbox()": {
        "prefix": "nuke.Node().bbox()",
        "body": "nuke.Node().bbox()",
        "description": "Bounding box of the node.\n\nReturns: List of x, y, w, h\nList of x, y, w, h."
    },
    "nuke.Node().canSetInput( i, node)": {
        "prefix": "nuke.Node().canSetInput( i, node)",
        "body": "nuke.Node().canSetInput(${1:i}, ${2:node})",
        "description": "Check whether the output of 'node' can be connected to input i.\n\nParameters:\n\ni - Input number.\nnode - The node to be connected to input i.\n\nReturns: bool\nTrue if node can be connected, False otherwise."
    },
    "nuke.Node().channels()": {
        "prefix": "nuke.Node().channels()",
        "body": "nuke.Node().channels()",
        "description": "List channels output by this node.\n\nReturns: String list\nString list."
    },
    "nuke.Node().clones()": {
        "prefix": "nuke.Node().clones()",
        "body": "nuke.Node().clones()",
        "description": "Returns: Number of clones\nNumber of clones."
    },
    "nuke.Node().connectInput( i, node)": {
        "prefix": "nuke.Node().connectInput( i, node)",
        "body": "nuke.Node().connectInput(${1:i}, ${2:node})",
        "description": "Connect the output of 'node' to the i'th input or the next available \n  unconnected input. The requested input is tried first, but if it is \n  already set then subsequent inputs are tried until an unconnected one is \n  found, as when you drop a connection arrow onto a node in the GUI.\n\nParameters:\n\ni - Input number to try first.\nnode - The node to connect to input i.\n\nReturns: bool\nTrue if a connection is made, False otherwise."
    },
    "nuke.Node().deepSample( c, x, y, n)": {
        "prefix": "nuke.Node().deepSample( c, x, y, n)",
        "body": "nuke.Node().deepSample(${1:c}, ${2:x}, ${3:y}, ${4:n})",
        "description": "Return pixel values from a deep image. This requires the image to be \n  calculated, so performance may be very bad if this is placed into an \n  expression in a control panel.\n\nParameters:\n\nc - Channel name.\nx - Position to sample (X coordinate).\ny - Position to sample (Y coordinate).\nn - Sample index (between 0 and the number returned by \n          deepSampleCount() for this pixel, or -1 for the frontmost).\n\nReturns: Floating point value\nFloating point value."
    },
    "nuke.Node().deepSampleCount( x, y)": {
        "prefix": "nuke.Node().deepSampleCount( x, y)",
        "body": "nuke.Node().deepSampleCount(${1:x}, ${2:y})",
        "description": "Return number of samples for a pixel on a deep image. This requires \n  the image to be calculated, so performance may be very bad if this is \n  placed into an expression in a control panel.\n\nParameters:\n\nx - Position to sample (X coordinate).\ny - Position to sample (Y coordinate).\n\nReturns: Integer value\nInteger value."
    },
    "nuke.Node().dependencies( what)": {
        "prefix": "nuke.Node().dependencies( what)",
        "body": "nuke.Node().dependencies(${1:what})",
        "description": "List all nodes referred to by this node. 'what' is an optional integer (see below).\nYou can use the following constants or'ed together to select what types of dependencies are looked for:\n         nuke.EXPRESSIONS = expressions\n         nuke.INPUTS = visible input pipes\n         nuke.HIDDEN_INPUTS = hidden input pipes.\nThe default is to look for all types of connections.\n\nExample:\nnuke.toNode('Blur1').dependencies( nuke.INPUTS | nuke.EXPRESSIONS )\n@param what: Or'ed constant of nuke.EXPRESSIONS, nuke.INPUTS and nuke.HIDDEN_INPUTS to select the types of dependencies. The default is to look for all types of connections.\n@return: List of nodes.\n\nReturns: List of nodes"
    },
    "nuke.Node().dependent( what, forceEvaluate)": {
        "prefix": "nuke.Node().dependent( what, forceEvaluate)",
        "body": "nuke.Node().dependent(${1:what}, ${2:forceEvaluate})",
        "description": "List all nodes that read information from this node.  'what' is an optional integer:\n         You can use any combination of the following constants or'ed together to select what types of dependent nodes to look for:\n                 nuke.EXPRESSIONS = expressions\n                 nuke.INPUTS = visible input pipes\n                 nuke.HIDDEN_INPUTS = hidden input pipes.\nThe default is to look for all types of connections.\n\nforceEvaluate is an optional boolean defaulting to True. When this parameter is true, it forces a re-evaluation of the entire tree. \nThis can be expensive, but otherwise could give incorrect results if nodes are expression-linked. \n\nExample:\nnuke.toNode('Blur1').dependent( nuke.INPUTS | nuke.EXPRESSIONS )\n@param what: Or'ed constant of nuke.EXPRESSIONS, nuke.INPUTS and nuke.HIDDEN_INPUTS to select the types of dependent nodes. The default is to look for all types of connections.\n@param forceEvaluate: Specifies whether a full tree evaluation will take place. Defaults to True.\n@return: List of nodes.\n\nReturns: List of nodes"
    },
    "nuke.Node().error()": {
        "prefix": "nuke.Node().error()",
        "body": "nuke.Node().error()",
        "description": "True if the node or any in its input tree have an error, or False \n  otherwise.\nError state of the node and its input tree.  Deprecated; use hasError \n  or treeHasError instead. Note that this will always return false for \n  viewers, which cannot generate their input trees.  Instead, choose an \n  input of the viewer (e.g. the active one), and call treeHasError() on \n  that.\n\nReturns: bool"
    },
    "nuke.Node().firstFrame()": {
        "prefix": "nuke.Node().firstFrame()",
        "body": "nuke.Node().firstFrame()",
        "description": "First frame in frame range for this node.\n\nReturns: int\nint."
    },
    "nuke.Node().forceValidate()": {
        "prefix": "nuke.Node().forceValidate()",
        "body": "nuke.Node().forceValidate()",
        "description": "Force the node to validate itself, updating its hash.\n\nReturns ->\b None"
    },
    "nuke.Node().format()": {
        "prefix": "nuke.Node().format()",
        "body": "nuke.Node().format()",
        "description": "Format of the node.\n\nReturns: Format\nFormat."
    },
    "nuke.Node().frameRange()": {
        "prefix": "nuke.Node().frameRange()",
        "body": "nuke.Node().frameRange()",
        "description": "Frame range for this node.\n\nReturns: FrameRange\nFrameRange."
    },
    "nuke.Node().fullName()": {
        "prefix": "nuke.Node().fullName()",
        "body": "nuke.Node().fullName()",
        "description": "Get the name of this node and any groups enclosing it in \n  'group.group.name' form.\n\nReturns: str\nThe fully-qualified name of this node, as a string."
    },
    "nuke.Node().getNumKnobs()": {
        "prefix": "nuke.Node().getNumKnobs()",
        "body": "nuke.Node().getNumKnobs()",
        "description": "Returns: The number of knobs\nThe number of knobs."
    },
    "nuke.Node().hasError()": {
        "prefix": "nuke.Node().hasError()",
        "body": "nuke.Node().hasError()",
        "description": "True if the node itself has an error, regardless of the state of the \n  ops in its input tree, or False otherwise.\nError state of the node itself, regardless of the state of the ops in \n  its input tree. Note that an error on a node may not appear if there is \n  an error somewhere in its input tree, because it may not be possible to \n  validate the node itself correctly in that case.\n\nReturns: bool"
    },
    "nuke.Node().height()": {
        "prefix": "nuke.Node().height()",
        "body": "nuke.Node().height()",
        "description": "Height of the node.\n\nReturns: int\nint."
    },
    "nuke.Node().help()": {
        "prefix": "nuke.Node().help()",
        "body": "nuke.Node().help()",
        "description": "Returns: str\nHelp for the node."
    },
    "nuke.Node().hideControlPanel()": {
        "prefix": "nuke.Node().hideControlPanel()",
        "body": "nuke.Node().hideControlPanel()",
        "description": "Returns: None\nNone"
    },
    "nuke.Node().input( i)": {
        "prefix": "nuke.Node().input( i)",
        "body": "nuke.Node().input(${1:i})",
        "description": "Parameters:\n\ni - Input number.\n\nReturns: The i'th input\nThe i'th input."
    },
    "nuke.Node().inputs()": {
        "prefix": "nuke.Node().inputs()",
        "body": "nuke.Node().inputs()",
        "description": "Returns: Gets the maximum number of connected inputs\nNumber of the highest connected input + 1. If inputs 0, 1, and 3 \n          are connected, this will return 4."
    },
    "nuke.Node().isSelected()": {
        "prefix": "nuke.Node().isSelected()",
        "body": "nuke.Node().isSelected()",
        "description": "Returns the current selection state of the node.  This is the same as \n  checking the 'selected' knob.\n\nReturns: bool\nTrue if selected, or False if not."
    },
    "nuke.Node().knob( p)": {
        "prefix": "nuke.Node().knob( p)",
        "body": "nuke.Node().knob(${1:p})",
        "description": "Parameters:\n\np - A string or an integer.\n\nReturns: The knob named p or the pth knob\nThe knob named p or the pth knob.\n          Note that this follows the links for Link_Knobs"
    },
    "nuke.Node().knobs()": {
        "prefix": "nuke.Node().knobs()",
        "body": "nuke.Node().knobs()",
        "description": "Get a dictionary of (name, knob) pairs for all knobs in this node.\nFor example:\n\n>>> b = nuke.nodes.Blur()\n>>> b.knobs()\n\nReturns: dict\nDictionary of all knobs.\n          Note that this doesn't follow the links for Link_Knobs"
    },
    "nuke.Node().lastFrame()": {
        "prefix": "nuke.Node().lastFrame()",
        "body": "nuke.Node().lastFrame()",
        "description": "Last frame in frame range for this node.\n\nReturns: int\nint."
    },
    "nuke.Node().linkableKnobs( knobType)": {
        "prefix": "nuke.Node().linkableKnobs( knobType)",
        "body": "nuke.Node().linkableKnobs(${1:knobType})",
        "description": "Returns a list of any knobs that may be linked to from the node as \n  well as some meta information about the knob. This may include whether \n  the knob is enabled and whether it should be used for absolute or \n  relative values. Not all of these variables may make sense for all \n  knobs..\n\nParameters:\n\nknobType, A, KnobType, describing, the, type, of, knobs, you, want.@return - A list of LinkableKnobInfo that may be empty .\n\nReturns: List"
    },
    "nuke.Node().maxInputs()": {
        "prefix": "nuke.Node().maxInputs()",
        "body": "nuke.Node().maxInputs()",
        "description": "Returns: Maximum number of inputs this node can have\nMaximum number of inputs this node can have."
    },
    "nuke.Node().maxOutputs()": {
        "prefix": "nuke.Node().maxOutputs()",
        "body": "nuke.Node().maxOutputs()",
        "description": "Returns: Maximum number of outputs this node can have\nMaximum number of outputs this node can have."
    },
    "nuke.Node().maximumInputs()": {
        "prefix": "nuke.Node().maximumInputs()",
        "body": "nuke.Node().maximumInputs()",
        "description": "Returns: Maximum number of inputs this node can have\nMaximum number of inputs this node can have."
    },
    "nuke.Node().maximumOutputs()": {
        "prefix": "nuke.Node().maximumOutputs()",
        "body": "nuke.Node().maximumOutputs()",
        "description": "Returns: Maximum number of outputs this node can have\nMaximum number of outputs this node can have."
    },
    "nuke.Node().metadata( key, time, view)": {
        "prefix": "nuke.Node().metadata( key, time, view)",
        "body": "nuke.Node().metadata(${1:key}, ${2:time}, ${3:view})",
        "description": "Return the metadata item for key on this node at current output \n  context, or at optional time and view. If key is not specified a \n  dictionary containing all key/value pairs is returned. None is returned \n  if key does not exist on this node.\n\nParameters:\n\nkey - Optional name of the metadata key to retrieve.\ntime - Optional time to evaluate at (default is taken from node's \n          current output context).\nview - Optional view to evaluate at (default is taken from node's \n          current output context).\n\nReturns: value or dict\nThe requested metadata value, a dictionary containing all keys if\n          a key name is not provided, or None if the specified key is not \n          matched."
    },
    "nuke.Node().minInputs()": {
        "prefix": "nuke.Node().minInputs()",
        "body": "nuke.Node().minInputs()",
        "description": "Returns: Minimum number of inputs this node can have\nMinimum number of inputs this node can have."
    },
    "nuke.Node().minimumInputs()": {
        "prefix": "nuke.Node().minimumInputs()",
        "body": "nuke.Node().minimumInputs()",
        "description": "Returns: Minimum number of inputs this node can have\nMinimum number of inputs this node can have."
    },
    "nuke.Node().name()": {
        "prefix": "nuke.Node().name()",
        "body": "nuke.Node().name()",
        "description": "Returns: str\nName of node."
    },
    "nuke.Node().numKnobs()": {
        "prefix": "nuke.Node().numKnobs()",
        "body": "nuke.Node().numKnobs()",
        "description": "Returns: The number of knobs\nThe number of knobs."
    },
    "nuke.Node().opHashes()": {
        "prefix": "nuke.Node().opHashes()",
        "body": "nuke.Node().opHashes()",
        "description": "Returns a list of hash values, one for each op in this node.\n\nReturns ->\b list of int"
    },
    "nuke.Node().optionalInput()": {
        "prefix": "nuke.Node().optionalInput()",
        "body": "nuke.Node().optionalInput()",
        "description": "Returns: Number of first optional input\nNumber of first optional input."
    },
    "nuke.Node().pixelAspect()": {
        "prefix": "nuke.Node().pixelAspect()",
        "body": "nuke.Node().pixelAspect()",
        "description": "Pixel Aspect ratio of the node.\n\nReturns: int\nfloat."
    },
    "nuke.Node().proxy()": {
        "prefix": "nuke.Node().proxy()",
        "body": "nuke.Node().proxy()",
        "description": "Returns: bool\nTrue if proxy is enabled, False otherwise."
    },
    "nuke.Node().readKnobs( s)": {
        "prefix": "nuke.Node().readKnobs( s)",
        "body": "nuke.Node().readKnobs(${1:s})",
        "description": "Read the knobs from a string (TCL syntax).\n\nParameters:\n\ns - A string.\n\nReturns: None\nNone."
    },
    "nuke.Node().redraw()": {
        "prefix": "nuke.Node().redraw()",
        "body": "nuke.Node().redraw()",
        "description": "Force a redraw of the node.\n\nReturns: None\nNone."
    },
    "nuke.Node().removeKnob( k)": {
        "prefix": "nuke.Node().removeKnob( k)",
        "body": "nuke.Node().removeKnob(${1:k})",
        "description": "Remove knob k from this node or panel. Throws a ValueError exception \n  if k is not found on the node.\n\nParameters:\n\nk - Knob.\n\nReturns: None\nNone."
    },
    "nuke.Node().resetKnobsToDefault()": {
        "prefix": "nuke.Node().resetKnobsToDefault()",
        "body": "nuke.Node().resetKnobsToDefault()",
        "description": "Reset all the knobs to their default values.\n\nReturns ->\b None"
    },
    "nuke.Node().running()": {
        "prefix": "nuke.Node().running()",
        "body": "nuke.Node().running()",
        "description": "Class method.\n\nReturns: Node rendering when paralled threads are running or None\nNode rendering when paralled threads are running or None."
    },
    "nuke.Node().sample( c, x, y, dx, dy)": {
        "prefix": "nuke.Node().sample( c, x, y, dx, dy)",
        "body": "nuke.Node().sample(${1:c}, ${2:x}, ${3:y}, ${4:dx}, ${5:dy})",
        "description": "Return pixel values from an image. This requires the image to be \n  calculated, so performance may be very bad if this is placed into an \n  expression in a control panel. Produces a cubic filtered result. Any \n  sizes less than 1, including 0, produce the same filtered result, this is\n  correct based on sampling theory. Note that integers are at the corners \n  of pixels, to center on a pixel add .5 to both coordinates. If the \n  optional dx,dy are not given then the exact value of the square pixel \n  that x,y lands in is returned. This is also called 'impulse \n  filtering'.\n\nParameters:\n\nc - Channel name.\nx - Centre of the area to sample (X coordinate).\ny - Centre of the area to sample (Y coordinate).\ndx - Optional size of the area to sample (X coordinate).\ndy - Optional size of the area to sample (Y coordinate).\nframe - Optional frame to sample the node at.\n\nReturns: Floating point value\nFloating point value."
    },
    "nuke.Node().screenHeight()": {
        "prefix": "nuke.Node().screenHeight()",
        "body": "nuke.Node().screenHeight()",
        "description": "Height of the node when displayed on screen in the DAG, at 1:1 zoom, \n  in pixels.\n\nReturns: int\nint."
    },
    "nuke.Node().screenWidth()": {
        "prefix": "nuke.Node().screenWidth()",
        "body": "nuke.Node().screenWidth()",
        "description": "Width of the node when displayed on screen in the DAG, at 1:1 zoom, in\n  pixels.\n\nReturns: int\nint."
    },
    "nuke.Node().setInput( i, node)": {
        "prefix": "nuke.Node().setInput( i, node)",
        "body": "nuke.Node().setInput(${1:i}, ${2:node})",
        "description": "Connect input i to node if canSetInput() returns true.\n\nParameters:\n\ni - Input number.\nnode - The node to connect to input i.\n\nReturns: bool\nTrue if canSetInput() returns true, or if the input is already \n          correct."
    },
    "nuke.Node().setName( name, uncollide=True, updateExpressions=False)": {
        "prefix": "nuke.Node().setName( name, uncollide=True, updateExpressions=False)",
        "body": "nuke.Node().setName(${1:name}, uncollide=${2:True}, updateExpressions=${3:False})",
        "description": "Set name of the node and resolve name collisions if optional named \n  argument 'uncollide' is True.\n\nParameters:\n\nname - A string.\nuncollide - Optional boolean to resolve name collisions. Defaults to True.\nupdateExpressions - Optional boolean to update expressions in other nodes to point at\n          the new name. Defaults to False.\n\nReturns: None\nNone"
    },
    "nuke.Node().setSelected( selected)": {
        "prefix": "nuke.Node().setSelected( selected)",
        "body": "nuke.Node().setSelected(${1:selected})",
        "description": "Set the selection state of the node.  This is the same as changing the\n  'selected' knob.\n\nParameters:\n\nselected - New selection state - True or False.\n\nReturns: None\nNone."
    },
    "nuke.Node().setXYpos( x, y)": {
        "prefix": "nuke.Node().setXYpos( x, y)",
        "body": "nuke.Node().setXYpos(${1:x}, ${2:y})",
        "description": "Set the (x, y) position of node in node graph.\n\nParameters:\n\nx - The x position of node in node graph.\ny - The y position of node in node graph.\n\nReturns: None\nNone."
    },
    "nuke.Node().setXpos( x)": {
        "prefix": "nuke.Node().setXpos( x)",
        "body": "nuke.Node().setXpos(${1:x})",
        "description": "Set the x position of node in node graph.\n\nParameters:\n\nx - The x position of node in node graph.\n\nReturns: None\nNone."
    },
    "nuke.Node().setYpos( y)": {
        "prefix": "nuke.Node().setYpos( y)",
        "body": "nuke.Node().setYpos(${1:y})",
        "description": "Set the y position of node in node graph.\n\nParameters:\n\ny - The y position of node in node graph.\n\nReturns: None\nNone."
    },
    "nuke.Node().showControlPanel( forceFloat= false)": {
        "prefix": "nuke.Node().showControlPanel( forceFloat= false)",
        "body": "nuke.Node().showControlPanel(forceFloat=${1: false})",
        "description": "Parameters:\n\nforceFloat - Optional python object. If it evaluates to True the control panel\n          will always open as a floating panel. Default is False.\n\nReturns: None\nNone"
    },
    "nuke.Node().showInfo( s)": {
        "prefix": "nuke.Node().showInfo( s)",
        "body": "nuke.Node().showInfo(${1:s})",
        "description": "Creates a dialog box showing the result of script s.\n\nParameters:\n\ns - A string.\n\nReturns: None\nNone."
    },
    "nuke.Node().shown()": {
        "prefix": "nuke.Node().shown()",
        "body": "nuke.Node().shown()",
        "description": "This can be used to skip updates that are not visible to the user.\n\nReturns: true if the properties panel is open\ntrue if the properties panel is open. This can be used to skip \n          updates that are not visible to the user."
    },
    "nuke.Node().treeHasError()": {
        "prefix": "nuke.Node().treeHasError()",
        "body": "nuke.Node().treeHasError()",
        "description": "True if the node or any in its input tree have an error, or False \n  otherwise.\nError state of the node and its input tree. Note that this will always\n  return false for viewers, which cannot generate their input trees.  \n  Instead, choose an input of the viewer (e.g. the active one), and call \n  treeHasError() on that.\n\nReturns: bool"
    },
    "nuke.Node().width()": {
        "prefix": "nuke.Node().width()",
        "body": "nuke.Node().width()",
        "description": "Width of the node.\n\nReturns: int\nint."
    },
    "nuke.Node().writeKnobs( i)": {
        "prefix": "nuke.Node().writeKnobs( i)",
        "body": "nuke.Node().writeKnobs(${1:i})",
        "description": "Return a tcl list. If TO_SCRIPT | TO_VALUE is not on, this is a simple list\nof knob names. If it is on, it is an alternating list of knob names\nand the output of to_script().\n\nFlags can be any of these or'd together:\n- nuke.TO_SCRIPT produces to_script(0) values\n- nuke.TO_VALUE produces to_script(context) values\n- nuke.WRITE_NON_DEFAULT_ONLY skips knobs with not_default() false\n- nuke.WRITE_USER_KNOB_DEFS writes addUserKnob commands for user knobs\n- nuke.WRITE_ALL writes normally invisible knobs like name, xpos, ypos\n\n@param i: The set of flags or'd together. Default is TO_SCRIPT | TO_VALUE.\n@return: String in .nk form.\n\nReturns: String in .nk form"
    },
    "nuke.Node().xpos()": {
        "prefix": "nuke.Node().xpos()",
        "body": "nuke.Node().xpos()",
        "description": "Returns: X position of node in node graph\nX position of node in node graph."
    },
    "nuke.Node().ypos()": {
        "prefix": "nuke.Node().ypos()",
        "body": "nuke.Node().ypos()",
        "description": "Returns: Y position of node in node graph\nY position of node in node graph."
    },
    "nuke.Obsolete_Knob().setValue( val, chan)": {
        "prefix": "nuke.Obsolete_Knob().setValue( val, chan)",
        "body": "nuke.Obsolete_Knob().setValue(${1:val}, ${2:chan})",
        "description": "Sets the value 'val' at channel 'chan'.\n\nReturns: bool\nTrue if successful, False if not.\nOverrides:\n        Knob.setValue\n(inherited documentation)"
    },
    "nuke.Obsolete_Knob().value(...)": {
        "prefix": "nuke.Obsolete_Knob().value(...)",
        "body": "nuke.Obsolete_Knob().value(${1:...})",
        "description": "Return value at the current frame for channel 'c'.\n\nOverrides:\n        Knob.value\n(inherited documentation)"
    },
    "nuke.OutputContext().frame()": {
        "prefix": "nuke.OutputContext().frame()",
        "body": "nuke.OutputContext().frame()",
        "description": "Return frame value.\n\nReturns ->\b float"
    },
    "nuke.OutputContext().setFrame(f)": {
        "prefix": "nuke.OutputContext().setFrame(f)",
        "body": "nuke.OutputContext().setFrame(${1:f})",
        "description": "Set frame value. The f argument is a float.\n\nReturns: True"
    },
    "nuke.OutputContext().setView(n)": {
        "prefix": "nuke.OutputContext().setView(n)",
        "body": "nuke.OutputContext().setView(${1:n})",
        "description": "Set view number. The n argument is an integer in the range of 0 to \n  number of views.\n\nReturns: True"
    },
    "nuke.OutputContext().view()": {
        "prefix": "nuke.OutputContext().view()",
        "body": "nuke.OutputContext().view()",
        "description": "Return view number.\n\nReturns ->\b int"
    },
    "nuke.OutputContext().viewcount()": {
        "prefix": "nuke.OutputContext().viewcount()",
        "body": "nuke.OutputContext().viewcount()",
        "description": "Return number of views.\n\nReturns ->\b int"
    },
    "nuke.OutputContext().viewname(n)": {
        "prefix": "nuke.OutputContext().viewname(n)",
        "body": "nuke.OutputContext().viewname(${1:n})",
        "description": "Return name of the view. The n argument is an integer in the range of \n  0 to number of views.\n\nReturns: string"
    },
    "nuke.OutputContext().viewshort(n)": {
        "prefix": "nuke.OutputContext().viewshort(n)",
        "body": "nuke.OutputContext().viewshort(${1:n})",
        "description": "Return short name of the view. The n argument is an integer in the \n  range of 0 to number of views.\n\nReturns: string"
    },
    "nuke.Panel().addBooleanCheckBox( name, value)": {
        "prefix": "nuke.Panel().addBooleanCheckBox( name, value)",
        "body": "nuke.Panel().addBooleanCheckBox(${1:name}, ${2:value})",
        "description": "Add a boolean check box knob to the panel.\n\nParameters:\n\nname - The name for the new knob.\nvalue - The initial value for the new knob.\n\nReturns: True if successful\nTrue if successful."
    },
    "nuke.Panel().addButton( name, value)": {
        "prefix": "nuke.Panel().addButton( name, value)",
        "body": "nuke.Panel().addButton(${1:name}, ${2:value})",
        "description": "Add a button to the panel.\n\nParameters:\n\nname - The name for the new knob.\nvalue - The initial value for the new knob.\n\nReturns: True if successful\nTrue if successful."
    },
    "nuke.Panel().addClipnameSearch( name, value)": {
        "prefix": "nuke.Panel().addClipnameSearch( name, value)",
        "body": "nuke.Panel().addClipnameSearch(${1:name}, ${2:value})",
        "description": "Add a clipname search knob to the panel.\n\nParameters:\n\nname - The name for the new knob.\nvalue - The initial value for the new knob.\n\nReturns: True if successful\nTrue if successful."
    },
    "nuke.Panel().addEnumerationPulldown( name, value)": {
        "prefix": "nuke.Panel().addEnumerationPulldown( name, value)",
        "body": "nuke.Panel().addEnumerationPulldown(${1:name}, ${2:value})",
        "description": "Add a pulldown menu to the panel.\n\nParameters:\n\nname - The name for the new knob.\nvalue - The initial value for the new knob.\n\nReturns: True if successful\nTrue if successful."
    },
    "nuke.Panel().addExpressionInput( name, value)": {
        "prefix": "nuke.Panel().addExpressionInput( name, value)",
        "body": "nuke.Panel().addExpressionInput(${1:name}, ${2:value})",
        "description": "Add an expression evaluator to the panel.\n\nParameters:\n\nname - The name for the new knob.\nvalue - The initial value for the new knob.\n\nReturns: True if successful\nTrue if successful."
    },
    "nuke.Panel().addFilenameSearch( name, value)": {
        "prefix": "nuke.Panel().addFilenameSearch( name, value)",
        "body": "nuke.Panel().addFilenameSearch(${1:name}, ${2:value})",
        "description": "Add a filename search knob to the panel.\n\nParameters:\n\nname - The name for the new knob.\nvalue - The initial value for the new knob.\n\nReturns: True if successful\nTrue if successful."
    },
    "nuke.Panel().addMultilineTextInput( name, value)": {
        "prefix": "nuke.Panel().addMultilineTextInput( name, value)",
        "body": "nuke.Panel().addMultilineTextInput(${1:name}, ${2:value})",
        "description": "Add a multi-line text knob to the panel.\n\nParameters:\n\nname - The name for the new knob.\nvalue - The initial value for the new knob.\n\nReturns: True if successful\nTrue if successful."
    },
    "nuke.Panel().addNotepad( name, value)": {
        "prefix": "nuke.Panel().addNotepad( name, value)",
        "body": "nuke.Panel().addNotepad(${1:name}, ${2:value})",
        "description": "Add a text edit widget to the panel.\n\nParameters:\n\nname - The name for the new knob.\nvalue - The initial value for the new knob.\n\nReturns: True if successful\nTrue if successful."
    },
    "nuke.Panel().addPasswordInput( name, value)": {
        "prefix": "nuke.Panel().addPasswordInput( name, value)",
        "body": "nuke.Panel().addPasswordInput(${1:name}, ${2:value})",
        "description": "Add a password input knob to the panel.\n\nParameters:\n\nname - The name for the new knob.\nvalue - The initial value for the new knob.\n\nReturns: True if successful\nTrue if successful."
    },
    "nuke.Panel().addRGBColorChip( name, value)": {
        "prefix": "nuke.Panel().addRGBColorChip( name, value)",
        "body": "nuke.Panel().addRGBColorChip(${1:name}, ${2:value})",
        "description": "Add a color chooser to the panel.\n\nParameters:\n\nname - The name for the new knob.\nvalue - The initial value for the new knob.\n\nReturns: True if successful\nTrue if successful."
    },
    "nuke.Panel().addScriptCommand( name, value)": {
        "prefix": "nuke.Panel().addScriptCommand( name, value)",
        "body": "nuke.Panel().addScriptCommand(${1:name}, ${2:value})",
        "description": "Add a script command evaluator to the panel.\n\nParameters:\n\nname - The name for the new knob.\nvalue - The initial value for the new knob.\n\nReturns: True if successful\nTrue if successful."
    },
    "nuke.Panel().addSingleLineInput( name, value)": {
        "prefix": "nuke.Panel().addSingleLineInput( name, value)",
        "body": "nuke.Panel().addSingleLineInput(${1:name}, ${2:value})",
        "description": "Add a single-line input knob to the panel.\n\nParameters:\n\nname - The name for the new knob.\nvalue - The initial value for the new knob.\n\nReturns: True if successful\nTrue if successful."
    },
    "nuke.Panel().addTextFontPulldown( name, value)": {
        "prefix": "nuke.Panel().addTextFontPulldown( name, value)",
        "body": "nuke.Panel().addTextFontPulldown(${1:name}, ${2:value})",
        "description": "Add a font chooser to the panel.\n\nParameters:\n\nname - The name for the new knob.\nvalue - The initial value for the new knob.\n\nReturns: True if successful\nTrue if successful."
    },
    "nuke.Panel().clear()": {
        "prefix": "nuke.Panel().clear()",
        "body": "nuke.Panel().clear()",
        "description": "Clear all panel attributes.\n\nReturns ->\b None"
    },
    "nuke.Panel().execute( name)": {
        "prefix": "nuke.Panel().execute( name)",
        "body": "nuke.Panel().execute(${1:name})",
        "description": "Execute the script command associated with a particular label and \n  return the result as a string.\n\nParameters:\n\nname - The name of the script field to execute.\n\nReturns: The result of the script as a string, or None if it fails\nThe result of the script as a string, or None if it fails."
    },
    "nuke.Panel().setTitle( val)": {
        "prefix": "nuke.Panel().setTitle( val)",
        "body": "nuke.Panel().setTitle(${1:val})",
        "description": "Set the current title for the panel.\n\nParameters:\n\nval - The title as a string.\n\nReturns: True if successful\nTrue if successful."
    },
    "nuke.Panel().setWidth( val)": {
        "prefix": "nuke.Panel().setWidth( val)",
        "body": "nuke.Panel().setWidth(${1:val})",
        "description": "Set the width of the panel.\n\nParameters:\n\nval - The width as an int.\n\nReturns: True if successful\nTrue if successful."
    },
    "nuke.Panel().show()": {
        "prefix": "nuke.Panel().show()",
        "body": "nuke.Panel().show()",
        "description": "Display the panel.\n\nReturns: An int value indicating how the dialog was closed (normally, or \n      cancelled)\nAn int value indicating how the dialog was closed (normally, or \n          cancelled)."
    },
    "nuke.Panel().title()": {
        "prefix": "nuke.Panel().title()",
        "body": "nuke.Panel().title()",
        "description": "Get the current title for the panel.\n\nReturns: The title as a string\nThe title as a string."
    },
    "nuke.Panel().value( name)": {
        "prefix": "nuke.Panel().value( name)",
        "body": "nuke.Panel().value(${1:name})",
        "description": "Get the value of a particular control in the panel.\n\nParameters:\n\nname - The name of the knob to get a value from.\n\nReturns: The value for the field if any, otherwise None\nThe value for the field if any, otherwise None."
    },
    "nuke.Panel().width()": {
        "prefix": "nuke.Panel().width()",
        "body": "nuke.Panel().width()",
        "description": "Get the width of the panel.\n\nReturns: The width as an int\nThe width as an int."
    },
    "nuke.PanelNode().addKnob( k)": {
        "prefix": "nuke.PanelNode().addKnob( k)",
        "body": "nuke.PanelNode().addKnob(${1:k})",
        "description": "Add knob k to this node or panel.\n\nParameters:\n\nk - Knob.\n\nReturns: None\nNone."
    },
    "nuke.PanelNode().createWidget(...)": {
        "prefix": "nuke.PanelNode().createWidget(...)",
        "body": "nuke.PanelNode().createWidget(${1:...})",
        "description": "Create the widget for the panel"
    },
    "nuke.PanelNode().knobs()": {
        "prefix": "nuke.PanelNode().knobs()",
        "body": "nuke.PanelNode().knobs()",
        "description": "Get a dictionary of (name, knob) pairs for all knobs in this node.\nFor example:\n\n>>> b = nuke.nodes.Blur()\n>>> b.knobs()\n\nReturns: dict\nDictionary of all knobs.\n          Note that this doesn't follow the links for Link_Knobs"
    },
    "nuke.PanelNode().readKnobs( s)": {
        "prefix": "nuke.PanelNode().readKnobs( s)",
        "body": "nuke.PanelNode().readKnobs(${1:s})",
        "description": "Read the knobs from a string (TCL syntax).\n\nParameters:\n\ns - A string.\n\nReturns: None\nNone."
    },
    "nuke.PanelNode().removeKnob( k)": {
        "prefix": "nuke.PanelNode().removeKnob( k)",
        "body": "nuke.PanelNode().removeKnob(${1:k})",
        "description": "Remove knob k from this node or panel. Throws a ValueError exception \n  if k is not found on the node.\n\nParameters:\n\nk - Knob.\n\nReturns: None\nNone."
    },
    "nuke.PanelNode().writeKnobs( i)": {
        "prefix": "nuke.PanelNode().writeKnobs( i)",
        "body": "nuke.PanelNode().writeKnobs(${1:i})",
        "description": "Return a tcl list. If TO_SCRIPT | TO_VALUE is not on, this is a simple list\nof knob names. If it is on, it is an alternating list of knob names\nand the output of to_script().\n\nFlags can be any of these or'd together:\n- nuke.TO_SCRIPT produces to_script(0) values\n- nuke.TO_VALUE produces to_script(context) values\n- nuke.WRITE_NON_DEFAULT_ONLY skips knobs with not_default() false\n- nuke.WRITE_USER_KNOB_DEFS writes addUserKnob commands for user knobs\n- nuke.WRITE_ALL writes normally invisible knobs like name, xpos, ypos\n\n@param i: The set of flags or'd together. Default is TO_SCRIPT | TO_VALUE.\n@return: String in .nk form.\n\nReturns: String in .nk form"
    },
    "nuke.Password_Knob().getText()": {
        "prefix": "nuke.Password_Knob().getText()",
        "body": "nuke.Password_Knob().getText()",
        "description": "Return text associated with knob.\n\nReturns ->\b string"
    },
    "nuke.Password_Knob().setValue( val, view='default')": {
        "prefix": "nuke.Password_Knob().setValue( val, view='default')",
        "body": "nuke.Password_Knob().setValue(${1:val}, view=${2:'default'})",
        "description": "Set value of knob.\n\nParameters:\n\nval - The new value.\nview - Optional parameter specifying which view to set the value for. If\n          omitted, the value will be set for the default view.\n\nReturns: None\nNone\nOverrides:\n        Knob.setValue"
    },
    "nuke.Password_Knob().value()": {
        "prefix": "nuke.Password_Knob().value()",
        "body": "nuke.Password_Knob().value()",
        "description": "Get the value of this knob as a string.\n\nReturns: str\nString value.\nOverrides:\n        Knob.value"
    },
    "nuke.Precomp().reload()": {
        "prefix": "nuke.Precomp().reload()",
        "body": "nuke.Precomp().reload()",
        "description": "Precomp Node reload()\n\nReturns: None\nNone"
    },
    "nuke.ProgressTask().isCancelled()": {
        "prefix": "nuke.ProgressTask().isCancelled()",
        "body": "nuke.ProgressTask().isCancelled()",
        "description": "Returns ->\b True if the user has requested the task to be cancelled."
    },
    "nuke.ProgressTask().setMessage( s)": {
        "prefix": "nuke.ProgressTask().setMessage( s)",
        "body": "nuke.ProgressTask().setMessage(${1:s})",
        "description": "set the message for the progress task\n\nReturns ->\b None"
    },
    "nuke.ProgressTask().setProgress( i)": {
        "prefix": "nuke.ProgressTask().setProgress( i)",
        "body": "nuke.ProgressTask().setProgress(${1:i})",
        "description": "i is an integer representing the current progress\n\nReturns ->\b None"
    },
    "nuke.Pulldown_Knob().commands(n)": {
        "prefix": "nuke.Pulldown_Knob().commands(n)",
        "body": "nuke.Pulldown_Knob().commands(${1:n})",
        "description": "Return command n. The argument n is an integer and in the range of 0 \n  and numValues.\n\nReturns: string"
    },
    "nuke.Pulldown_Knob().itemName(n)": {
        "prefix": "nuke.Pulldown_Knob().itemName(n)",
        "body": "nuke.Pulldown_Knob().itemName(${1:n})",
        "description": "Return name of item n. The argument n is an integer and in the range \n  of 0 and numValues.\n\nReturns: string"
    },
    "nuke.Pulldown_Knob().numValues()": {
        "prefix": "nuke.Pulldown_Knob().numValues()",
        "body": "nuke.Pulldown_Knob().numValues()",
        "description": "Return number of values.\n\nReturns: int\nOverrides:\n        Enumeration_Knob.numValues"
    },
    "nuke.Pulldown_Knob().setValues( items)": {
        "prefix": "nuke.Pulldown_Knob().setValues( items)",
        "body": "nuke.Pulldown_Knob().setValues(${1:items})",
        "description": "(Re)initialise knob to the list of items.\n\nParameters:\n\nitems - Dictionary of name/value pairs.\nsort - Optional parameter as to whether to sort the names.\n\nReturns: None\nNone. Example: w = nuke.nodes.NoOp() k = \n          nuke.Pulldown_Knob('kname', 'klabel') \n          k.setValues({'label/command' : 'eval(\"3*2\")'}) \n          w.addKnob(k) k = w['kname']\nOverrides:\n        Enumeration_Knob.setValues"
    },
    "nuke.Pulldown_Knob().value()": {
        "prefix": "nuke.Pulldown_Knob().value()",
        "body": "nuke.Pulldown_Knob().value()",
        "description": "Current value.\n\nParameters:\n\nindex - Optional index. Default is 0.\nview - Optional view.\ntime - Optional time.\n\nReturns: String\nString. Example: w = nuke.nodes.Write() k = w['file_type'] \n          k.value()\nOverrides:\n        Knob.value\n(inherited documentation)"
    },
    "nuke.PyCustom_Knob().getObject(...)": {
        "prefix": "nuke.PyCustom_Knob().getObject(...)",
        "body": "nuke.PyCustom_Knob().getObject(${1:...})",
        "description": "Returns the custom knob object as created in the by the 'command' \n      argument to the PyCuston_Knob constructor."
    },
    "nuke.PythonCustomKnob().getObject(...)": {
        "prefix": "nuke.PythonCustomKnob().getObject(...)",
        "body": "nuke.PythonCustomKnob().getObject(${1:...})",
        "description": "Returns the custom knob object as created in the by the 'command' \n      argument to the PyCuston_Knob constructor."
    },
    "nuke.Root().addView( s)": {
        "prefix": "nuke.Root().addView( s)",
        "body": "nuke.Root().addView(${1:s})",
        "description": "Add view.\n\nParameters:\n\ns - Name of view.\n\nReturns: None\nNone."
    },
    "nuke.Root().canSetInput( i, node)": {
        "prefix": "nuke.Root().canSetInput( i, node)",
        "body": "nuke.Root().canSetInput(${1:i}, ${2:node})",
        "description": "Check whether the output of 'node' can be connected to input i.\n\nParameters:\n\ni - Input number.\nnode - The node to be connected to input i.\n\nReturns: bool\nTrue if node can be connected, False otherwise.\nOverrides:\n        Node.canSetInput\n(inherited documentation)"
    },
    "nuke.Root().channels(...)": {
        "prefix": "nuke.Root().channels(...)",
        "body": "nuke.Root().channels(${1:...})",
        "description": "nuke.Root.channels() -> Channel list. Class method.\n\nReturns: String list\nChannel list.\nOverrides:\n        Node.channels"
    },
    "nuke.Root().clones()": {
        "prefix": "nuke.Root().clones()",
        "body": "nuke.Root().clones()",
        "description": "Returns: Number of clones\nNumber of clones.\nOverrides:\n        Node.clones\n(inherited documentation)"
    },
    "nuke.Root().connectInput( i, node)": {
        "prefix": "nuke.Root().connectInput( i, node)",
        "body": "nuke.Root().connectInput(${1:i}, ${2:node})",
        "description": "Connect the output of 'node' to the i'th input or the next available \n  unconnected input. The requested input is tried first, but if it is \n  already set then subsequent inputs are tried until an unconnected one is \n  found, as when you drop a connection arrow onto a node in the GUI.\n\nParameters:\n\ni - Input number to try first.\nnode - The node to connect to input i.\n\nReturns: bool\nTrue if a connection is made, False otherwise.\nOverrides:\n        Node.connectInput\n(inherited documentation)"
    },
    "nuke.Root().deleteView( s)": {
        "prefix": "nuke.Root().deleteView( s)",
        "body": "nuke.Root().deleteView(${1:s})",
        "description": "Delete view.\n\nParameters:\n\ns - Name of view.\n\nReturns: None\nNone."
    },
    "nuke.Root().firstFrame()": {
        "prefix": "nuke.Root().firstFrame()",
        "body": "nuke.Root().firstFrame()",
        "description": "First frame.\n\nReturns: Integer\nInteger.\nOverrides:\n        Node.firstFrame"
    },
    "nuke.Root().fps()": {
        "prefix": "nuke.Root().fps()",
        "body": "nuke.Root().fps()",
        "description": "Return the FPS rounded to an int. This is deprecated. Please use \n  real_fps().\n\nReturns: integer"
    },
    "nuke.Root().input( i)": {
        "prefix": "nuke.Root().input( i)",
        "body": "nuke.Root().input(${1:i})",
        "description": "Parameters:\n\ni - Input number.\n\nReturns: The i'th input\nThe i'th input.\nOverrides:\n        Node.input\n(inherited documentation)"
    },
    "nuke.Root().inputs()": {
        "prefix": "nuke.Root().inputs()",
        "body": "nuke.Root().inputs()",
        "description": "Returns: Gets the maximum number of connected inputs\nNumber of the highest connected input + 1. If inputs 0, 1, and 3 \n          are connected, this will return 4.\nOverrides:\n        Node.inputs\n(inherited documentation)"
    },
    "nuke.Root().lastFrame()": {
        "prefix": "nuke.Root().lastFrame()",
        "body": "nuke.Root().lastFrame()",
        "description": "Last frame.\n\nReturns: Integer\nInteger.\nOverrides:\n        Node.lastFrame"
    },
    "nuke.Root().layers(...)": {
        "prefix": "nuke.Root().layers(...)",
        "body": "nuke.Root().layers(${1:...})",
        "description": "nuke.Root.layers() -> Layer list. Class method.\n\nReturns:\nLayer list."
    },
    "nuke.Root().maximumInputs()": {
        "prefix": "nuke.Root().maximumInputs()",
        "body": "nuke.Root().maximumInputs()",
        "description": "Returns: Maximum number of inputs this node can have\nMaximum number of inputs this node can have.\nOverrides:\n        Node.maximumInputs\n(inherited documentation)"
    },
    "nuke.Root().maximumOutputs()": {
        "prefix": "nuke.Root().maximumOutputs()",
        "body": "nuke.Root().maximumOutputs()",
        "description": "Returns: Maximum number of outputs this node can have\nMaximum number of outputs this node can have.\nOverrides:\n        Node.maximumOutputs\n(inherited documentation)"
    },
    "nuke.Root().mergeFrameRange( a, b)": {
        "prefix": "nuke.Root().mergeFrameRange( a, b)",
        "body": "nuke.Root().mergeFrameRange(${1:a}, ${2:b})",
        "description": "Merge frame range.\n\nParameters:\n\na - Low-end of interval range.\nb - High-end of interval range.\n\nReturns: None\nNone."
    },
    "nuke.Root().minimumInputs()": {
        "prefix": "nuke.Root().minimumInputs()",
        "body": "nuke.Root().minimumInputs()",
        "description": "Returns: Minimum number of inputs this node can have\nMinimum number of inputs this node can have.\nOverrides:\n        Node.minimumInputs\n(inherited documentation)"
    },
    "nuke.Root().modified()": {
        "prefix": "nuke.Root().modified()",
        "body": "nuke.Root().modified()",
        "description": "Get or set the 'modified' flag in a script\n\nReturns: True if modified, False otherwise\nTrue if modified, False otherwise."
    },
    "nuke.Root().optionalInput()": {
        "prefix": "nuke.Root().optionalInput()",
        "body": "nuke.Root().optionalInput()",
        "description": "Returns: Number of first optional input\nNumber of first optional input.\nOverrides:\n        Node.optionalInput\n(inherited documentation)"
    },
    "nuke.Root().proxy()": {
        "prefix": "nuke.Root().proxy()",
        "body": "nuke.Root().proxy()",
        "description": "Returns: True if proxy is set, False otherwise\nTrue if proxy is set, False otherwise.\nOverrides:\n        Node.proxy"
    },
    "nuke.Root().realFps()": {
        "prefix": "nuke.Root().realFps()",
        "body": "nuke.Root().realFps()",
        "description": "The global frames per second setting.\n\nReturns ->\b float"
    },
    "nuke.Root().setFrame( n)": {
        "prefix": "nuke.Root().setFrame( n)",
        "body": "nuke.Root().setFrame(${1:n})",
        "description": "Set frame.\n\nParameters:\n\nn - Frame number.\n\nReturns: None\nNone."
    },
    "nuke.Root().setInput( i, node)": {
        "prefix": "nuke.Root().setInput( i, node)",
        "body": "nuke.Root().setInput(${1:i}, ${2:node})",
        "description": "Connect input i to node if canSetInput() returns true.\n\nParameters:\n\ni - Input number.\nnode - The node to connect to input i.\n\nReturns: bool\nTrue if canSetInput() returns true, or if the input is already \n          correct.\nOverrides:\n        Node.setInput\n(inherited documentation)"
    },
    "nuke.Root().setModified( b)": {
        "prefix": "nuke.Root().setModified( b)",
        "body": "nuke.Root().setModified(${1:b})",
        "description": "Set the 'modified' flag in a script. Setting the value will turn the \n  indicator in the title bar on/off and will start or stop the autosave \n  timeout.\n\nParameters:\n\nb - Boolean convertible object.\n\nReturns: None\nNone."
    },
    "nuke.Root().setProxy( b)": {
        "prefix": "nuke.Root().setProxy( b)",
        "body": "nuke.Root().setProxy(${1:b})",
        "description": "Set proxy.\n\nParameters:\n\nb - Boolean convertible object.\n\nReturns: None\nNone."
    },
    "nuke.Root().setView( s)": {
        "prefix": "nuke.Root().setView( s)",
        "body": "nuke.Root().setView(${1:s})",
        "description": "Set view.\n\nParameters:\n\ns - Name of view.\n\nReturns: None\nNone."
    },
    "nuke.Scale_Knob().names(n)": {
        "prefix": "nuke.Scale_Knob().names(n)",
        "body": "nuke.Scale_Knob().names(${1:n})",
        "description": "Return name for dimension n. The argument n is an integer.\n\nReturns: string"
    },
    "nuke.Scale_Knob().value(n, oc)": {
        "prefix": "nuke.Scale_Knob().value(n, oc)",
        "body": "nuke.Scale_Knob().value(${1:n}, ${2:oc})",
        "description": "Return value for dimension n. The optional argument oc is an \n  OutputContext.\n\nParameters:\n\nindex - Optional index. Default is 0.\nview - Optional view.\ntime - Optional time.\n\nReturns: float\nFloating point or List of floating point values (in case some are\n          different).\nOverrides:\n        Knob.value"
    },
    "nuke.Scale_Knob().x(oc)": {
        "prefix": "nuke.Scale_Knob().x(oc)",
        "body": "nuke.Scale_Knob().x(${1:oc})",
        "description": "Return value for x. The optional oc argument is an OutputContext\n\nReturns: float"
    },
    "nuke.Scale_Knob().y(oc)": {
        "prefix": "nuke.Scale_Knob().y(oc)",
        "body": "nuke.Scale_Knob().y(${1:oc})",
        "description": "Return value for y. The optional oc argument is an OutputContext\n\nReturns: float"
    },
    "nuke.Scale_Knob().z(oc)": {
        "prefix": "nuke.Scale_Knob().z(oc)",
        "body": "nuke.Scale_Knob().z(${1:oc})",
        "description": "Return value for z. The optional oc argument is an OutputContext\n\nReturns: float"
    },
    "nuke.SceneView_Knob().addItems()": {
        "prefix": "nuke.SceneView_Knob().addItems()",
        "body": "nuke.SceneView_Knob().addItems()",
        "description": "Adds a list of string items to the knob. New items are automatically \n  set as imported and selected.\n\nReturns: None"
    },
    "nuke.SceneView_Knob().getAllItems()": {
        "prefix": "nuke.SceneView_Knob().getAllItems()",
        "body": "nuke.SceneView_Knob().getAllItems()",
        "description": "Returns a list of strings containing all items that the knob can \n      import.\n\nReturns ->\b list"
    },
    "nuke.SceneView_Knob().getHighlightedItem()": {
        "prefix": "nuke.SceneView_Knob().getHighlightedItem()",
        "body": "nuke.SceneView_Knob().getHighlightedItem()",
        "description": "Returns a string containing the item which is currently highlighted.\n\nReturns ->\b string"
    },
    "nuke.SceneView_Knob().getImportedItems()": {
        "prefix": "nuke.SceneView_Knob().getImportedItems()",
        "body": "nuke.SceneView_Knob().getImportedItems()",
        "description": "Returns a list of strings containing all items imported into the \n      knob.\n\nReturns ->\b list"
    },
    "nuke.SceneView_Knob().getSelectedItems()": {
        "prefix": "nuke.SceneView_Knob().getSelectedItems()",
        "body": "nuke.SceneView_Knob().getSelectedItems()",
        "description": "Returns a list of strings containing all currently selected items in \n      the knob.\n\nReturns ->\b list"
    },
    "nuke.SceneView_Knob().removeItems()": {
        "prefix": "nuke.SceneView_Knob().removeItems()",
        "body": "nuke.SceneView_Knob().removeItems()",
        "description": "Removes a list of string items from the knob.\n\nReturns ->\b None"
    },
    "nuke.SceneView_Knob().setAllItems( items, autoSelect)": {
        "prefix": "nuke.SceneView_Knob().setAllItems( items, autoSelect)",
        "body": "nuke.SceneView_Knob().setAllItems(${1:items}, ${2:autoSelect})",
        "description": "Sets a list of strings containing all items that the knob can import. \n  After calling this function, only items from this list can be imported \n  into the nosde.\n\nParameters:\n\nitems - List of imported items.\nautoSelect - If True, all items are automatically set as imported and \n          selected.\n\nReturns: None\nNone."
    },
    "nuke.SceneView_Knob().setImportedItems( items)": {
        "prefix": "nuke.SceneView_Knob().setImportedItems( items)",
        "body": "nuke.SceneView_Knob().setImportedItems(${1:items})",
        "description": "Sets a list of strings containing all items imported into the knob. \n  This will overwrite the current imported items list.@param items: List of\n  imported items.\n\nReturns: None\nNone."
    },
    "nuke.SceneView_Knob().setSelectedItems()": {
        "prefix": "nuke.SceneView_Knob().setSelectedItems()",
        "body": "nuke.SceneView_Knob().setSelectedItems()",
        "description": "Takes a list of strings of items contained in the knob and sets them \n      as selected.\n\nReturns ->\b None"
    },
    "nuke.Script_Knob().command()": {
        "prefix": "nuke.Script_Knob().command()",
        "body": "nuke.Script_Knob().command()",
        "description": "Get the current command.\n\nReturns: str\nThe current command as a string, or None if there is no current \n          command."
    },
    "nuke.Script_Knob().execute()": {
        "prefix": "nuke.Script_Knob().execute()",
        "body": "nuke.Script_Knob().execute()",
        "description": "Execute the command.\n\nReturns: None\nNone."
    },
    "nuke.Script_Knob().setCommand( cmd)": {
        "prefix": "nuke.Script_Knob().setCommand( cmd)",
        "body": "nuke.Script_Knob().setCommand(${1:cmd})",
        "description": "Set the new command for this knob.\n\nParameters:\n\ncmd - String containing a TCL command.\n\nReturns: None\nNone."
    },
    "nuke.Script_Knob().setValue( cmd)": {
        "prefix": "nuke.Script_Knob().setValue( cmd)",
        "body": "nuke.Script_Knob().setValue(${1:cmd})",
        "description": "Set the new command for this knob.\n\nParameters:\n\ncmd - String containing a TCL command.\n\nReturns: None\nNone.\nOverrides:\n        Knob.setValue"
    },
    "nuke.Script_Knob().value()": {
        "prefix": "nuke.Script_Knob().value()",
        "body": "nuke.Script_Knob().value()",
        "description": "Get the current command.\n\nParameters:\n\noc - Optional parameter specifying the output context.\n\nReturns: str\nThe current command as a string, or None if there is no current \n          command.\nOverrides:\n        Knob.value"
    },
    "nuke.String_Knob().getText( oc)": {
        "prefix": "nuke.String_Knob().getText( oc)",
        "body": "nuke.String_Knob().getText(${1:oc})",
        "description": "Get the value of this knob as a string.\n\nParameters:\n\noc - Optional parameter specifying the output context.\n\nReturns: str\nString value."
    },
    "nuke.String_Knob().getValue( oc)": {
        "prefix": "nuke.String_Knob().getValue( oc)",
        "body": "nuke.String_Knob().getValue(${1:oc})",
        "description": "Get the value of this knob as a string.\n\nParameters:\n\noc - Optional parameter specifying the output context.\n\nReturns: str\nString value.\nOverrides:\n        Knob.getValue"
    },
    "nuke.String_Knob().setText( val, view='default')": {
        "prefix": "nuke.String_Knob().setText( val, view='default')",
        "body": "nuke.String_Knob().setText(${1:val}, view=${2:'default'})",
        "description": "Set value of knob.\n\nParameters:\n\nval - The new value.\nview - Optional parameter specifying which view to set the value for. If\n          omitted, the value will be set for the default view.\n\nReturns: None\nNone"
    },
    "nuke.String_Knob().setValue( val, view='default')": {
        "prefix": "nuke.String_Knob().setValue( val, view='default')",
        "body": "nuke.String_Knob().setValue(${1:val}, view=${2:'default'})",
        "description": "Set value of knob.\n\nParameters:\n\nval - The new value.\nview - Optional parameter specifying which view to set the value for. If\n          omitted, the value will be set for the default view.\n\nReturns: None\nNone\nOverrides:\n        Knob.setValue"
    },
    "nuke.String_Knob().splitView( view)": {
        "prefix": "nuke.String_Knob().splitView( view)",
        "body": "nuke.String_Knob().splitView(${1:view})",
        "description": "Split the view away from the current knob value.\n\nParameters:\n\nview - Optional view. Default is current view.\n\nReturns: None\nNone."
    },
    "nuke.String_Knob().unsplitView( view)": {
        "prefix": "nuke.String_Knob().unsplitView( view)",
        "body": "nuke.String_Knob().unsplitView(${1:view})",
        "description": "Unsplit the view so that it shares a value with other views.\n\nParameters:\n\nview - Optional view. Default is current view.\n\nReturns: None\nNone."
    },
    "nuke.String_Knob().value( oc)": {
        "prefix": "nuke.String_Knob().value( oc)",
        "body": "nuke.String_Knob().value(${1:oc})",
        "description": "Get the value of this knob as a string.\n\nParameters:\n\noc - Optional parameter specifying the output context.\n\nReturns: str\nString value.\nOverrides:\n        Knob.value"
    },
    "nuke.Tab_Knob().setValue( val, chan)": {
        "prefix": "nuke.Tab_Knob().setValue( val, chan)",
        "body": "nuke.Tab_Knob().setValue(${1:val}, ${2:chan})",
        "description": "Sets the value 'val' at channel 'chan'.\n\nReturns: bool\nTrue if successful, False if not.\nOverrides:\n        Knob.setValue\n(inherited documentation)"
    },
    "nuke.Tab_Knob().value(...)": {
        "prefix": "nuke.Tab_Knob().value(...)",
        "body": "nuke.Tab_Knob().value(${1:...})",
        "description": "Return value at the current frame for channel 'c'.\n\nOverrides:\n        Knob.value\n(inherited documentation)"
    },
    "nuke.Text_Knob().setValue( val, chan)": {
        "prefix": "nuke.Text_Knob().setValue( val, chan)",
        "body": "nuke.Text_Knob().setValue(${1:val}, ${2:chan})",
        "description": "Sets the value 'val' at channel 'chan'.\n\nReturns: bool\nTrue if successful, False if not.\nOverrides:\n        Knob.setValue\n(inherited documentation)"
    },
    "nuke.Text_Knob().value(...)": {
        "prefix": "nuke.Text_Knob().value(...)",
        "body": "nuke.Text_Knob().value(${1:...})",
        "description": "Return value at the current frame for channel 'c'.\n\nOverrides:\n        Knob.value\n(inherited documentation)"
    },
    "nuke.ToolBar().addCommand( name, command, shortcut, icon, tooltip, index, readonly)": {
        "prefix": "nuke.ToolBar().addCommand( name, command, shortcut, icon, tooltip, index, readonly)",
        "body": "nuke.ToolBar().addCommand(${1:name}, ${2:command}, ${3:shortcut}, ${4:icon}, ${5:tooltip}, ${6:index}, ${7:readonly})",
        "description": "Add a new command to this menu/toolbar. Note that when invoked, the \n  command is automatically enclosed in an undo group, so that undo/redo \n  functionality works. Optional arguments can be specified by name. Note \n  that if the command argument is not specified, then the command will be \n  auto-created as a \"nuke.createNode()\" using the name argument \n  as the node to create.\nExample: menubar = nuke.menu('Nuke') fileMenu = \n  menubar.findItem('File') fileMenu.addCommand('NewCommand', 'print 10', \n  shortcut='t')\n\nParameters:\n\nname - The name for the menu/toolbar item. The name may contain submenu \n          names delimited by '/' or '', and submenus are created as needed.\ncommand - Optional. The command to add to the menu/toolbar. This can be a \n          string to evaluate or a Python Callable (function, method, etc) \n          to run.\nshortcut - Optional. The keyboard shortcut for the command, such as 'R', \n          'F5' or 'Ctrl-H'. Note that this overrides pre-existing other \n          uses for the shortcut.\nicon - Optional. An icon for the command. This should be a path to an \n          icon in the nuke.pluginPath() directory. If the icon is not \n          specified, Nuke will automatically try to find an icon with the \n          name argument and .png appended to it.\ntooltip - Optional. The tooltip text, displayed on mouseover for toolbar \n          buttons.\nindex - Optional. The position to insert the new item in, in the \n          menu/toolbar. This defaults to last in the menu/toolbar.\nreadonly - Optional. True/False for whether the item should be available \n          when the menu is invoked in a read-only context.\n\nReturns: The menu/toolbar item that was added to hold the command\nThe menu/toolbar item that was added to hold the command."
    },
    "nuke.ToolBar().addMenu( **kwargs)": {
        "prefix": "nuke.ToolBar().addMenu( **kwargs)",
        "body": "nuke.ToolBar().addMenu(${1:**kwargs})",
        "description": "Add a new submenu.\n\nParameters:\n\n**kwargs, The, following, keyword, arguments, are, accepted - name      The name for the menu/toolbar item icon      An icon \n          for the menu. Loaded from the nuke search path. tooltip   The \n          tooltip text. index     The position to insert the menu in. Use \n          -1 to add to the end of the menu.\n\nReturns: The submenu that was added\nThe submenu that was added."
    },
    "nuke.ToolBar().addSeparator( **kwargs)": {
        "prefix": "nuke.ToolBar().addSeparator( **kwargs)",
        "body": "nuke.ToolBar().addSeparator(${1:**kwargs})",
        "description": "Add a separator to this menu/toolbar.\n\nParameters:\n\n**kwargs, The, following, keyword, arguments, are, accepted - index     The position to insert the new separator in, in the \n          menu/toolbar.\n\nReturns: The separator that was created\nThe separator that was created."
    },
    "nuke.ToolBar().clearMenu()": {
        "prefix": "nuke.ToolBar().clearMenu()",
        "body": "nuke.ToolBar().clearMenu()",
        "description": "Clears a menu.\n\nParameters:\n\n**kwargs, The, following, keyword, arguments, are, accepted - name      The name for the menu/toolbar item\n\nReturns:\ntrue if cleared, false if menu not found"
    },
    "nuke.ToolBar().findItem( name)": {
        "prefix": "nuke.ToolBar().findItem( name)",
        "body": "nuke.ToolBar().findItem(${1:name})",
        "description": "Finds a submenu or command with a particular name.\n\nParameters:\n\nname - The name to search for.\n\nReturns: Menu or None\nThe submenu or command we found, or None if we could not find \n          anything."
    },
    "nuke.ToolBar().items()": {
        "prefix": "nuke.ToolBar().items()",
        "body": "nuke.ToolBar().items()",
        "description": "Returns a list of sub menu items.\n\nReturns ->\b None"
    },
    "nuke.ToolBar().menu( name)": {
        "prefix": "nuke.ToolBar().menu( name)",
        "body": "nuke.ToolBar().menu(${1:name})",
        "description": "Finds a submenu or command with a particular name.\n\nParameters:\n\nname - The name to search for.\n\nReturns: Menu or None\nThe submenu or command we found, or None if we could not find \n          anything."
    },
    "nuke.ToolBar().name()": {
        "prefix": "nuke.ToolBar().name()",
        "body": "nuke.ToolBar().name()",
        "description": "Returns the name of the menu item.\n\nReturns ->\b String"
    },
    "nuke.ToolBar().removeItem( name)": {
        "prefix": "nuke.ToolBar().removeItem( name)",
        "body": "nuke.ToolBar().removeItem(${1:name})",
        "description": "Removes a submenu or command with a particular name. If the containing\n  menu becomes empty, it will be removed too.\n\nParameters:\n\nname - The name to remove for.\n\nReturns: None\ntrue if removed, false if menu not found"
    },
    "nuke.Transform2d_Knob().value(oc)": {
        "prefix": "nuke.Transform2d_Knob().value(oc)",
        "body": "nuke.Transform2d_Knob().value(${1:oc})",
        "description": "Return transformation matrix. The argument oc is an OutputContext. \n  Both arguments are optional.\n\nReturns: matrix\nOverrides:\n        Knob.value"
    },
    "nuke.UV_Knob().names(n)": {
        "prefix": "nuke.UV_Knob().names(n)",
        "body": "nuke.UV_Knob().names(${1:n})",
        "description": "Return name for dimension n. The argument n is an integer.\n\nReturns: string"
    },
    "nuke.Undo().begin(...)": {
        "prefix": "nuke.Undo().begin(...)",
        "body": "nuke.Undo().begin(${1:...})",
        "description": "Begin a new user-visible group of undo actions."
    },
    "nuke.Undo().cancel(...)": {
        "prefix": "nuke.Undo().cancel(...)",
        "body": "nuke.Undo().cancel(${1:...})",
        "description": "Undoes any actions recorded in the current set and throws it away."
    },
    "nuke.Undo().disable(...)": {
        "prefix": "nuke.Undo().disable(...)",
        "body": "nuke.Undo().disable(${1:...})",
        "description": "Prevent recording undos until matching enable()"
    },
    "nuke.Undo().disabled(...)": {
        "prefix": "nuke.Undo().disabled(...)",
        "body": "nuke.Undo().disabled(${1:...})",
        "description": "True if disable() has been called"
    },
    "nuke.Undo().enable(...)": {
        "prefix": "nuke.Undo().enable(...)",
        "body": "nuke.Undo().enable(${1:...})",
        "description": "Undoes the previous disable()"
    },
    "nuke.Undo().end(...)": {
        "prefix": "nuke.Undo().end(...)",
        "body": "nuke.Undo().end(${1:...})",
        "description": "Complete current undo set and add it to the undo list."
    },
    "nuke.Undo().name(...)": {
        "prefix": "nuke.Undo().name(...)",
        "body": "nuke.Undo().name(${1:...})",
        "description": "Name current undo set."
    },
    "nuke.Undo().new(...)": {
        "prefix": "nuke.Undo().new(...)",
        "body": "nuke.Undo().new(${1:...})",
        "description": "Same as end();begin()."
    },
    "nuke.Undo().redo(...)": {
        "prefix": "nuke.Undo().redo(...)",
        "body": "nuke.Undo().redo(${1:...})",
        "description": "Redoes 0'th redo."
    },
    "nuke.Undo().redoDescribe(...)": {
        "prefix": "nuke.Undo().redoDescribe(...)",
        "body": "nuke.Undo().redoDescribe(${1:...})",
        "description": "Return short description of redo n."
    },
    "nuke.Undo().redoDescribeFully(...)": {
        "prefix": "nuke.Undo().redoDescribeFully(...)",
        "body": "nuke.Undo().redoDescribeFully(${1:...})",
        "description": "Return long description of redo n."
    },
    "nuke.Undo().redoSize(...)": {
        "prefix": "nuke.Undo().redoSize(...)",
        "body": "nuke.Undo().redoSize(${1:...})",
        "description": "Number of redo's that can be done."
    },
    "nuke.Undo().redoTruncate(...)": {
        "prefix": "nuke.Undo().redoTruncate(...)",
        "body": "nuke.Undo().redoTruncate(${1:...})",
        "description": "Destroy any redo's greater or equal to n."
    },
    "nuke.Undo().undo(...)": {
        "prefix": "nuke.Undo().undo(...)",
        "body": "nuke.Undo().undo(${1:...})",
        "description": "Undoes 0'th undo."
    },
    "nuke.Undo().undoDescribe(...)": {
        "prefix": "nuke.Undo().undoDescribe(...)",
        "body": "nuke.Undo().undoDescribe(${1:...})",
        "description": "Return short description of undo n."
    },
    "nuke.Undo().undoDescribeFully(...)": {
        "prefix": "nuke.Undo().undoDescribeFully(...)",
        "body": "nuke.Undo().undoDescribeFully(${1:...})",
        "description": "Return long description of undo n."
    },
    "nuke.Undo().undoSize(...)": {
        "prefix": "nuke.Undo().undoSize(...)",
        "body": "nuke.Undo().undoSize(${1:...})",
        "description": "Number of undo's that can be done."
    },
    "nuke.Undo().undoTruncate(...)": {
        "prefix": "nuke.Undo().undoTruncate(...)",
        "body": "nuke.Undo().undoTruncate(${1:...})",
        "description": "Destroy any undo's greater or equal to n."
    },
    "nuke.Unsigned_Knob().setValue( val)": {
        "prefix": "nuke.Unsigned_Knob().setValue( val)",
        "body": "nuke.Unsigned_Knob().setValue(${1:val})",
        "description": "Set the unsigned integer value of this knob.\n\nParameters:\n\nval - The new value for the knob. Must be an integer >= 0.\n\nReturns: bool\nTrue if succeeded, False otherwise.\nOverrides:\n        Knob.setValue"
    },
    "nuke.Unsigned_Knob().value()": {
        "prefix": "nuke.Unsigned_Knob().value()",
        "body": "nuke.Unsigned_Knob().value()",
        "description": "Get the value of this knob as an integer.\n\nParameters:\n\nindex - Optional index. Default is 0.\nview - Optional view.\ntime - Optional time.\n\nReturns: int\nint\nOverrides:\n        Knob.value"
    },
    "nuke.View().string()": {
        "prefix": "nuke.View().string()",
        "body": "nuke.View().string()",
        "description": "Returns: Name of view\nName of view."
    },
    "nuke.View().value()": {
        "prefix": "nuke.View().value()",
        "body": "nuke.View().value()",
        "description": "Returns: Value of view\nValue of view."
    },
    "nuke.Viewer().frameCached(f)": {
        "prefix": "nuke.Viewer().frameCached(f)",
        "body": "nuke.Viewer().frameCached(${1:f})",
        "description": "Determine whether frame /f/ is known to be in the memory cache.\n\nReturns ->\b Bool"
    },
    "nuke.Viewer().playbackRange()": {
        "prefix": "nuke.Viewer().playbackRange()",
        "body": "nuke.Viewer().playbackRange()",
        "description": "Return the frame range that's currently set to be played back in the \n      viewer.@return: FrameRange.\n\nReturns ->\b FrameRange"
    },
    "nuke.Viewer().recordMouse(f)": {
        "prefix": "nuke.Viewer().recordMouse(f)",
        "body": "nuke.Viewer().recordMouse(${1:f})",
        "description": "Determine whether frame /f/ is known to be in the memory cache.\n\nReturns ->\b Bool"
    },
    "nuke.Viewer().recordMouseStop(f)": {
        "prefix": "nuke.Viewer().recordMouseStop(f)",
        "body": "nuke.Viewer().recordMouseStop(${1:f})",
        "description": "Stops mouse recording."
    },
    "nuke.Viewer().replayMouse(f)": {
        "prefix": "nuke.Viewer().replayMouse(f)",
        "body": "nuke.Viewer().replayMouse(${1:f})",
        "description": "Determine whether frame /f/ is known to be in the memory cache.\n\nReturns ->\b Bool"
    },
    "nuke.Viewer().roi()": {
        "prefix": "nuke.Viewer().roi()",
        "body": "nuke.Viewer().roi()",
        "description": "Region of interest set in the viewer in pixel space coordinates. \n  Returns None if the Viewer has no window yet.\n\nReturns: dict\nDict with keys x, y, r and t or None."
    },
    "nuke.Viewer().roiEnabled()": {
        "prefix": "nuke.Viewer().roiEnabled()",
        "body": "nuke.Viewer().roiEnabled()",
        "description": "Whether the viewing of just a region of interest is enabled. Returns \n  None if the Viewer has no window yet.\n\nReturns: bool\nBoolean or None."
    },
    "nuke.Viewer().sendMouseEvent(f)": {
        "prefix": "nuke.Viewer().sendMouseEvent(f)",
        "body": "nuke.Viewer().sendMouseEvent(${1:f})",
        "description": "Determine whether frame /f/ is known to be in the memory cache.\n\nReturns ->\b Bool"
    },
    "nuke.Viewer().setRoi( box)": {
        "prefix": "nuke.Viewer().setRoi( box)",
        "body": "nuke.Viewer().setRoi(${1:box})",
        "description": "Set the region of interest in pixel space.\n\nParameters:\n\nbox - A dictionary with the x, y, r and t keys.@return: None.\n\nReturns: None"
    },
    "nuke.Viewer().toggleMouseTrails(f)": {
        "prefix": "nuke.Viewer().toggleMouseTrails(f)",
        "body": "nuke.Viewer().toggleMouseTrails(${1:f})",
        "description": "Determine whether frame /f/ is known to be in the memory cache.\n\nReturns ->\b Bool"
    },
    "nuke.ViewerProcess().node(...)": {
        "prefix": "nuke.ViewerProcess().node(...)",
        "body": "nuke.ViewerProcess().node(${1:...})",
        "description": "nuke.ViewerProcess.node(name, viewer) -> Node. Returns a \n  ViewerProcess node. Default is to return the current selected one. This \n  is a class method.\n\nParameters:\n\nname - Optional ViewerProcess name.\nviewer - Optional viewer name.\n\nReturns:\nNode."
    },
    "nuke.ViewerProcess().register(...)": {
        "prefix": "nuke.ViewerProcess().register(...)",
        "body": "nuke.ViewerProcess().register(${1:...})",
        "description": "nuke.ViewerProcess.register(name, call, args, kwargs) -> None. \n  Register a ViewerProcess. This is a class method.\n\nParameters:\n\nname - Menu name.\ncall - Python callable. Must return a Node.\nargs - Arguments to call.\nkwargs - Optional named arguments.\n\nReturns:\nNone."
    },
    "nuke.ViewerProcess().registeredNames(...)": {
        "prefix": "nuke.ViewerProcess().registeredNames(...)",
        "body": "nuke.ViewerProcess().registeredNames(${1:...})",
        "description": "nuke.ViewerProcess.registeredNames() -> List. Returns a list \n  containing the names of all currently regisered ViewerProcesses.\n\nReturns:\nList."
    },
    "nuke.ViewerProcess().unregister(...)": {
        "prefix": "nuke.ViewerProcess().unregister(...)",
        "body": "nuke.ViewerProcess().unregister(${1:...})",
        "description": "nuke.ViewerProcess.unregister(name) -> None. Unregister a \n  ViewerProcess. This is a class method.\n\nParameters:\n\nname - Menu name.\n\nReturns:\nNone."
    },
    "nuke.ViewerWindow().activateInput( input, secondary=False)": {
        "prefix": "nuke.ViewerWindow().activateInput( input, secondary=False)",
        "body": "nuke.ViewerWindow().activateInput(${1:input}, secondary=${2:False})",
        "description": "Set the given viewer input to be active - i. e. show its image in the \n  output window.\n\nParameters:\n\ninput - The viewer input number, starting with 0 for the first.  If the \n          input is not connected, a ValueError exception is raised.\nsecondary - True if the input should be connected as the secondary (wipe) \n          input, or False to connect it as the primary input (the default).\n\nReturns: None\nNone"
    },
    "nuke.ViewerWindow().activeInput( secondary=False)": {
        "prefix": "nuke.ViewerWindow().activeInput( secondary=False)",
        "body": "nuke.ViewerWindow().activeInput(secondary=${1:False})",
        "description": "Returns the currently active input of the viewer - i. e. the one with \n  its image in the output window.\n\nParameters:\n\nsecondary - True to return the index of the active secondary (wipe) input, or\n          False (the default) to return the primary input.\n\nReturns: int\nint: The currently active input of the viewer, starting with 0 \n          for the first, or None if no input is active."
    },
    "nuke.ViewerWindow().frameControl( i)": {
        "prefix": "nuke.ViewerWindow().frameControl( i)",
        "body": "nuke.ViewerWindow().frameControl(${1:i})",
        "description": "i is an integer indicating viewer frame control 'button' to execute:\n\n   -6 go to start\n   -5 play reverse\n   -4 go to previous keyframe\n   -3 step back by increment\n   -2 go back previous keyframe or increment, whichever is closer\n   -1 step back one frame\n\n    0 stop\n\n   +1 step forward one frame\n   +2 go to next keyframe or increment, whichever is closer\n   +3 step forward by increment\n   +4 go to next keyframe\n   +5 play forward\n   +6 go to end\n\nReturns: True"
    },
    "nuke.ViewerWindow().getGLCameraMatrix()": {
        "prefix": "nuke.ViewerWindow().getGLCameraMatrix()",
        "body": "nuke.ViewerWindow().getGLCameraMatrix()",
        "description": "Return the world transformations of the current GL viewer camera.\n\nReturns: Matrix4\nMatrix4: GL camera world transformation."
    },
    "nuke.ViewerWindow().getGeometryNodes()": {
        "prefix": "nuke.ViewerWindow().getGeometryNodes()",
        "body": "nuke.ViewerWindow().getGeometryNodes()",
        "description": "Returns the a list of geometry nodes attached with this viewer\n\nReturns: None\nNodes: a list of the geometry nodes."
    },
    "nuke.ViewerWindow().nextView()": {
        "prefix": "nuke.ViewerWindow().nextView()",
        "body": "nuke.ViewerWindow().nextView()",
        "description": "Returns ->\b switch to next view in settings Views list."
    },
    "nuke.ViewerWindow().node()": {
        "prefix": "nuke.ViewerWindow().node()",
        "body": "nuke.ViewerWindow().node()",
        "description": "Returns the Viewer node currently associated with this window.\n\nReturns: Node\nNode."
    },
    "nuke.ViewerWindow().play(...)": {
        "prefix": "nuke.ViewerWindow().play(...)",
        "body": "nuke.ViewerWindow().play(${1:...})",
        "description": "Play forward (1) or reverse (0)."
    },
    "nuke.ViewerWindow().previousView()": {
        "prefix": "nuke.ViewerWindow().previousView()",
        "body": "nuke.ViewerWindow().previousView()",
        "description": "Returns ->\b switch to previous view in settings Views list."
    },
    "nuke.ViewerWindow().setView( s)": {
        "prefix": "nuke.ViewerWindow().setView( s)",
        "body": "nuke.ViewerWindow().setView(${1:s})",
        "description": "Returns ->\b set 'current' multi-view view to 's'."
    },
    "nuke.ViewerWindow().stop(...)": {
        "prefix": "nuke.ViewerWindow().stop(...)",
        "body": "nuke.ViewerWindow().stop(${1:...})",
        "description": "Stop playing."
    },
    "nuke.ViewerWindow().view()": {
        "prefix": "nuke.ViewerWindow().view()",
        "body": "nuke.ViewerWindow().view()",
        "description": "Returns ->\b string name of 'current' multi-view view."
    },
    "nuke.WH_Knob().names(...)": {
        "prefix": "nuke.WH_Knob().names(...)",
        "body": "nuke.WH_Knob().names(${1:...})",
        "description": "Return name for dimension 'i'."
    },
    "nuke.WH_Knob().x(...)": {
        "prefix": "nuke.WH_Knob().x(...)",
        "body": "nuke.WH_Knob().x(${1:...})",
        "description": "Return value for X position."
    },
    "nuke.WH_Knob().x_at(...)": {
        "prefix": "nuke.WH_Knob().x_at(...)",
        "body": "nuke.WH_Knob().x_at(${1:...})",
        "description": "Return value for X position at time 't'."
    },
    "nuke.WH_Knob().y(...)": {
        "prefix": "nuke.WH_Knob().y(...)",
        "body": "nuke.WH_Knob().y(${1:...})",
        "description": "Return value for Y position."
    },
    "nuke.WH_Knob().y_at(...)": {
        "prefix": "nuke.WH_Knob().y_at(...)",
        "body": "nuke.WH_Knob().y_at(${1:...})",
        "description": "Return value for Y position at time 't'."
    },
    "nuke.XYZ_Knob().names(n)": {
        "prefix": "nuke.XYZ_Knob().names(n)",
        "body": "nuke.XYZ_Knob().names(${1:n})",
        "description": "Return name for dimension n. The argument n is an integer.\n\nReturns: string"
    },
    "nuke.XYZ_Knob().parent()": {
        "prefix": "nuke.XYZ_Knob().parent()",
        "body": "nuke.XYZ_Knob().parent()",
        "description": "Return parent.\n\nReturns ->\b XYZ_Knob"
    },
    "nuke.XYZ_Knob().value(n, oc)": {
        "prefix": "nuke.XYZ_Knob().value(n, oc)",
        "body": "nuke.XYZ_Knob().value(${1:n}, ${2:oc})",
        "description": "Return value for dimension n. The optional argument oc is an \n  OutputContext.\n\nParameters:\n\nindex - Optional index. Default is 0.\nview - Optional view.\ntime - Optional time.\n\nReturns: float\nFloating point or List of floating point values (in case some are\n          different).\nOverrides:\n        Knob.value"
    },
    "nuke.XYZ_Knob().x(oc)": {
        "prefix": "nuke.XYZ_Knob().x(oc)",
        "body": "nuke.XYZ_Knob().x(${1:oc})",
        "description": "Return value for x. The optional oc argument is an OutputContext\n\nReturns: float"
    },
    "nuke.XYZ_Knob().y(oc)": {
        "prefix": "nuke.XYZ_Knob().y(oc)",
        "body": "nuke.XYZ_Knob().y(${1:oc})",
        "description": "Return value for y. The optional oc argument is an OutputContext\n\nReturns: float"
    },
    "nuke.XYZ_Knob().z(oc)": {
        "prefix": "nuke.XYZ_Knob().z(oc)",
        "body": "nuke.XYZ_Knob().z(${1:oc})",
        "description": "Return value for z. The optional oc argument is an OutputContext\n\nReturns: float"
    },
    "nuke.XY_Knob().names(n)": {
        "prefix": "nuke.XY_Knob().names(n)",
        "body": "nuke.XY_Knob().names(${1:n})",
        "description": "Return name for dimension n. The argument n is an integer.\n\nReturns: string"
    },
    "nuke.XY_Knob().value(n, oc)": {
        "prefix": "nuke.XY_Knob().value(n, oc)",
        "body": "nuke.XY_Knob().value(${1:n}, ${2:oc})",
        "description": "Return value for dimension n. The optional argument oc is an \n  OutputContext.\n\nParameters:\n\nindex - Optional index. Default is 0.\nview - Optional view.\ntime - Optional time.\n\nReturns: float\nFloating point or List of floating point values (in case some are\n          different).\nOverrides:\n        Knob.value"
    },
    "nuke.XY_Knob().x(oc)": {
        "prefix": "nuke.XY_Knob().x(oc)",
        "body": "nuke.XY_Knob().x(${1:oc})",
        "description": "Return value for x. The optional oc argument is an OutputContext\n\nReturns: float"
    },
    "nuke.XY_Knob().y(oc)": {
        "prefix": "nuke.XY_Knob().y(oc)",
        "body": "nuke.XY_Knob().y(${1:oc})",
        "description": "Return value for y. The optional oc argument is an OutputContext\n\nReturns: float"
    }
}